{"version":3,"file":"dialog-utils.js","sourceRoot":"","sources":["../src/ts/dialog-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Dialog Utilities Module\n * Provides window/dialog z-index management and focus control functions.\n *\n * This module centralizes dialog utility functions that were previously scattered\n * in app.js, providing typed interfaces for better maintainability.\n *\n * @module dialog-utils\n */\n\n// Export to make this a proper module for global augmentation\nexport {};\n\n/**\n * Global window interface extensions for dialog utilities\n * Note: APP_CONSTANTS and topZIndex are defined in types/index.d.ts\n */\ndeclare global {\n    interface Window {\n        dialogs?: {\n            [key: string]: {\n                modal?: HTMLElement;\n                bringToFront?: () => void;\n            };\n        };\n        syncTopZIndexWithDOM?: () => void;\n        bringDialogToFront?: (dialogId: string) => void;\n        bringAllWindowsToFront?: () => void;\n    }\n}\n\n/**\n * Type helper for WindowManager (defined in types/window-manager.d.ts)\n */\ninterface IWindowManager {\n    syncZIndexWithDOM?: () => void;\n    getAllWindowIds?: () => string[];\n}\n\n/**\n * Get all modal IDs from WindowManager or fallback to APP_CONSTANTS\n * @returns Array of modal element IDs\n */\nfunction getModalIds(): string[] {\n    const win = window as Window & { WindowManager?: IWindowManager };\n    if (win.WindowManager && typeof win.WindowManager.getAllWindowIds === 'function') {\n        return win.WindowManager.getAllWindowIds();\n    }\n    // Cast window to access APP_CONSTANTS (defined in types/index.d.ts)\n    const w = window as Window & { APP_CONSTANTS?: Record<string, unknown> };\n    const appConstants = w.APP_CONSTANTS as { MODAL_IDS?: string[] } | undefined;\n    return appConstants?.MODAL_IDS || [];\n}\n\n/**\n * Synchronize the global topZIndex counter with the actual DOM z-index values.\n * Scans all registered modals and updates the topZIndex to match the highest z-index found.\n *\n * Delegates to WindowManager.syncZIndexWithDOM if available, otherwise uses fallback implementation.\n */\nfunction syncTopZIndexWithDOM(): void {\n    const win = window as Window & { WindowManager?: IWindowManager };\n    if (\n        win.WindowManager &&\n        typeof win.WindowManager.syncZIndexWithDOM === 'function'\n    ) {\n        win.WindowManager.syncZIndexWithDOM();\n        return;\n    }\n\n    // Fallback implementation\n    let maxZ = 1000;\n    const modalIds = getModalIds();\n\n    modalIds.forEach((id) => {\n        const modal = document.getElementById(id);\n        if (!modal) return;\n        const modalZ = parseInt(window.getComputedStyle(modal).zIndex, 10);\n        if (!Number.isNaN(modalZ)) {\n            maxZ = Math.max(maxZ, modalZ);\n        }\n    });\n\n    // Cast window to access topZIndex (defined in types/index.d.ts)\n    // Note: topZIndex is required in the type definition, but may not exist at runtime\n    const w = window as unknown as Window & { topZIndex?: number };\n    if (w.topZIndex !== undefined) {\n        w.topZIndex = maxZ;\n    }\n}\n\n/**\n * Bring a specific dialog/window to front by calling its bringToFront method.\n * This is the recommended way to change window focus programmatically.\n *\n * @param dialogId - The ID of the dialog element to bring to front\n */\nfunction bringDialogToFront(dialogId: string): void {\n    if (window.dialogs?.[dialogId]) {\n        window.dialogs[dialogId].bringToFront?.();\n    } else {\n        console.error('Kein Dialog mit der ID ' + dialogId + ' gefunden.');\n    }\n}\n\n/**\n * Bring all currently visible (non-hidden) windows to front.\n * Used by menu system to refresh z-index stack of all open windows.\n * Iterates through all registered dialogs and calls bringToFront on visible ones.\n */\nfunction bringAllWindowsToFront(): void {\n    const modalIds = getModalIds();\n    if (!window.dialogs || !modalIds || !Array.isArray(modalIds)) return;\n\n    modalIds.forEach((id) => {\n        const dialog = window.dialogs?.[id];\n        if (\n            dialog &&\n            dialog.modal &&\n            !dialog.modal.classList.contains('hidden') &&\n            typeof dialog.bringToFront === 'function'\n        ) {\n            dialog.bringToFront();\n        }\n    });\n}\n\n// ============================================================================\n// IIFE Export Pattern - Expose functions globally with guard to prevent redeclaration\n// ============================================================================\n\n(() => {\n    if (typeof window.syncTopZIndexWithDOM !== 'function') {\n        window.syncTopZIndexWithDOM = syncTopZIndexWithDOM;\n    }\n    if (typeof window.bringDialogToFront !== 'function') {\n        window.bringDialogToFront = bringDialogToFront;\n    }\n    if (typeof window.bringAllWindowsToFront !== 'function') {\n        window.bringAllWindowsToFront = bringAllWindowsToFront;\n    }\n})();\n"]}