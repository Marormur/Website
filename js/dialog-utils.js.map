{"version":3,"file":"dialog-utils.js","sourceRoot":"","sources":["../src/ts/dialog-utils.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Dialog Utilities Module\r\n * Provides window/dialog z-index management and focus control functions.\r\n * \r\n * This module centralizes dialog utility functions that were previously scattered\r\n * in app.js, providing typed interfaces for better maintainability.\r\n * \r\n * @module dialog-utils\r\n */\r\n\r\n// Export to make this a proper module for global augmentation\r\nexport {};\r\n\r\n/**\r\n * Global window interface extensions for dialog utilities\r\n */\r\ndeclare global {\r\n    interface Window {\r\n        APP_CONSTANTS?: {\r\n            MODAL_IDS?: string[];\r\n        };\r\n        topZIndex?: number;\r\n        dialogs?: {\r\n            [key: string]: {\r\n                modal?: HTMLElement;\r\n                bringToFront?: () => void;\r\n            };\r\n        };\r\n        syncTopZIndexWithDOM?: () => void;\r\n        bringDialogToFront?: (dialogId: string) => void;\r\n        bringAllWindowsToFront?: () => void;\r\n    }\r\n}\r\n\r\n/**\r\n * Type helper for WindowManager (defined in types/window-manager.d.ts)\r\n */\r\ninterface IWindowManager {\r\n    syncZIndexWithDOM?: () => void;\r\n    getAllWindowIds?: () => string[];\r\n}\r\n\r\n/**\r\n * Get all modal IDs from WindowManager or fallback to APP_CONSTANTS\r\n * @returns Array of modal element IDs\r\n */\r\nfunction getModalIds(): string[] {\r\n    const win = window as Window & { WindowManager?: IWindowManager };\r\n    if (win.WindowManager && typeof win.WindowManager.getAllWindowIds === 'function') {\r\n        return win.WindowManager.getAllWindowIds();\r\n    }\r\n    return window.APP_CONSTANTS?.MODAL_IDS || [];\r\n}\r\n\r\n/**\r\n * Synchronize the global topZIndex counter with the actual DOM z-index values.\r\n * Scans all registered modals and updates the topZIndex to match the highest z-index found.\r\n * \r\n * Delegates to WindowManager.syncZIndexWithDOM if available, otherwise uses fallback implementation.\r\n */\r\nfunction syncTopZIndexWithDOM(): void {\r\n    const win = window as Window & { WindowManager?: IWindowManager };\r\n    if (\r\n        win.WindowManager &&\r\n        typeof win.WindowManager.syncZIndexWithDOM === 'function'\r\n    ) {\r\n        win.WindowManager.syncZIndexWithDOM();\r\n        return;\r\n    }\r\n\r\n    // Fallback implementation\r\n    let maxZ = 1000;\r\n    const modalIds = getModalIds();\r\n    \r\n    modalIds.forEach((id) => {\r\n        const modal = document.getElementById(id);\r\n        if (!modal) return;\r\n        const modalZ = parseInt(window.getComputedStyle(modal).zIndex, 10);\r\n        if (!Number.isNaN(modalZ)) {\r\n            maxZ = Math.max(maxZ, modalZ);\r\n        }\r\n    });\r\n    \r\n    if (window.topZIndex !== undefined) {\r\n        window.topZIndex = maxZ;\r\n    }\r\n}\r\n\r\n/**\r\n * Bring a specific dialog/window to front by calling its bringToFront method.\r\n * This is the recommended way to change window focus programmatically.\r\n * \r\n * @param dialogId - The ID of the dialog element to bring to front\r\n */\r\nfunction bringDialogToFront(dialogId: string): void {\r\n    if (window.dialogs?.[dialogId]) {\r\n        window.dialogs[dialogId].bringToFront?.();\r\n    } else {\r\n        console.error('Kein Dialog mit der ID ' + dialogId + ' gefunden.');\r\n    }\r\n}\r\n\r\n/**\r\n * Bring all currently visible (non-hidden) windows to front.\r\n * Used by menu system to refresh z-index stack of all open windows.\r\n * Iterates through all registered dialogs and calls bringToFront on visible ones.\r\n */\r\nfunction bringAllWindowsToFront(): void {\r\n    const modalIds = getModalIds();\r\n    if (!window.dialogs || !modalIds || !Array.isArray(modalIds)) return;\r\n    \r\n    modalIds.forEach((id) => {\r\n        const dialog = window.dialogs?.[id];\r\n        if (\r\n            dialog &&\r\n            dialog.modal &&\r\n            !dialog.modal.classList.contains('hidden') &&\r\n            typeof dialog.bringToFront === 'function'\r\n        ) {\r\n            dialog.bringToFront();\r\n        }\r\n    });\r\n}\r\n\r\n// ============================================================================\r\n// IIFE Export Pattern - Expose functions globally with guard to prevent redeclaration\r\n// ============================================================================\r\n\r\n(() => {\r\n    if (typeof window.syncTopZIndexWithDOM !== 'function') {\r\n        window.syncTopZIndexWithDOM = syncTopZIndexWithDOM;\r\n    }\r\n    if (typeof window.bringDialogToFront !== 'function') {\r\n        window.bringDialogToFront = bringDialogToFront;\r\n    }\r\n    if (typeof window.bringAllWindowsToFront !== 'function') {\r\n        window.bringAllWindowsToFront = bringAllWindowsToFront;\r\n    }\r\n})();\r\n"]}