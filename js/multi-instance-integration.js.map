{"version":3,"file":"multi-instance-integration.js","sourceRoot":"","sources":["../src/ts/multi-instance-integration.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * Multi-Instance Modal Integration (TypeScript)\r\n * Integrates the tab system with existing modals (Terminal, TextEditor, Finder)\r\n * Wires up keyboard shortcuts and session management\r\n */\r\n\r\n(() => {\r\n    'use strict';\r\n\r\n    type Instance = { instanceId: string; show?: () => void; hide?: () => void };\r\n    type Manager = {\r\n        getAllInstances(): Instance[];\r\n        getActiveInstance(): Instance | null;\r\n        getAllInstanceIds?: () => string[];\r\n        getInstanceCount: () => number;\r\n        setActiveInstance(id: string): void;\r\n        createInstance(cfg?: { title?: string }): Instance | null;\r\n        destroyInstance(id: string): void;\r\n    };\r\n\r\n    type IntegrationRecord = {\r\n        manager: Manager;\r\n        tabManager: unknown;\r\n        modalId: string;\r\n        containerId: string;\r\n        unregisterShortcuts?: () => void;\r\n    };\r\n\r\n    class MultiInstanceIntegration {\r\n        private integrations: Map<string, IntegrationRecord> = new Map();\r\n        private isInitialized = false;\r\n\r\n        init() {\r\n            if (this.isInitialized) return;\r\n            if (document.readyState === 'loading') {\r\n                document.addEventListener('DOMContentLoaded', () => this.setup());\r\n            } else {\r\n                this.setup();\r\n            }\r\n        }\r\n\r\n        private setup() {\r\n            const W = window as unknown as Record<string, any>;\r\n            if (!W.InstanceManager || !W.WindowTabs || !W.KeyboardShortcuts) {\r\n                console.error('MultiInstanceIntegration: Required dependencies not loaded');\r\n                return;\r\n            }\r\n\r\n            if (W.TerminalInstanceManager) this.setupTerminalIntegration();\r\n            if (W.TextEditorInstanceManager) this.setupTextEditorIntegration();\r\n            if (W.FinderInstanceManager) this.setupFinderIntegration();\r\n\r\n            if (W.SessionManager) {\r\n                if (W.TerminalInstanceManager)\r\n                    W.SessionManager.registerManager('terminal', W.TerminalInstanceManager);\r\n                if (W.TextEditorInstanceManager)\r\n                    W.SessionManager.registerManager('text-editor', W.TextEditorInstanceManager);\r\n                if (W.FinderInstanceManager)\r\n                    W.SessionManager.registerManager('finder', W.FinderInstanceManager);\r\n\r\n                // Restore session if available\r\n                if (typeof W.SessionManager.restoreSession === 'function') {\r\n                    W.SessionManager.restoreSession();\r\n                }\r\n\r\n                // Ensure tabs/controllers reflect restored state and show active instance\r\n                this.integrations.forEach((integration, type) => {\r\n                    const { manager, tabManager } = integration;\r\n                    // Support both legacy adapter ({controller: {refresh}}) and new controller ({refresh})\r\n                    try {\r\n                        const maybe = tabManager as any;\r\n                        const refreshFn =\r\n                            typeof maybe?.refresh === 'function'\r\n                                ? maybe.refresh.bind(maybe)\r\n                                : typeof maybe?.controller?.refresh === 'function'\r\n                                  ? maybe.controller.refresh.bind(maybe.controller)\r\n                                  : null;\r\n                        if (refreshFn) refreshFn();\r\n                    } catch {}\r\n                    // Try to restore previously selected tab from a simple localStorage map (fallback)\r\n                    try {\r\n                        const raw = localStorage.getItem('windowActiveInstances');\r\n                        if (raw) {\r\n                            const map = JSON.parse(raw) as Record<string, string | null>;\r\n                            const wanted = map?.[type] || null;\r\n                            if (\r\n                                wanted &&\r\n                                typeof (manager as any).setActiveInstance === 'function'\r\n                            ) {\r\n                                // Only set if the instance exists to avoid creating new ones\r\n                                const exists = manager\r\n                                    .getAllInstances()\r\n                                    .some(i => i.instanceId === wanted);\r\n                                if (exists) (manager as any).setActiveInstance(wanted);\r\n                            }\r\n                        }\r\n                    } catch {}\r\n\r\n                    const active = manager.getActiveInstance();\r\n                    if (active) this.showInstance(type, active.instanceId);\r\n                });\r\n\r\n                W.SessionManager.init();\r\n            }\r\n\r\n            // Scope keyboard shortcuts by top window\r\n            if (\r\n                W.KeyboardShortcuts &&\r\n                typeof W.KeyboardShortcuts.setContextResolver === 'function'\r\n            ) {\r\n                W.KeyboardShortcuts.setContextResolver(() => {\r\n                    try {\r\n                        const wm = W.WindowManager;\r\n                        const top =\r\n                            wm && typeof wm.getTopWindow === 'function' ? wm.getTopWindow() : null;\r\n                        const topId = top?.id || '';\r\n                        let match = 'global';\r\n                        this.integrations.forEach((val, key) => {\r\n                            if (val && val.modalId === topId) match = key;\r\n                        });\r\n                        return match;\r\n                    } catch {\r\n                        return 'global';\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.isInitialized = true;\r\n        }\r\n\r\n        private setupTerminalIntegration() {\r\n            const W = window as unknown as Record<string, any>;\r\n            const manager = W.TerminalInstanceManager as Manager;\r\n            // Hook active switch to also update visibility\r\n            const origSetActive = manager.setActiveInstance.bind(manager);\r\n            manager.setActiveInstance = (id: string) => {\r\n                origSetActive(id);\r\n                this.showInstance('terminal', id);\r\n            };\r\n            // Hook destroy to ensure visibility and state stay consistent\r\n            const origDestroy = manager.destroyInstance.bind(manager);\r\n            manager.destroyInstance = (id: string) => {\r\n                origDestroy(id);\r\n                const remaining = manager.getAllInstances().length;\r\n                if (remaining > 0) {\r\n                    const active = manager.getActiveInstance();\r\n                    if (active) this.showInstance('terminal', active.instanceId);\r\n                }\r\n            };\r\n\r\n            const mount = document.getElementById('terminal-tabs-container');\r\n            if (!mount) return;\r\n            const controller = W.WindowTabs.create(manager, mount, {\r\n                addButton: true,\r\n                onCreateInstanceTitle: () =>\r\n                    `Terminal ${(manager.getInstanceCount?.() || manager.getAllInstances().length) + 1}`,\r\n            });\r\n\r\n            this.integrations.set('terminal', {\r\n                manager,\r\n                tabManager: controller,\r\n                modalId: 'terminal-modal',\r\n                containerId: 'terminal-container',\r\n            });\r\n\r\n            this.registerShortcutsForType('terminal', manager);\r\n            // Ensure the current active instance is visible in the UI\r\n            this.updateInstanceVisibility('terminal');\r\n            // Ensure visibility after future instance creations\r\n            this.setupInstanceListeners('terminal');\r\n        }\r\n\r\n        private setupTextEditorIntegration() {\r\n            const W = window as unknown as Record<string, any>;\r\n            const manager = W.TextEditorInstanceManager as Manager;\r\n            const origSetActive = manager.setActiveInstance.bind(manager);\r\n            manager.setActiveInstance = (id: string) => {\r\n                origSetActive(id);\r\n                this.showInstance('text-editor', id);\r\n            };\r\n            const origDestroy = manager.destroyInstance.bind(manager);\r\n            manager.destroyInstance = (id: string) => {\r\n                origDestroy(id);\r\n                const remaining = manager.getAllInstances().length;\r\n                if (remaining > 0) {\r\n                    const active = manager.getActiveInstance();\r\n                    if (active) this.showInstance('text-editor', active.instanceId);\r\n                }\r\n            };\r\n\r\n            const mount = document.getElementById('text-editor-tabs-container');\r\n            if (!mount) return;\r\n            const controller = W.WindowTabs.create(manager, mount, {\r\n                addButton: true,\r\n                onCreateInstanceTitle: () =>\r\n                    `Editor ${(manager.getInstanceCount?.() || manager.getAllInstances().length) + 1}`,\r\n            });\r\n\r\n            this.integrations.set('text-editor', {\r\n                manager,\r\n                tabManager: controller,\r\n                modalId: 'text-modal',\r\n                containerId: 'text-editor-container',\r\n            });\r\n\r\n            this.registerShortcutsForType('text-editor', manager);\r\n            this.updateInstanceVisibility('text-editor');\r\n            this.setupInstanceListeners('text-editor');\r\n        }\r\n\r\n        private setupFinderIntegration() {\r\n            const W = window as unknown as Record<string, any>;\r\n            const manager = W.FinderInstanceManager as Manager;\r\n            const origSetActive = manager.setActiveInstance.bind(manager);\r\n            manager.setActiveInstance = (id: string) => {\r\n                origSetActive(id);\r\n                this.showInstance('finder', id);\r\n            };\r\n            const origDestroy = manager.destroyInstance.bind(manager);\r\n            manager.destroyInstance = (id: string) => {\r\n                origDestroy(id);\r\n                const remaining = manager.getAllInstances().length;\r\n                if (remaining === 0) {\r\n                    try {\r\n                        const API = (window as any).API;\r\n                        if (API?.window?.close) API.window.close('finder-modal');\r\n                        else document.getElementById('finder-modal')?.classList.add('hidden');\r\n                    } catch {}\r\n                } else {\r\n                    const active = manager.getActiveInstance();\r\n                    if (active) this.showInstance('finder', active.instanceId);\r\n                }\r\n            };\r\n\r\n            const mount = document.getElementById('finder-tabs-container');\r\n            if (!mount) return;\r\n            const controller = W.WindowTabs.create(manager, mount, {\r\n                addButton: true,\r\n                onCreateInstanceTitle: () =>\r\n                    `Finder ${(manager.getInstanceCount?.() || manager.getAllInstances().length) + 1}`,\r\n            });\r\n\r\n            this.integrations.set('finder', {\r\n                manager,\r\n                tabManager: controller,\r\n                modalId: 'finder-modal',\r\n                containerId: 'finder-container',\r\n            });\r\n\r\n            this.registerShortcutsForType('finder', manager);\r\n            this.updateInstanceVisibility('finder');\r\n            this.setupInstanceListeners('finder');\r\n        }\r\n\r\n        private setupInstanceListeners(type: string) {\r\n            const integration = this.integrations.get(type);\r\n            if (!integration) return;\r\n            const { manager } = integration;\r\n\r\n            const originalCreate = manager.createInstance.bind(manager);\r\n            manager.createInstance = (config?: { title?: string }) => {\r\n                const instance = originalCreate(config);\r\n                // After create, prefer showing the active; otherwise show the created one\r\n                const active = manager.getActiveInstance();\r\n                if (active) {\r\n                    this.showInstance(type, active.instanceId);\r\n                } else if (instance) {\r\n                    this.showInstance(type, instance.instanceId);\r\n                }\r\n                return instance;\r\n            };\r\n        }\r\n\r\n        showInstance(type: string, instanceId: string) {\r\n            const integration = this.integrations.get(type);\r\n            if (!integration) return;\r\n            const instances = integration.manager.getAllInstances();\r\n            instances.forEach(inst => {\r\n                if (inst.instanceId === instanceId) inst.show?.();\r\n                else inst.hide?.();\r\n            });\r\n        }\r\n\r\n        updateInstanceVisibility(type: string) {\r\n            const integration = this.integrations.get(type);\r\n            if (!integration) return;\r\n            const active = integration.manager.getActiveInstance();\r\n            if (active) {\r\n                this.showInstance(type, active.instanceId);\r\n            } else {\r\n                const all = integration.manager.getAllInstances();\r\n                if (all.length > 0) {\r\n                    const firstId = all[0]?.instanceId;\r\n                    if (firstId) {\r\n                        // Ensure a consistent active selection\r\n                        integration.manager.setActiveInstance(firstId);\r\n                        this.showInstance(type, firstId);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private registerShortcutsForType(type: string, manager: Manager) {\r\n            const W = window as unknown as Record<string, any>;\r\n            const modalId = this.integrations.get(type)?.modalId;\r\n            const modalEl = modalId ? document.getElementById(modalId) : null;\r\n            if (!modalEl) {\r\n                console.error(`Cannot register shortcuts for ${type}: modal ${modalId} not found`);\r\n                return;\r\n            }\r\n            const unregister = W.KeyboardShortcuts.register(manager, {\r\n                scope: document,\r\n                newTitleFactory: () => `${type} ${manager.getInstanceCount() + 1}`,\r\n            });\r\n            const rec = this.integrations.get(type);\r\n            if (rec) rec.unregisterShortcuts = unregister;\r\n        }\r\n    }\r\n\r\n    // Create and expose singleton (retain both names for compatibility)\r\n    const integration = new MultiInstanceIntegration();\r\n    (window as any).MultiInstanceIntegration = integration;\r\n    (window as any).multiInstanceIntegration = integration;\r\n    integration.init();\r\n})();\r\n"]}