{"version":3,"file":"session-manager.js","sourceRoot":"","sources":["../src/ts/session-manager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * SessionManager - Debounced Auto-Save System for Window Instances\r\n *\r\n * Provides centralized, debounced persistence of window instance state to localStorage.\r\n * Handles storage quota limits gracefully and coordinates saves across multiple instances.\r\n */\r\n\r\nconsole.log('SessionManager loaded');\r\n\r\n(() => {\r\n    'use strict';\r\n\r\n    // ===== Types =====\r\n    type InstanceData = {\r\n        instanceId: string;\r\n        type: string;\r\n        title: string;\r\n        state: Record<string, unknown>;\r\n        metadata: Record<string, unknown>;\r\n    };\r\n\r\n    type SessionData = {\r\n        version: string;\r\n        timestamp: number;\r\n        instances: Record<string, InstanceData[]>; // Keyed by instance type (terminal, text-editor, etc.)\r\n        active?: Record<string, string | null>; // Keyed by type -> active instanceId\r\n        windowStack?: string[]; // Z-index order of windows (bottom to top)\r\n    };\r\n\r\n    type SaveOptions = {\r\n        immediate?: boolean; // Skip debounce and save immediately\r\n    };\r\n\r\n    // ===== Constants =====\r\n    const SESSION_STORAGE_KEY = 'windowInstancesSession';\r\n    const SESSION_VERSION = '1.0';\r\n    const DEFAULT_DEBOUNCE_MS = 750; // Conservative default\r\n    const MAX_STORAGE_SIZE = 5 * 1024 * 1024; // 5MB conservative limit (most browsers allow 5-10MB)\r\n\r\n    // ===== Module Variables =====\r\n    let saveTimer: number | null = null;\r\n    let debounceDelay = DEFAULT_DEBOUNCE_MS;\r\n    let pendingSaveTypes = new Set<string>(); // Track which instance types need saving\r\n    let quotaExceeded = false;\r\n    let saveInProgress = false;\r\n    let lastSaveAttempt = 0;\r\n\r\n    // ===== Storage Helpers =====\r\n\r\n    /**\r\n     * Estimate size of data in bytes (rough approximation)\r\n     */\r\n    function estimateSize(data: unknown): number {\r\n        try {\r\n            return JSON.stringify(data).length * 2; // Rough UTF-16 byte estimate\r\n        } catch {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if storage quota is available\r\n     */\r\n    function checkStorageQuota(dataSize: number): boolean {\r\n        if (quotaExceeded) {\r\n            return false;\r\n        }\r\n        return dataSize < MAX_STORAGE_SIZE;\r\n    }\r\n\r\n    /**\r\n     * Read session from localStorage\r\n     */\r\n    function readSession(): SessionData | null {\r\n        try {\r\n            const raw = localStorage.getItem(SESSION_STORAGE_KEY);\r\n            if (!raw) return null;\r\n\r\n            const parsed = JSON.parse(raw) as SessionData;\r\n            if (!parsed || typeof parsed !== 'object') return null;\r\n            if (parsed.version !== SESSION_VERSION) {\r\n                console.warn(\r\n                    `SessionManager: Version mismatch (stored: ${parsed.version}, expected: ${SESSION_VERSION})`\r\n                );\r\n                return null;\r\n            }\r\n\r\n            return parsed;\r\n        } catch (err) {\r\n            console.warn('SessionManager: Failed to read session:', err);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Write session to localStorage with quota handling\r\n     */\r\n    function writeSession(session: SessionData): boolean {\r\n        const size = estimateSize(session);\r\n\r\n        if (!checkStorageQuota(size)) {\r\n            if (!quotaExceeded) {\r\n                console.error('SessionManager: Storage quota exceeded. Auto-save disabled.');\r\n                console.error(\r\n                    `Attempted to save ${(size / 1024).toFixed(2)}KB, limit is ${(MAX_STORAGE_SIZE / 1024).toFixed(2)}KB`\r\n                );\r\n                quotaExceeded = true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(session));\r\n            quotaExceeded = false; // Reset flag on successful save\r\n            return true;\r\n        } catch (err) {\r\n            if (err instanceof Error && err.name === 'QuotaExceededError') {\r\n                console.error('SessionManager: Storage quota exceeded:', err);\r\n                quotaExceeded = true;\r\n            } else {\r\n                console.error('SessionManager: Failed to write session:', err);\r\n            }\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear session from localStorage\r\n     */\r\n    function clearSession(): void {\r\n        try {\r\n            localStorage.removeItem(SESSION_STORAGE_KEY);\r\n            console.log('SessionManager: Session cleared');\r\n        } catch (err) {\r\n            console.warn('SessionManager: Failed to clear session:', err);\r\n        }\r\n    }\r\n\r\n    // ===== Instance Manager Integration =====\r\n\r\n    /**\r\n     * Get all instance managers registered globally\r\n     */\r\n    function getInstanceManagers(): Map<string, unknown> {\r\n        const managers = new Map<string, unknown>();\r\n        const w = window as unknown as Record<string, unknown>;\r\n\r\n        // Known instance managers (terminal, text-editor, finder, etc.)\r\n        const knownManagers = [\r\n            'TerminalInstanceManager',\r\n            'TextEditorInstanceManager',\r\n            'FinderInstanceManager',\r\n        ];\r\n\r\n        knownManagers.forEach(key => {\r\n            const manager = w[key];\r\n            if (manager && typeof manager === 'object') {\r\n                const mgr = manager as Record<string, unknown>;\r\n                const type =\r\n                    typeof mgr.type === 'string'\r\n                        ? mgr.type\r\n                        : key.replace('InstanceManager', '').toLowerCase();\r\n                managers.set(type, manager);\r\n            }\r\n        });\r\n\r\n        return managers;\r\n    }\r\n\r\n    /**\r\n     * Serialize all instances from all managers\r\n     */\r\n    function serializeAllInstances(): {\r\n        instances: Record<string, InstanceData[]>;\r\n        active: Record<string, string | null>;\r\n    } {\r\n        const result: Record<string, InstanceData[]> = {};\r\n        const active: Record<string, string | null> = {};\r\n        const managers = getInstanceManagers();\r\n\r\n        managers.forEach((manager, type) => {\r\n            const mgr = manager as Record<string, unknown>;\r\n            if (typeof mgr.serializeAll === 'function') {\r\n                try {\r\n                    const instances = (\r\n                        mgr.serializeAll as unknown as (this: unknown) => unknown\r\n                    ).call(mgr);\r\n                    if (Array.isArray(instances)) {\r\n                        result[type] = instances as InstanceData[];\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\r\n                        `SessionManager: Failed to serialize instances for type \"${type}\":`,\r\n                        err\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Capture active instanceId per type if available\r\n            try {\r\n                if (typeof (mgr as any).getActiveInstance === 'function') {\r\n                    const activeInst = (mgr as any).getActiveInstance.call(mgr);\r\n                    active[type] = activeInst?.instanceId || null;\r\n                } else {\r\n                    active[type] = null;\r\n                }\r\n            } catch {\r\n                active[type] = null;\r\n            }\r\n        });\r\n\r\n        return { instances: result, active };\r\n    }\r\n\r\n    // ===== Core Save Logic =====\r\n\r\n    /**\r\n     * Perform the actual save operation\r\n     */\r\n    function performSave(): void {\r\n        if (saveInProgress) {\r\n            console.warn('SessionManager: Save already in progress, skipping');\r\n            return;\r\n        }\r\n\r\n        saveInProgress = true;\r\n\r\n        try {\r\n            const { instances, active } = serializeAllInstances();\r\n\r\n            // Capture current window z-index order from Dialog's __zIndexManager\r\n            const zIndexManager = (window as any).__zIndexManager;\r\n            const windowStack =\r\n                zIndexManager && typeof zIndexManager.getWindowStack === 'function'\r\n                    ? zIndexManager.getWindowStack()\r\n                    : [];\r\n\r\n            const session: SessionData = {\r\n                version: SESSION_VERSION,\r\n                timestamp: Date.now(),\r\n                instances,\r\n                active,\r\n                windowStack,\r\n            };\r\n\r\n            const success = writeSession(session);\r\n            if (success) {\r\n                const instanceCount = Object.values(instances).reduce(\r\n                    (sum, arr) => sum + arr.length,\r\n                    0\r\n                );\r\n                console.log(\r\n                    `SessionManager: Saved ${instanceCount} instances across ${Object.keys(instances).length} types`\r\n                );\r\n            }\r\n\r\n            pendingSaveTypes.clear();\r\n        } catch (err) {\r\n            console.error('SessionManager: Save failed:', err);\r\n        } finally {\r\n            saveInProgress = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Schedule a debounced save\r\n     */\r\n    function scheduleSave(instanceType?: string): void {\r\n        if (instanceType) {\r\n            pendingSaveTypes.add(instanceType);\r\n        }\r\n\r\n        if (saveTimer !== null) {\r\n            clearTimeout(saveTimer);\r\n        }\r\n\r\n        saveTimer = window.setTimeout(() => {\r\n            saveTimer = null;\r\n            performSave();\r\n        }, debounceDelay);\r\n    }\r\n\r\n    // ===== Public API =====\r\n\r\n    /**\r\n     * Save all instances immediately (skip debounce)\r\n     */\r\n    function saveAll(options: SaveOptions = {}): void {\r\n        if (options.immediate) {\r\n            if (saveTimer !== null) {\r\n                clearTimeout(saveTimer);\r\n                saveTimer = null;\r\n            }\r\n            performSave();\r\n        } else {\r\n            scheduleSave();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save instances of a specific type (debounced by default)\r\n     */\r\n    function saveInstanceType(instanceType: string, options: SaveOptions = {}): void {\r\n        if (options.immediate) {\r\n            if (saveTimer !== null) {\r\n                clearTimeout(saveTimer);\r\n                saveTimer = null;\r\n            }\r\n            performSave();\r\n        } else {\r\n            scheduleSave(instanceType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restore session from localStorage\r\n     */\r\n    function restoreSession(): boolean {\r\n        const session = readSession();\r\n        if (!session) {\r\n            console.log('SessionManager: No session to restore');\r\n            return false;\r\n        }\r\n\r\n        const managers = getInstanceManagers();\r\n        let restoredCount = 0;\r\n\r\n        const activeMap = (session as SessionData).active || {};\r\n\r\n        Object.entries(session.instances).forEach(([type, instances]) => {\r\n            const manager = managers.get(type);\r\n            if (!manager) {\r\n                console.warn(`SessionManager: No manager found for type \"${type}\"`);\r\n                return;\r\n            }\r\n\r\n            const mgr = manager as Record<string, unknown>;\r\n            if (typeof mgr.deserializeAll === 'function') {\r\n                try {\r\n                    (mgr.deserializeAll as (data: InstanceData[]) => void)(instances);\r\n                    restoredCount += instances.length;\r\n                    console.log(`SessionManager: Restored ${instances.length} \"${type}\" instances`);\r\n                    // Restore previously active instance for this type if present\r\n                    const activeId = activeMap[type] || null;\r\n                    if (activeId && typeof (mgr as any).setActiveInstance === 'function') {\r\n                        try {\r\n                            (mgr as any).setActiveInstance(activeId);\r\n                        } catch (e) {\r\n                            console.warn(\r\n                                `SessionManager: Failed to set active instance for ${type}:`,\r\n                                e\r\n                            );\r\n                        }\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\r\n                        `SessionManager: Failed to restore instances for type \"${type}\":`,\r\n                        err\r\n                    );\r\n                }\r\n            }\r\n        });\r\n\r\n        // Restore z-index order from saved windowStack\r\n        const windowStack = session.windowStack || [];\r\n        if (windowStack.length > 0) {\r\n            const zIndexManager = (window as any).__zIndexManager;\r\n            if (zIndexManager && typeof zIndexManager.restoreWindowStack === 'function') {\r\n                try {\r\n                    zIndexManager.restoreWindowStack(windowStack);\r\n                    console.log(\r\n                        `SessionManager: Restored z-index order for ${windowStack.length} windows`\r\n                    );\r\n                } catch (err) {\r\n                    console.warn('SessionManager: Failed to restore window z-index order:', err);\r\n                }\r\n            }\r\n        }\r\n\r\n        console.log(`SessionManager: Restored ${restoredCount} instances total`);\r\n        return restoredCount > 0;\r\n    }\r\n\r\n    /**\r\n     * Configure debounce delay\r\n     */\r\n    function setDebounceDelay(ms: number): void {\r\n        if (ms < 100 || ms > 5000) {\r\n            console.warn(`SessionManager: Invalid debounce delay ${ms}ms, must be 100-5000ms`);\r\n            return;\r\n        }\r\n        debounceDelay = ms;\r\n        console.log(`SessionManager: Debounce delay set to ${ms}ms`);\r\n    }\r\n\r\n    /**\r\n     * Get current debounce delay\r\n     */\r\n    function getDebounceDelay(): number {\r\n        return debounceDelay;\r\n    }\r\n\r\n    /**\r\n     * Clear all saved session data\r\n     */\r\n    function clear(): void {\r\n        if (saveTimer !== null) {\r\n            clearTimeout(saveTimer);\r\n            saveTimer = null;\r\n        }\r\n        pendingSaveTypes.clear();\r\n        clearSession();\r\n        quotaExceeded = false;\r\n    }\r\n\r\n    /**\r\n     * Get session statistics\r\n     */\r\n    function getStats() {\r\n        const session = readSession();\r\n        if (!session) {\r\n            return {\r\n                hasSession: false,\r\n                instanceCount: 0,\r\n                types: [],\r\n                timestamp: null,\r\n                sizeBytes: 0,\r\n            };\r\n        }\r\n\r\n        const instanceCount = Object.values(session.instances).reduce(\r\n            (sum, arr) => sum + arr.length,\r\n            0\r\n        );\r\n        const types = Object.keys(session.instances);\r\n        const sizeBytes = estimateSize(session);\r\n\r\n        return {\r\n            hasSession: true,\r\n            instanceCount,\r\n            types,\r\n            timestamp: session.timestamp,\r\n            sizeBytes,\r\n            quotaExceeded,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Export current session as JSON string\r\n     * @returns JSON string of current session or null if no session exists\r\n     */\r\n    function exportSession(): string | null {\r\n        // First save current state to ensure we export the latest\r\n        performSave();\r\n\r\n        const session = readSession();\r\n        if (!session) {\r\n            console.warn('SessionManager: No session to export');\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            // Pretty-print for human readability\r\n            const json = JSON.stringify(session, null, 2);\r\n            console.log(`SessionManager: Exported session (${(json.length / 1024).toFixed(2)}KB)`);\r\n            return json;\r\n        } catch (err) {\r\n            console.error('SessionManager: Failed to export session:', err);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Import session from JSON string\r\n     * @param json - JSON string containing session data\r\n     * @returns true if import successful, false otherwise\r\n     */\r\n    function importSession(json: string): boolean {\r\n        if (!json || typeof json !== 'string') {\r\n            console.error('SessionManager: Invalid import data (must be non-empty string)');\r\n            return false;\r\n        }\r\n\r\n        let session: SessionData;\r\n        try {\r\n            session = JSON.parse(json) as SessionData;\r\n        } catch (err) {\r\n            console.error('SessionManager: Failed to parse import JSON:', err);\r\n            return false;\r\n        }\r\n\r\n        // Validate schema\r\n        if (!session || typeof session !== 'object') {\r\n            console.error('SessionManager: Invalid session data (must be object)');\r\n            return false;\r\n        }\r\n\r\n        if (!session.version || typeof session.version !== 'string') {\r\n            console.error('SessionManager: Missing or invalid version field');\r\n            return false;\r\n        }\r\n\r\n        // Version compatibility check\r\n        if (session.version !== SESSION_VERSION) {\r\n            console.warn(\r\n                `SessionManager: Version mismatch (imported: ${session.version}, current: ${SESSION_VERSION})`\r\n            );\r\n            // For now, we're strict about versions. Future: implement migration logic\r\n            console.error('SessionManager: Cannot import session from different version');\r\n            return false;\r\n        }\r\n\r\n        if (!session.instances || typeof session.instances !== 'object') {\r\n            console.error('SessionManager: Missing or invalid instances field');\r\n            return false;\r\n        }\r\n\r\n        // Write to localStorage (will validate quota)\r\n        const success = writeSession(session);\r\n        if (!success) {\r\n            console.error('SessionManager: Failed to save imported session to storage');\r\n            return false;\r\n        }\r\n\r\n        // Restore the imported session\r\n        const restored = restoreSession();\r\n        if (!restored) {\r\n            console.warn('SessionManager: Imported session saved but restoration failed');\r\n            return false;\r\n        }\r\n\r\n        console.log('SessionManager: Successfully imported and restored session');\r\n        return true;\r\n    }\r\n\r\n    // ===== Lifecycle Hooks =====\r\n\r\n    /**\r\n     * Initialize auto-save system and browser lifecycle hooks\r\n     */\r\n    function init(): void {\r\n        console.log('SessionManager: Initializing auto-save system');\r\n\r\n        // Save on window blur (user switching away)\r\n        window.addEventListener('blur', () => {\r\n            saveAll({ immediate: true });\r\n        });\r\n\r\n        // Save on beforeunload (page closing/refreshing)\r\n        window.addEventListener('beforeunload', () => {\r\n            // Must be immediate to complete before page unload\r\n            performSave();\r\n        });\r\n\r\n        // Save on visibility change (tab hidden)\r\n        document.addEventListener('visibilitychange', () => {\r\n            if (document.hidden) {\r\n                saveAll({ immediate: true });\r\n            }\r\n        });\r\n\r\n        console.log(`SessionManager: Initialized with ${debounceDelay}ms debounce`);\r\n    }\r\n\r\n    // ===== Global API =====\r\n\r\n    /**\r\n     * Legacy no-op: Managers are auto-discovered\r\n     * @deprecated Use automatic discovery instead\r\n     */\r\n    function registerManager(_type: string, _manager: unknown): void {\r\n        // No-op: Auto-discovery handles this\r\n        console.log(`SessionManager: registerManager() is deprecated - using auto-discovery`);\r\n    }\r\n\r\n    /**\r\n     * Legacy no-op: Managers are auto-discovered\r\n     * @deprecated Use automatic discovery instead\r\n     */\r\n    function unregisterManager(_type: string): void {\r\n        // No-op: Auto-discovery handles this\r\n    }\r\n\r\n    const SessionManager = {\r\n        init,\r\n        saveAll,\r\n        saveAllSessions: saveAll, // Alias for backwards compatibility with tests\r\n        saveInstanceType,\r\n        restoreSession,\r\n        clear,\r\n        setDebounceDelay,\r\n        getDebounceDelay,\r\n        getStats,\r\n        exportSession,\r\n        importSession,\r\n        registerManager, // Legacy compatibility\r\n        unregisterManager, // Legacy compatibility\r\n    };\r\n\r\n    (window as unknown as { SessionManager: typeof SessionManager }).SessionManager =\r\n        SessionManager;\r\n})();\r\n"]}