{"version":3,"file":"session-manager.js","sourceRoot":"","sources":["../src/ts/session-manager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * SessionManager - Debounced Auto-Save System for Window Instances\n * \n * Provides centralized, debounced persistence of window instance state to localStorage.\n * Handles storage quota limits gracefully and coordinates saves across multiple instances.\n */\n\nconsole.log('SessionManager loaded');\n\n(() => {\n    'use strict';\n\n    // ===== Types =====\n    type InstanceData = {\n        instanceId: string;\n        type: string;\n        title: string;\n        state: Record<string, unknown>;\n        metadata: Record<string, unknown>;\n    };\n\n    type SessionData = {\n        version: string;\n        timestamp: number;\n        instances: Record<string, InstanceData[]>; // Keyed by instance type (terminal, text-editor, etc.)\n    };\n\n    type SaveOptions = {\n        immediate?: boolean; // Skip debounce and save immediately\n    };\n\n    // ===== Constants =====\n    const SESSION_STORAGE_KEY = 'windowInstancesSession';\n    const SESSION_VERSION = '1.0';\n    const DEFAULT_DEBOUNCE_MS = 750; // Conservative default\n    const MAX_STORAGE_SIZE = 5 * 1024 * 1024; // 5MB conservative limit (most browsers allow 5-10MB)\n\n    // ===== Module Variables =====\n    let saveTimer: number | null = null;\n    let debounceDelay = DEFAULT_DEBOUNCE_MS;\n    let pendingSaveTypes = new Set<string>(); // Track which instance types need saving\n    let quotaExceeded = false;\n    let saveInProgress = false;\n\n    // ===== Storage Helpers =====\n\n    /**\n     * Estimate size of data in bytes (rough approximation)\n     */\n    function estimateSize(data: unknown): number {\n        try {\n            return JSON.stringify(data).length * 2; // Rough UTF-16 byte estimate\n        } catch {\n            return 0;\n        }\n    }\n\n    /**\n     * Check if storage quota is available\n     */\n    function checkStorageQuota(dataSize: number): boolean {\n        if (quotaExceeded) {\n            return false;\n        }\n        return dataSize < MAX_STORAGE_SIZE;\n    }\n\n    /**\n     * Read session from localStorage\n     */\n    function readSession(): SessionData | null {\n        try {\n            const raw = localStorage.getItem(SESSION_STORAGE_KEY);\n            if (!raw) return null;\n\n            const parsed = JSON.parse(raw) as SessionData;\n            if (!parsed || typeof parsed !== 'object') return null;\n            if (parsed.version !== SESSION_VERSION) {\n                console.warn(`SessionManager: Version mismatch (stored: ${parsed.version}, expected: ${SESSION_VERSION})`);\n                return null;\n            }\n\n            return parsed;\n        } catch (err) {\n            console.warn('SessionManager: Failed to read session:', err);\n            return null;\n        }\n    }\n\n    /**\n     * Write session to localStorage with quota handling\n     */\n    function writeSession(session: SessionData): boolean {\n        const size = estimateSize(session);\n        \n        if (!checkStorageQuota(size)) {\n            if (!quotaExceeded) {\n                console.error('SessionManager: Storage quota exceeded. Auto-save disabled.');\n                console.error(`Attempted to save ${(size / 1024).toFixed(2)}KB, limit is ${(MAX_STORAGE_SIZE / 1024).toFixed(2)}KB`);\n                quotaExceeded = true;\n            }\n            return false;\n        }\n\n        try {\n            localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(session));\n            quotaExceeded = false; // Reset flag on successful save\n            return true;\n        } catch (err) {\n            if (err instanceof Error && err.name === 'QuotaExceededError') {\n                console.error('SessionManager: Storage quota exceeded:', err);\n                quotaExceeded = true;\n            } else {\n                console.error('SessionManager: Failed to write session:', err);\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Clear session from localStorage\n     */\n    function clearSession(): void {\n        try {\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            console.log('SessionManager: Session cleared');\n        } catch (err) {\n            console.warn('SessionManager: Failed to clear session:', err);\n        }\n    }\n\n    // ===== Instance Manager Integration =====\n\n    /**\n     * Get all instance managers registered globally\n     */\n    function getInstanceManagers(): Map<string, unknown> {\n        const managers = new Map<string, unknown>();\n        const w = window as unknown as Record<string, unknown>;\n\n        // Known instance managers (terminal, text-editor, etc.)\n        const knownManagers = [\n            'TerminalInstanceManager',\n            'TextEditorInstanceManager',\n        ];\n\n        knownManagers.forEach(key => {\n            const manager = w[key];\n            if (manager && typeof manager === 'object') {\n                const mgr = manager as Record<string, unknown>;\n                const type = typeof mgr.type === 'string' ? mgr.type : key.replace('InstanceManager', '').toLowerCase();\n                managers.set(type, manager);\n            }\n        });\n\n        return managers;\n    }\n\n    /**\n     * Serialize all instances from all managers\n     */\n    function serializeAllInstances(): Record<string, InstanceData[]> {\n        const result: Record<string, InstanceData[]> = {};\n        const managers = getInstanceManagers();\n\n        managers.forEach((manager, type) => {\n            const mgr = manager as Record<string, unknown>;\n            if (typeof mgr.serializeAll === 'function') {\n                try {\n                    const instances = (mgr.serializeAll as () => unknown)();\n                    if (Array.isArray(instances)) {\n                        result[type] = instances as InstanceData[];\n                    }\n                } catch (err) {\n                    console.error(`SessionManager: Failed to serialize instances for type \"${type}\":`, err);\n                }\n            }\n        });\n\n        return result;\n    }\n\n    // ===== Core Save Logic =====\n\n    /**\n     * Perform the actual save operation\n     */\n    function performSave(): void {\n        if (saveInProgress) {\n            console.warn('SessionManager: Save already in progress, skipping');\n            return;\n        }\n\n        saveInProgress = true;\n        lastSaveAttempt = Date.now();\n\n        try {\n            const instances = serializeAllInstances();\n            const session: SessionData = {\n                version: SESSION_VERSION,\n                timestamp: Date.now(),\n                instances,\n            };\n\n            const success = writeSession(session);\n            if (success) {\n                const instanceCount = Object.values(instances).reduce((sum, arr) => sum + arr.length, 0);\n                console.log(`SessionManager: Saved ${instanceCount} instances across ${Object.keys(instances).length} types`);\n            }\n\n            pendingSaveTypes.clear();\n        } catch (err) {\n            console.error('SessionManager: Save failed:', err);\n        } finally {\n            saveInProgress = false;\n        }\n    }\n\n    /**\n     * Schedule a debounced save\n     */\n    function scheduleSave(instanceType?: string): void {\n        if (instanceType) {\n            pendingSaveTypes.add(instanceType);\n        }\n\n        if (saveTimer !== null) {\n            clearTimeout(saveTimer);\n        }\n\n        saveTimer = window.setTimeout(() => {\n            saveTimer = null;\n            performSave();\n        }, debounceDelay);\n    }\n\n    // ===== Public API =====\n\n    /**\n     * Save all instances immediately (skip debounce)\n     */\n    function saveAll(options: SaveOptions = {}): void {\n        if (options.immediate) {\n            if (saveTimer !== null) {\n                clearTimeout(saveTimer);\n                saveTimer = null;\n            }\n            performSave();\n        } else {\n            scheduleSave();\n        }\n    }\n\n    /**\n     * Save instances of a specific type (debounced by default)\n     */\n    function saveInstanceType(instanceType: string, options: SaveOptions = {}): void {\n        if (options.immediate) {\n            if (saveTimer !== null) {\n                clearTimeout(saveTimer);\n                saveTimer = null;\n            }\n            performSave();\n        } else {\n            scheduleSave(instanceType);\n        }\n    }\n\n    /**\n     * Restore session from localStorage\n     */\n    function restoreSession(): boolean {\n        const session = readSession();\n        if (!session) {\n            console.log('SessionManager: No session to restore');\n            return false;\n        }\n\n        const managers = getInstanceManagers();\n        let restoredCount = 0;\n\n        Object.entries(session.instances).forEach(([type, instances]) => {\n            const manager = managers.get(type);\n            if (!manager) {\n                console.warn(`SessionManager: No manager found for type \"${type}\"`);\n                return;\n            }\n\n            const mgr = manager as Record<string, unknown>;\n            if (typeof mgr.deserializeAll === 'function') {\n                try {\n                    (mgr.deserializeAll as (data: InstanceData[]) => void)(instances);\n                    restoredCount += instances.length;\n                    console.log(`SessionManager: Restored ${instances.length} \"${type}\" instances`);\n                } catch (err) {\n                    console.error(`SessionManager: Failed to restore instances for type \"${type}\":`, err);\n                }\n            }\n        });\n\n        console.log(`SessionManager: Restored ${restoredCount} instances total`);\n        return restoredCount > 0;\n    }\n\n    /**\n     * Configure debounce delay\n     */\n    function setDebounceDelay(ms: number): void {\n        if (ms < 100 || ms > 5000) {\n            console.warn(`SessionManager: Invalid debounce delay ${ms}ms, must be 100-5000ms`);\n            return;\n        }\n        debounceDelay = ms;\n        console.log(`SessionManager: Debounce delay set to ${ms}ms`);\n    }\n\n    /**\n     * Get current debounce delay\n     */\n    function getDebounceDelay(): number {\n        return debounceDelay;\n    }\n\n    /**\n     * Clear all saved session data\n     */\n    function clear(): void {\n        if (saveTimer !== null) {\n            clearTimeout(saveTimer);\n            saveTimer = null;\n        }\n        pendingSaveTypes.clear();\n        clearSession();\n        quotaExceeded = false;\n    }\n\n    /**\n     * Get session statistics\n     */\n    function getStats() {\n        const session = readSession();\n        if (!session) {\n            return {\n                hasSession: false,\n                instanceCount: 0,\n                types: [],\n                timestamp: null,\n                sizeBytes: 0,\n            };\n        }\n\n        const instanceCount = Object.values(session.instances).reduce((sum, arr) => sum + arr.length, 0);\n        const types = Object.keys(session.instances);\n        const sizeBytes = estimateSize(session);\n\n        return {\n            hasSession: true,\n            instanceCount,\n            types,\n            timestamp: session.timestamp,\n            sizeBytes,\n            quotaExceeded,\n        };\n    }\n\n    // ===== Lifecycle Hooks =====\n\n    /**\n     * Initialize auto-save system and browser lifecycle hooks\n     */\n    function init(): void {\n        console.log('SessionManager: Initializing auto-save system');\n\n        // Save on window blur (user switching away)\n        window.addEventListener('blur', () => {\n            saveAll({ immediate: true });\n        });\n\n        // Save on beforeunload (page closing/refreshing)\n        window.addEventListener('beforeunload', () => {\n            // Must be immediate to complete before page unload\n            performSave();\n        });\n\n        // Save on visibility change (tab hidden)\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                saveAll({ immediate: true });\n            }\n        });\n\n        console.log(`SessionManager: Initialized with ${debounceDelay}ms debounce`);\n    }\n\n    // ===== Global API =====\n\n    const SessionManager = {\n        init,\n        saveAll,\n        saveInstanceType,\n        restoreSession,\n        clear,\n        setDebounceDelay,\n        getDebounceDelay,\n        getStats,\n    };\n\n    (window as unknown as { SessionManager: typeof SessionManager }).SessionManager = SessionManager;\n})();\n"]}