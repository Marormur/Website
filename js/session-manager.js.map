{"version":3,"file":"session-manager.js","sourceRoot":"","sources":["../src/ts/session-manager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * src/ts/session-manager.ts — Session Management with Debounced Auto-Save\n * Centralized persistence for multi-instance window state\n */\n\n(() => {\n    'use strict';\n\n    console.log('✅ SessionManager (TS) loaded');\n\n    // ===== Types =====\n    type InstanceData = {\n        instanceId: string;\n        type: string;\n        title: string;\n        state: Record<string, unknown>;\n        metadata: Record<string, unknown>;\n    };\n\n    type SessionData = {\n        instances: InstanceData[];\n        timestamp: number;\n        version: string;\n    };\n\n    type SaveOptions = {\n        debounce?: boolean;\n        immediate?: boolean;\n    };\n\n    // ===== Constants =====\n    const SESSION_STORAGE_KEY = 'session:instances';\n    const SESSION_VERSION = '1.0.0';\n    const DEFAULT_DEBOUNCE_MS = 500;\n    const MAX_STORAGE_SIZE_BYTES = 5 * 1024 * 1024; // 5MB soft limit\n\n    // ===== Module State =====\n    let saveTimer: number | null = null;\n    let debounceDelay = DEFAULT_DEBOUNCE_MS;\n    let isEnabled = true;\n\n    // ===== Helper Functions =====\n\n    /**\n     * Debounce wrapper for function calls\n     */\n    function debounce(fn: () => void, delay: number): void {\n        if (saveTimer !== null) {\n            clearTimeout(saveTimer);\n        }\n        saveTimer = window.setTimeout(() => {\n            saveTimer = null;\n            fn();\n        }, delay);\n    }\n\n    /**\n     * Get all instance managers from window\n     */\n    function getAllInstanceManagers(): Array<{\n        type: string;\n        manager: {\n            serializeAll: () => Record<string, unknown>[];\n        };\n    }> {\n        const w = window as unknown as Record<string, unknown>;\n        const managers: Array<{\n            type: string;\n            manager: { serializeAll: () => Record<string, unknown>[] };\n        }> = [];\n\n        // Terminal instances\n        const terminalMgr = w['TerminalInstanceManager'] as\n            | { serializeAll?: () => Record<string, unknown>[] }\n            | undefined;\n        if (terminalMgr && typeof terminalMgr.serializeAll === 'function') {\n            managers.push({ type: 'terminal', manager: terminalMgr as never });\n        }\n\n        // Text editor instances\n        const editorMgr = w['TextEditorInstanceManager'] as\n            | { serializeAll?: () => Record<string, unknown>[] }\n            | undefined;\n        if (editorMgr && typeof editorMgr.serializeAll === 'function') {\n            managers.push({ type: 'text-editor', manager: editorMgr as never });\n        }\n\n        return managers;\n    }\n\n    /**\n     * Estimate storage size of serialized data\n     */\n    function estimateSize(data: SessionData): number {\n        try {\n            return JSON.stringify(data).length * 2; // UTF-16 chars = 2 bytes each\n        } catch {\n            return 0;\n        }\n    }\n\n    // ===== Core Functions =====\n\n    /**\n     * Save all instance state to localStorage\n     */\n    function saveAllInstances(): void {\n        if (!isEnabled) {\n            console.log('[SessionManager] Auto-save disabled, skipping save');\n            return;\n        }\n\n        try {\n            const managers = getAllInstanceManagers();\n            const allInstances: InstanceData[] = [];\n\n            managers.forEach(({ manager }) => {\n                const serialized = manager.serializeAll();\n                serialized.forEach(data => {\n                    allInstances.push(data as InstanceData);\n                });\n            });\n\n            const sessionData: SessionData = {\n                instances: allInstances,\n                timestamp: Date.now(),\n                version: SESSION_VERSION,\n            };\n\n            // Check estimated size\n            const estimatedSize = estimateSize(sessionData);\n            if (estimatedSize > MAX_STORAGE_SIZE_BYTES) {\n                console.warn(\n                    `[SessionManager] Session data size (${Math.round(estimatedSize / 1024)}KB) exceeds soft limit. Some data may be truncated.`\n                );\n            }\n\n            localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n            console.log(\n                `[SessionManager] Saved ${allInstances.length} instances (${Math.round(estimatedSize / 1024)}KB)`\n            );\n        } catch (error) {\n            if (\n                error instanceof Error &&\n                (error.name === 'QuotaExceededError' ||\n                    error.message.includes('quota') ||\n                    error.message.includes('storage'))\n            ) {\n                console.warn(\n                    '[SessionManager] Storage quota exceeded. Unable to save session state.',\n                    error\n                );\n            } else {\n                console.warn('[SessionManager] Failed to save session state:', error);\n            }\n        }\n    }\n\n    /**\n     * Save with debouncing (default behavior)\n     */\n    function saveAll(options: SaveOptions = {}): void {\n        const { debounce: shouldDebounce = true, immediate = false } = options;\n\n        if (immediate || !shouldDebounce) {\n            // Cancel any pending save\n            if (saveTimer !== null) {\n                clearTimeout(saveTimer);\n                saveTimer = null;\n            }\n            saveAllInstances();\n        } else {\n            debounce(saveAllInstances, debounceDelay);\n        }\n    }\n\n    /**\n     * Load session data from localStorage\n     */\n    function loadSession(): SessionData | null {\n        try {\n            const raw = localStorage.getItem(SESSION_STORAGE_KEY);\n            if (!raw) return null;\n\n            const parsed = JSON.parse(raw) as SessionData;\n            if (!parsed || typeof parsed !== 'object') return null;\n            if (!Array.isArray(parsed.instances)) return null;\n\n            console.log(`[SessionManager] Loaded session with ${parsed.instances.length} instances`);\n            return parsed;\n        } catch (error) {\n            console.warn('[SessionManager] Failed to load session:', error);\n            return null;\n        }\n    }\n\n    /**\n     * Clear all session data\n     */\n    function clearSession(): void {\n        try {\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            console.log('[SessionManager] Session cleared');\n        } catch (error) {\n            console.warn('[SessionManager] Failed to clear session:', error);\n        }\n    }\n\n    /**\n     * Configure debounce delay\n     */\n    function setDebounceDelay(ms: number): void {\n        if (ms > 0 && ms < 60000) {\n            debounceDelay = ms;\n            console.log(`[SessionManager] Debounce delay set to ${ms}ms`);\n        } else {\n            console.warn(\n                `[SessionManager] Invalid debounce delay: ${ms}. Must be between 1-60000ms`\n            );\n        }\n    }\n\n    /**\n     * Enable or disable auto-save\n     */\n    function setEnabled(enabled: boolean): void {\n        isEnabled = enabled;\n        console.log(`[SessionManager] Auto-save ${enabled ? 'enabled' : 'disabled'}`);\n    }\n\n    /**\n     * Get current configuration\n     */\n    function getConfig(): {\n        enabled: boolean;\n        debounceDelay: number;\n        storageKey: string;\n        version: string;\n    } {\n        return {\n            enabled: isEnabled,\n            debounceDelay,\n            storageKey: SESSION_STORAGE_KEY,\n            version: SESSION_VERSION,\n        };\n    }\n\n    // ===== Auto-save Integration =====\n\n    /**\n     * Initialize auto-save hooks\n     */\n    function init(): void {\n        // Save on window blur\n        window.addEventListener('blur', () => {\n            console.log('[SessionManager] Window blur - saving immediately');\n            saveAll({ immediate: true });\n        });\n\n        // Save on beforeunload\n        window.addEventListener('beforeunload', () => {\n            console.log('[SessionManager] Before unload - saving immediately');\n            saveAll({ immediate: true });\n        });\n\n        console.log('[SessionManager] Auto-save hooks initialized');\n    }\n\n    // ===== Public API =====\n\n    const SessionManagerAPI = {\n        // Core functions\n        saveAll,\n        loadSession,\n        clearSession,\n\n        // Configuration\n        setDebounceDelay,\n        setEnabled,\n        getConfig,\n\n        // Initialization\n        init,\n\n        // Constants (for testing)\n        _STORAGE_KEY: SESSION_STORAGE_KEY,\n        _VERSION: SESSION_VERSION,\n    };\n\n    // Export to window\n    const w = window as unknown as Record<string, unknown>;\n    w['SessionManager'] = SessionManagerAPI;\n\n    // Auto-initialize on load\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', init);\n    } else {\n        init();\n    }\n})();\n"]}