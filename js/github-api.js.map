{"version":3,"file":"github-api.js","sourceRoot":"","sources":["../src/ts/github-api.ts"],"names":[],"mappings":"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","sourcesContent":["(function () {\n    'use strict';\n\n    const GITHUB_CACHE_NS = 'finderGithubCacheV1:';\n\n    function getCacheTtl(): number {\n        const dflt = 5 * 60 * 1000; // 5 minutes\n        try {\n            const constants =\n                (window as unknown as { APP_CONSTANTS?: Record<string, unknown> }).APP_CONSTANTS ||\n                {};\n            const val = (constants as Record<string, unknown>)['GITHUB_CACHE_DURATION'];\n            return typeof val === 'number' ? (val as number) : dflt;\n        } catch {\n            return dflt;\n        }\n    }\n\n    function makeCacheKey(kind: 'repos' | 'contents', repo = '', subPath = ''): string {\n        if (kind === 'repos') return GITHUB_CACHE_NS + 'repos';\n        return `${GITHUB_CACHE_NS}contents:${repo}:${subPath}`;\n    }\n\n    function writeCache(\n        kind: 'repos' | 'contents',\n        repo: string,\n        subPath: string,\n        data: unknown\n    ): void {\n        const key = makeCacheKey(kind, repo, subPath);\n        try {\n            const payload = { t: Date.now(), d: data };\n            localStorage.setItem(key, JSON.stringify(payload));\n        } catch {\n            /* ignore */\n        }\n    }\n\n    function readCache<T = unknown>(kind: 'repos' | 'contents', repo = '', subPath = ''): T | null {\n        const key = makeCacheKey(kind, repo, subPath);\n        try {\n            const raw = localStorage.getItem(key);\n            if (!raw) return null;\n            const parsed = JSON.parse(raw);\n            if (!parsed || typeof parsed !== 'object') return null;\n            const ttl = getCacheTtl();\n            if (typeof parsed.t !== 'number' || Date.now() - parsed.t > ttl) return null;\n            return (parsed.d as T) ?? null;\n        } catch {\n            return null;\n        }\n    }\n\n    function getHeaders(): Record<string, string> {\n        const headers: Record<string, string> = { Accept: 'application/vnd.github.v3+json' };\n        try {\n            const token = localStorage.getItem('githubToken');\n            if (token && token.trim()) {\n                headers['Authorization'] = `token ${token.trim()}`;\n            }\n        } catch {\n            /* ignore */\n        }\n        return headers;\n    }\n\n    async function fetchJSON<T = unknown>(url: string): Promise<T> {\n        const res = await fetch(url, { headers: getHeaders() });\n        if (!res.ok) {\n            throw Object.assign(new Error(`GitHub API error: ${res.status}`), {\n                status: res.status,\n            });\n        }\n        return res.json() as Promise<T>;\n    }\n\n    async function fetchUserRepos(\n        username: string,\n        params?: { per_page?: number; sort?: string }\n    ): Promise<unknown[]> {\n        const search = new globalThis.URLSearchParams();\n        search.set('per_page', String(params?.per_page ?? 100));\n        search.set('sort', params?.sort ?? 'updated');\n        const url = `https://api.github.com/users/${encodeURIComponent(username)}/repos?${search.toString()}`;\n        return fetchJSON<unknown[]>(url);\n    }\n\n    async function fetchRepoContents(\n        username: string,\n        repo: string,\n        subPath = ''\n    ): Promise<unknown> {\n        const pathPart = subPath ? `/${encodeURIComponent(subPath).replace(/%2F/g, '/')}` : '';\n        const url = `https://api.github.com/repos/${encodeURIComponent(username)}/${encodeURIComponent(repo)}/contents${pathPart}`;\n        return fetchJSON<unknown>(url);\n    }\n\n    type GitHubAPINamespace = {\n        getHeaders: () => Record<string, string>;\n        readCache: <T = unknown>(\n            kind: 'repos' | 'contents',\n            repo?: string,\n            subPath?: string\n        ) => T | null;\n        writeCache: (\n            kind: 'repos' | 'contents',\n            repo: string,\n            subPath: string,\n            data: unknown\n        ) => void;\n        fetchJSON: <T = unknown>(url: string) => Promise<T>;\n        fetchUserRepos: (\n            username: string,\n            params?: { per_page?: number; sort?: string }\n        ) => Promise<unknown[]>;\n        fetchRepoContents: (username: string, repo: string, subPath?: string) => Promise<unknown>;\n    };\n\n    (window as unknown as { GitHubAPI: GitHubAPINamespace }).GitHubAPI = {\n        getHeaders,\n        readCache,\n        writeCache,\n        fetchJSON,\n        fetchUserRepos,\n        fetchRepoContents,\n    };\n})();\n"]}