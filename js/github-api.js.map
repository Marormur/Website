{"version":3,"file":"github-api.js","sourceRoot":"","sources":["../src/ts/github-api.ts"],"names":[],"mappings":"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","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    const GITHUB_CACHE_NS = 'finderGithubCacheV1:';\r\n\r\n    function getCacheTtl(): number {\r\n        const dflt = 5 * 60 * 1000; // 5 minutes\r\n        try {\r\n            const constants = (window as unknown as { APP_CONSTANTS?: Record<string, unknown> }).APP_CONSTANTS || {};\r\n            const val = (constants as Record<string, unknown>)[\r\n                'GITHUB_CACHE_DURATION'\r\n            ];\r\n            return typeof val === 'number' ? (val as number) : dflt;\r\n        } catch {\r\n            return dflt;\r\n        }\r\n    }\r\n\r\n    function makeCacheKey(kind: 'repos' | 'contents', repo = '', subPath = ''): string {\r\n        if (kind === 'repos') return GITHUB_CACHE_NS + 'repos';\r\n        return `${GITHUB_CACHE_NS}contents:${repo}:${subPath}`;\r\n    }\r\n\r\n    function writeCache(kind: 'repos' | 'contents', repo: string, subPath: string, data: unknown): void {\r\n        const key = makeCacheKey(kind, repo, subPath);\r\n        try {\r\n            const payload = { t: Date.now(), d: data };\r\n            localStorage.setItem(key, JSON.stringify(payload));\r\n        } catch {\r\n            /* ignore */\r\n        }\r\n    }\r\n\r\n    function readCache<T = unknown>(kind: 'repos' | 'contents', repo = '', subPath = ''): T | null {\r\n        const key = makeCacheKey(kind, repo, subPath);\r\n        try {\r\n            const raw = localStorage.getItem(key);\r\n            if (!raw) return null;\r\n            const parsed = JSON.parse(raw);\r\n            if (!parsed || typeof parsed !== 'object') return null;\r\n            const ttl = getCacheTtl();\r\n            if (typeof parsed.t !== 'number' || Date.now() - parsed.t > ttl) return null;\r\n            return (parsed.d as T) ?? null;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getHeaders(): Record<string, string> {\r\n        const headers: Record<string, string> = { Accept: 'application/vnd.github.v3+json' };\r\n        try {\r\n            const token = localStorage.getItem('githubToken');\r\n            if (token && token.trim()) {\r\n                headers['Authorization'] = `token ${token.trim()}`;\r\n            }\r\n        } catch {\r\n            /* ignore */\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    async function fetchJSON<T = unknown>(url: string): Promise<T> {\r\n        const res = await fetch(url, { headers: getHeaders() });\r\n        if (!res.ok) {\r\n            throw Object.assign(new Error(`GitHub API error: ${res.status}`), {\r\n                status: res.status,\r\n            });\r\n        }\r\n        return res.json() as Promise<T>;\r\n    }\r\n\r\n    async function fetchUserRepos(username: string, params?: { per_page?: number; sort?: string }): Promise<unknown[]> {\r\n        const search = new URLSearchParams();\r\n        search.set('per_page', String(params?.per_page ?? 100));\r\n        search.set('sort', params?.sort ?? 'updated');\r\n        const url = `https://api.github.com/users/${encodeURIComponent(username)}/repos?${search.toString()}`;\r\n        return fetchJSON<unknown[]>(url);\r\n    }\r\n\r\n    async function fetchRepoContents(username: string, repo: string, subPath = ''): Promise<unknown> {\r\n        const pathPart = subPath ? `/${encodeURIComponent(subPath).replace(/%2F/g, '/')}` : '';\r\n        const url = `https://api.github.com/repos/${encodeURIComponent(username)}/${encodeURIComponent(repo)}/contents${pathPart}`;\r\n        return fetchJSON<unknown>(url);\r\n    }\r\n\r\n    type GitHubAPINamespace = {\r\n        getHeaders: () => Record<string, string>;\r\n        readCache: <T = unknown>(kind: 'repos' | 'contents', repo?: string, subPath?: string) => T | null;\r\n        writeCache: (kind: 'repos' | 'contents', repo: string, subPath: string, data: unknown) => void;\r\n        fetchJSON: <T = unknown>(url: string) => Promise<T>;\r\n        fetchUserRepos: (username: string, params?: { per_page?: number; sort?: string }) => Promise<unknown[]>;\r\n        fetchRepoContents: (username: string, repo: string, subPath?: string) => Promise<unknown>;\r\n    };\r\n\r\n    (window as unknown as { GitHubAPI: GitHubAPINamespace }).GitHubAPI = {\r\n        getHeaders,\r\n        readCache,\r\n        writeCache,\r\n        fetchJSON,\r\n        fetchUserRepos,\r\n        fetchRepoContents,\r\n    };\r\n})();\r\n"]}