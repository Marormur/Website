{"version":3,"file":"instance-manager.js","sourceRoot":"","sources":["../src/ts/instance-manager.ts"],"names":[],"mappings":";AAAA,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AAEtC,CAAC;IACC,YAAY,CAAC;IA6Bb,MAAM,eAAe;QASnB,YAAY,MAAqB;YAC/B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACxB,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;YAC1C,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,IAAI,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEzF,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QAC3B,CAAC;QAED,cAAc,CAAC,SAA+B,EAAE;YAC9C,IAAI,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;gBACtE,OAAO,CAAC,IAAI,CAAC,sBAAsB,IAAI,CAAC,YAAY,iBAAiB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;gBAClF,OAAO,IAAI,CAAC;YACd,CAAC;YAED,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,MAAM,UAAU,GAAG,MAAM,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;YAEvE,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YACnD,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,yCAAyC,CAAC,CAAC;gBACzD,OAAO,IAAI,CAAC;YACd,CAAC;YAED,MAAM,cAAc,GAAG;gBACrB,EAAE,EAAE,UAAU;gBACd,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,eAAe,EAAE;gBAC7D,YAAY,EAAE,MAAM,CAAC,YAAY,IAAI,EAAE;gBACvC,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,EAAE;aAChC,CAAC;YAEF,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;YAExD,IAAI,CAAC;gBACH,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBACzB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;gBACzC,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC;gBAEnC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;gBAEpC,4CAA4C;gBAC5C,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAExB,OAAO,CAAC,GAAG,CAAC,qBAAqB,UAAU,EAAE,CAAC,CAAC;gBAC/C,OAAO,QAAQ,CAAC;YAClB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;gBACvD,SAAS,CAAC,MAAM,EAAE,CAAC;gBACnB,OAAO,IAAI,CAAC;YACd,CAAC;QACH,CAAC;QAED,WAAW,CAAC,UAAkB;YAC5B,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC;QAChD,CAAC;QAED,iBAAiB;YACf,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;QAC1F,CAAC;QAED,iBAAiB,CAAC,UAAkB;YAClC,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;gBACnC,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAEzC,2CAA2C;gBAC3C,IAAI,UAAU,KAAK,UAAU,EAAE,CAAC;oBAC9B,OAAO;gBACT,CAAC;gBAED,IAAI,CAAC,gBAAgB,GAAG,UAAU,CAAC;gBAEnC,yBAAyB;gBACzB,IAAI,UAAU,EAAE,CAAC;oBACf,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;oBACxD,IAAI,gBAAgB,EAAE,CAAC;wBACrB,gBAAgB,CAAC,IAAI,EAAE,CAAC;oBAC1B,CAAC;gBACH,CAAC;gBAED,qBAAqB;gBACrB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBAChD,IAAI,QAAQ,EAAE,CAAC;oBACb,QAAQ,CAAC,KAAK,EAAE,CAAC;gBACnB,CAAC;YACH,CAAC;QACH,CAAC;QAED,eAAe;YACb,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC;QAC7C,CAAC;QAED,iBAAiB;YACf,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3C,CAAC;QAED,eAAe,CAAC,UAAkB;YAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAChD,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACd,OAAO,CAAC,IAAI,CAAC,YAAY,UAAU,YAAY,CAAC,CAAC;gBACjD,OAAO;YACT,CAAC;YAED,QAAQ,CAAC,OAAO,EAAE,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YAElC,mCAAmC;YACnC,IAAI,IAAI,CAAC,gBAAgB,KAAK,UAAU,EAAE,CAAC;gBACzC,MAAM,YAAY,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC9C,+DAA+D;gBAC/D,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC3F,IAAI,CAAC,gBAAgB,GAAG,MAAM,IAAI,IAAI,CAAC;YACzC,CAAC;YAED,+CAA+C;YAC/C,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAExB,OAAO,CAAC,GAAG,CAAC,uBAAuB,UAAU,EAAE,CAAC,CAAC;QACnD,CAAC;QAED,mBAAmB;YACjB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACrB,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAE7B,mDAAmD;YACnD,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;QAED,YAAY;YACV,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC;QACjC,CAAC;QAED,gBAAgB;YACd,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;QAC7B,CAAC;QAED,YAAY;YACV,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,CAAC;QACxE,CAAC;QAED,cAAc,CAAC,IAAa;YAC1B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;gBAAE,OAAO;YAEjC,IAAI,CAAC,OAAO,CAAC,CAAC,YAAqC,EAAE,EAAE;gBACrD,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC;oBACnC,EAAE,EAAE,YAAY,CAAC,UAAgC;oBACjD,KAAK,EAAE,YAAY,CAAC,KAA2B;oBAC/C,QAAQ,EAAE,YAAY,CAAC,QAA+C;iBACvE,CAAC,CAAC;gBAEH,IAAI,QAAQ,IAAI,YAAY,CAAC,KAAK,EAAE,CAAC;oBACnC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;gBACrC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED;;;WAGG;QACH,gBAAgB,CAAC,QAAkB;YACjC,8BAA8B;YAC9B,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/D,IAAI,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBAC5C,OAAO,CAAC,IAAI,CAAC,yEAAyE,CAAC,CAAC;gBACxF,OAAO;YACT,CAAC;YAED,0CAA0C;YAC1C,MAAM,MAAM,GAAG,IAAI,GAAG,EAA4B,CAAC;YACnD,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBACxC,IAAI,QAAQ,EAAE,CAAC;oBACb,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAC3B,CAAC;YACH,CAAC,CAAC,CAAC;YAEH,4BAA4B;YAC5B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;QAChD,CAAC;QAEO,gBAAgB;YACtB,MAAM,CAAC,GAAG,MAA4C,CAAC;YACvD,MAAM,cAAc,GAAG,CAAC,CAAC,cAAqD,CAAC;YAC/E,IAAI,cAAc,IAAI,OAAO,cAAc,CAAC,gBAAgB,KAAK,UAAU,EAAE,CAAC;gBAC5E,IAAI,CAAC;oBACF,cAAc,CAAC,gBAA2C,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACzE,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;gBACtD,CAAC;YACH,CAAC;QACH,CAAC;QAEO,uBAAuB,CAAC,UAAkB;YAChD,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,SAAS,CAAC,EAAE,GAAG,GAAG,UAAU,YAAY,CAAC;YACzC,SAAS,CAAC,SAAS,GAAG,oBAAoB,CAAC;YAC3C,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACrC,OAAO,SAAS,CAAC;QACnB,CAAC;QAEO,oBAAoB,CAAC,QAA0B;YACrD,QAAQ,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;gBAC1B,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC9C,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;gBAC5B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACL,CAAC;KACF;IAEA,MAAiE,CAAC,eAAe,GAAG,eAAe,CAAC;AACvG,CAAC,CAAC,EAAE,CAAC","sourcesContent":["console.log('InstanceManager loaded');\n\n(function () {\n  'use strict';\n\n  type BaseInstanceLike = {\n    instanceId: string;\n    init: (container: HTMLElement) => void;\n    destroy: () => void;\n    blur: () => void;\n    focus: () => void;\n    serialize: () => Record<string, unknown>;\n    deserialize: (data: Record<string, unknown>) => void;\n    on: (event: string, callback: (data?: unknown) => void) => void;\n  };\n\n  type InstanceConstructor = new (config: Record<string, unknown>) => BaseInstanceLike;\n\n  type ManagerConfig = {\n    type: string;\n    instanceClass: InstanceConstructor;\n    maxInstances?: number;\n    createContainer?: (instanceId: string) => HTMLElement | null;\n  };\n\n  type CreateInstanceConfig = {\n    id?: string;\n    title?: string;\n    initialState?: Record<string, unknown>;\n    metadata?: Record<string, unknown>;\n  };\n\n  class InstanceManager {\n    type: string;\n    instanceClass: InstanceConstructor;\n    maxInstances: number;\n    createContainer: (instanceId: string) => HTMLElement | null;\n    instances: Map<string, BaseInstanceLike>;\n    activeInstanceId: string | null;\n    instanceCounter: number;\n\n    constructor(config: ManagerConfig) {\n      this.type = config.type;\n      this.instanceClass = config.instanceClass;\n      this.maxInstances = config.maxInstances || 0;\n      this.createContainer = config.createContainer || this._defaultCreateContainer.bind(this);\n\n      this.instances = new Map();\n      this.activeInstanceId = null;\n      this.instanceCounter = 0;\n    }\n\n    createInstance(config: CreateInstanceConfig = {}): BaseInstanceLike | null {\n      if (this.maxInstances > 0 && this.instances.size >= this.maxInstances) {\n        console.warn(`Maximum instances (${this.maxInstances}) reached for ${this.type}`);\n        return null;\n      }\n\n      this.instanceCounter++;\n      const instanceId = config.id || `${this.type}-${this.instanceCounter}`;\n\n      const container = this.createContainer(instanceId);\n      if (!container) {\n        console.error('Failed to create container for instance');\n        return null;\n      }\n\n      const instanceConfig = {\n        id: instanceId,\n        type: this.type,\n        title: config.title || `${this.type} ${this.instanceCounter}`,\n        initialState: config.initialState || {},\n        metadata: config.metadata || {},\n      };\n\n      const instance = new this.instanceClass(instanceConfig);\n\n      try {\n        instance.init(container);\n        this.instances.set(instanceId, instance);\n        this.activeInstanceId = instanceId;\n\n        this._setupInstanceEvents(instance);\n        \n        // Trigger auto-save after instance creation\n        this._triggerAutoSave();\n\n        console.log(`Created instance: ${instanceId}`);\n        return instance;\n      } catch (error) {\n        console.error('Failed to initialize instance:', error);\n        container.remove();\n        return null;\n      }\n    }\n\n    getInstance(instanceId: string): BaseInstanceLike | null {\n      return this.instances.get(instanceId) || null;\n    }\n\n    getActiveInstance(): BaseInstanceLike | null {\n      return this.activeInstanceId ? this.instances.get(this.activeInstanceId) || null : null;\n    }\n\n    setActiveInstance(instanceId: string): void {\n      if (this.instances.has(instanceId)) {\n        const previousId = this.activeInstanceId;\n\n        // Guard: avoid recursion if already active\n        if (previousId === instanceId) {\n          return;\n        }\n\n        this.activeInstanceId = instanceId;\n\n        // Blur previous instance\n        if (previousId) {\n          const previousInstance = this.instances.get(previousId);\n          if (previousInstance) {\n            previousInstance.blur();\n          }\n        }\n\n        // Focus new instance\n        const instance = this.instances.get(instanceId);\n        if (instance) {\n          instance.focus();\n        }\n      }\n    }\n\n    getAllInstances(): BaseInstanceLike[] {\n      return Array.from(this.instances.values());\n    }\n\n    getAllInstanceIds(): string[] {\n      return Array.from(this.instances.keys());\n    }\n\n    destroyInstance(instanceId: string): void {\n      const instance = this.instances.get(instanceId);\n      if (!instance) {\n        console.warn(`Instance ${instanceId} not found`);\n        return;\n      }\n\n      instance.destroy();\n      this.instances.delete(instanceId);\n\n      // Update active instance if needed\n      if (this.activeInstanceId === instanceId) {\n        const remainingIds = this.getAllInstanceIds();\n        // noUncheckedIndexedAccess: array access returns T | undefined\n        const lastId = remainingIds.length > 0 ? remainingIds[remainingIds.length - 1] : undefined;\n        this.activeInstanceId = lastId ?? null;\n      }\n      \n      // Trigger auto-save after instance destruction\n      this._triggerAutoSave();\n\n      console.log(`Destroyed instance: ${instanceId}`);\n    }\n\n    destroyAllInstances(): void {\n      this.instances.forEach((instance) => {\n        instance.destroy();\n      });\n      this.instances.clear();\n      this.activeInstanceId = null;\n      \n      // Trigger auto-save after destroying all instances\n      this._triggerAutoSave();\n    }\n\n    hasInstances(): boolean {\n      return this.instances.size > 0;\n    }\n\n    getInstanceCount(): number {\n      return this.instances.size;\n    }\n\n    serializeAll(): Record<string, unknown>[] {\n      return this.getAllInstances().map((instance) => instance.serialize());\n    }\n\n    deserializeAll(data: unknown): void {\n      if (!Array.isArray(data)) return;\n\n      data.forEach((instanceData: Record<string, unknown>) => {\n        const instance = this.createInstance({\n          id: instanceData.instanceId as string | undefined,\n          title: instanceData.title as string | undefined,\n          metadata: instanceData.metadata as Record<string, unknown> | undefined,\n        });\n\n        if (instance && instanceData.state) {\n          instance.deserialize(instanceData);\n        }\n      });\n    }\n\n    /**\n     * Reorder instances to match the provided array of instance IDs\n     * @param newOrder - Array of instance IDs in the desired order\n     */\n    reorderInstances(newOrder: string[]): void {\n      // Validate that all IDs exist\n      const validIds = newOrder.filter(id => this.instances.has(id));\n      if (validIds.length !== this.instances.size) {\n        console.warn('Invalid reorder: not all instance IDs provided or some IDs do not exist');\n        return;\n      }\n\n      // Create a new Map with the desired order\n      const newMap = new Map<string, BaseInstanceLike>();\n      validIds.forEach(id => {\n        const instance = this.instances.get(id);\n        if (instance) {\n          newMap.set(id, instance);\n        }\n      });\n\n      // Replace the instances map\n      this.instances = newMap;\n      console.log('Instances reordered:', validIds);\n    }\n    \n    private _triggerAutoSave(): void {\n      const w = window as unknown as Record<string, unknown>;\n      const SessionManager = w.SessionManager as Record<string, unknown> | undefined;\n      if (SessionManager && typeof SessionManager.saveInstanceType === 'function') {\n        try {\n          (SessionManager.saveInstanceType as (type: string) => void)(this.type);\n        } catch (error) {\n          console.warn('Failed to trigger auto-save:', error);\n        }\n      }\n    }\n\n    private _defaultCreateContainer(instanceId: string): HTMLElement {\n      const container = document.createElement('div');\n      container.id = `${instanceId}-container`;\n      container.className = 'instance-container';\n      document.body.appendChild(container);\n      return container;\n    }\n\n    private _setupInstanceEvents(instance: BaseInstanceLike): void {\n      instance.on('focused', () => {\n        this.setActiveInstance(instance.instanceId);\n      });\n\n      instance.on('destroyed', () => {\n        this.instances.delete(instance.instanceId);\n      });\n    }\n  }\n\n  (window as unknown as { InstanceManager: typeof InstanceManager }).InstanceManager = InstanceManager;\n})();\n"]}