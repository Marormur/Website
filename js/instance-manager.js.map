{"version":3,"file":"instance-manager.js","sourceRoot":"","sources":["../src/ts/instance-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { triggerAutoSave } from './utils/auto-save-helper.js';\r\nimport { getJSON, setJSON } from './storage-utils.js';\r\n\r\nconsole.log('InstanceManager loaded');\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    type BaseInstanceLike = {\r\n        instanceId: string;\r\n        init: (container: HTMLElement) => void;\r\n        destroy: () => void;\r\n        blur: () => void;\r\n        focus: () => void;\r\n        serialize: () => Record<string, unknown>;\r\n        deserialize: (data: Record<string, unknown>) => void;\r\n        on: (event: string, callback: (data?: unknown) => void) => void;\r\n    };\r\n\r\n    type InstanceConstructor = new (config: Record<string, unknown>) => BaseInstanceLike;\r\n\r\n    type ManagerConfig = {\r\n        type: string;\r\n        instanceClass: InstanceConstructor;\r\n        maxInstances?: number;\r\n        createContainer?: (instanceId: string) => HTMLElement | null;\r\n    };\r\n\r\n    type CreateInstanceConfig = {\r\n        id?: string;\r\n        title?: string;\r\n        initialState?: Record<string, unknown>;\r\n        metadata?: Record<string, unknown>;\r\n    };\r\n\r\n    class InstanceManager {\r\n        type: string;\r\n        instanceClass: InstanceConstructor;\r\n        maxInstances: number;\r\n        createContainer: (instanceId: string) => HTMLElement | null;\r\n        instances: Map<string, BaseInstanceLike>;\r\n        activeInstanceId: string | null;\r\n        instanceCounter: number;\r\n\r\n        constructor(config: ManagerConfig) {\r\n            this.type = config.type;\r\n            this.instanceClass = config.instanceClass;\r\n            this.maxInstances = config.maxInstances || 0;\r\n            this.createContainer =\r\n                config.createContainer || this._defaultCreateContainer.bind(this);\r\n\r\n            this.instances = new Map();\r\n            this.activeInstanceId = null;\r\n            this.instanceCounter = 0;\r\n        }\r\n\r\n        createInstance(config: CreateInstanceConfig = {}): BaseInstanceLike | null {\r\n            if (this.maxInstances > 0 && this.instances.size >= this.maxInstances) {\r\n                console.warn(`Maximum instances (${this.maxInstances}) reached for ${this.type}`);\r\n                return null;\r\n            }\r\n\r\n            this.instanceCounter++;\r\n            const instanceId = config.id || `${this.type}-${this.instanceCounter}`;\r\n\r\n            // Guard: If an instance with this ID already exists, reuse it instead of creating\r\n            // a new container. This prevents duplicate DOM containers and double-rendering\r\n            // when restore flows or legacy init handlers accidentally create the same ID twice.\r\n            if (config.id && this.instances.has(instanceId)) {\r\n                console.warn(\r\n                    `Instance with id ${instanceId} already exists for ${this.type}; reusing existing instance.`\r\n                );\r\n                const existing = this.instances.get(instanceId)!;\r\n                // Optionally update title/metadata\r\n                try {\r\n                    (existing as any).title = config.title || (existing as any).title;\r\n                    (existing as any).metadata = {\r\n                        ...(existing as any).metadata,\r\n                        ...(config.metadata || {}),\r\n                    };\r\n                } catch {}\r\n                // Make it active to sync with UI\r\n                this.setActiveInstance(instanceId);\r\n                // Trigger auto-save to persist consistency\r\n                this._triggerAutoSave();\r\n                return existing;\r\n            }\r\n\r\n            const container = this.createContainer(instanceId);\r\n            if (!container) {\r\n                console.error('Failed to create container for instance');\r\n                return null;\r\n            }\r\n\r\n            const instanceConfig = {\r\n                id: instanceId,\r\n                type: this.type,\r\n                title: config.title || `${this.type} ${this.instanceCounter}`,\r\n                initialState: config.initialState || {},\r\n                metadata: config.metadata || {},\r\n            };\r\n\r\n            const instance = new this.instanceClass(instanceConfig);\r\n\r\n            try {\r\n                instance.init(container);\r\n                this.instances.set(instanceId, instance);\r\n\r\n                this._setupInstanceEvents(instance);\r\n\r\n                // Set as active instance (triggers focus and events)\r\n                this.setActiveInstance(instanceId);\r\n\r\n                // Trigger auto-save after instance creation\r\n                this._triggerAutoSave();\r\n\r\n                console.log(`Created instance: ${instanceId}`);\r\n                return instance;\r\n            } catch (error) {\r\n                console.error('Failed to initialize instance:', error);\r\n                container.remove();\r\n                return null;\r\n            }\r\n        }\r\n\r\n        getInstance(instanceId: string): BaseInstanceLike | null {\r\n            return this.instances.get(instanceId) || null;\r\n        }\r\n\r\n        getActiveInstance(): BaseInstanceLike | null {\r\n            return this.activeInstanceId ? this.instances.get(this.activeInstanceId) || null : null;\r\n        }\r\n\r\n        setActiveInstance(instanceId: string): void {\r\n            if (this.instances.has(instanceId)) {\r\n                const previousId = this.activeInstanceId;\r\n\r\n                // Guard: avoid recursion if already active\r\n                if (previousId === instanceId) {\r\n                    return;\r\n                }\r\n\r\n                this.activeInstanceId = instanceId;\r\n\r\n                // Blur previous instance\r\n                if (previousId) {\r\n                    const previousInstance = this.instances.get(previousId);\r\n                    if (previousInstance) {\r\n                        previousInstance.blur();\r\n                    }\r\n                }\r\n\r\n                // Focus new instance\r\n                const instance = this.instances.get(instanceId);\r\n                if (instance) {\r\n                    instance.focus();\r\n                }\r\n\r\n                // Persist active tab selection (debounced via SessionManager)\r\n                this._triggerAutoSave();\r\n\r\n                // Additionally persist active selection per type in localStorage for robust restore\r\n                try {\r\n                    const KEY = 'windowActiveInstances';\r\n                    const map = getJSON<Record<string, string | null>>(KEY, {});\r\n                    map[this.type] = this.activeInstanceId;\r\n                    setJSON(KEY, map);\r\n                } catch {\r\n                    // ignore storage failures\r\n                }\r\n            }\r\n        }\r\n\r\n        getAllInstances(): BaseInstanceLike[] {\r\n            return Array.from(this.instances.values());\r\n        }\r\n\r\n        getAllInstanceIds(): string[] {\r\n            return Array.from(this.instances.keys());\r\n        }\r\n\r\n        destroyInstance(instanceId: string): void {\r\n            const instance = this.instances.get(instanceId);\r\n            if (!instance) {\r\n                console.warn(`Instance ${instanceId} not found`);\r\n                return;\r\n            }\r\n\r\n            instance.destroy();\r\n            this.instances.delete(instanceId);\r\n\r\n            // Update active instance if needed\r\n            if (this.activeInstanceId === instanceId) {\r\n                const remainingIds = this.getAllInstanceIds();\r\n                // noUncheckedIndexedAccess: array access returns T | undefined\r\n                const lastId =\r\n                    remainingIds.length > 0 ? remainingIds[remainingIds.length - 1] : undefined;\r\n                this.activeInstanceId = lastId ?? null;\r\n            }\r\n\r\n            // Trigger auto-save after instance destruction\r\n            this._triggerAutoSave();\r\n\r\n            console.log(`Destroyed instance: ${instanceId}`);\r\n        }\r\n\r\n        destroyAllInstances(): void {\r\n            this.instances.forEach(instance => {\r\n                instance.destroy();\r\n            });\r\n            this.instances.clear();\r\n            this.activeInstanceId = null;\r\n\r\n            // Trigger auto-save after destroying all instances\r\n            this._triggerAutoSave();\r\n        }\r\n\r\n        hasInstances(): boolean {\r\n            return this.instances.size > 0;\r\n        }\r\n\r\n        getInstanceCount(): number {\r\n            return this.instances.size;\r\n        }\r\n\r\n        serializeAll(): Record<string, unknown>[] {\r\n            const activeId = this.activeInstanceId;\r\n            return this.getAllInstances().map(instance => {\r\n                const data = instance.serialize();\r\n                try {\r\n                    // Mark the active instance in metadata for robust restoration without schema changes\r\n                    const meta = (data as any).metadata || {};\r\n                    if (instance.instanceId === activeId) {\r\n                        meta.__active = true;\r\n                    }\r\n                    (data as any).metadata = meta;\r\n                } catch {\r\n                    /* ignore */\r\n                }\r\n                return data;\r\n            });\r\n        }\r\n\r\n        deserializeAll(data: unknown): void {\r\n            if (!Array.isArray(data)) return;\r\n            let desiredActiveId: string | null = null;\r\n\r\n            data.forEach((instanceData: Record<string, unknown>) => {\r\n                const instance = this.createInstance({\r\n                    id: instanceData.instanceId as string | undefined,\r\n                    title: instanceData.title as string | undefined,\r\n                    metadata: instanceData.metadata as Record<string, unknown> | undefined,\r\n                });\r\n\r\n                if (instance && instanceData.state) {\r\n                    instance.deserialize(instanceData);\r\n                }\r\n\r\n                // If this instance was marked active previously, remember it for final activation\r\n                try {\r\n                    const meta = instanceData.metadata as Record<string, unknown> | undefined;\r\n                    if (meta && (meta as any).__active) {\r\n                        desiredActiveId = (instanceData.instanceId as string) || null;\r\n                    }\r\n                } catch {\r\n                    /* ignore */\r\n                }\r\n            });\r\n\r\n            if (desiredActiveId) {\r\n                this.setActiveInstance(desiredActiveId);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Reorder instances to match the provided array of instance IDs\r\n         * @param newOrder - Array of instance IDs in the desired order\r\n         */\r\n        reorderInstances(newOrder: string[]): void {\r\n            // Validate that all IDs exist\r\n            const validIds = newOrder.filter(id => this.instances.has(id));\r\n            if (validIds.length !== this.instances.size) {\r\n                console.warn(\r\n                    'Invalid reorder: not all instance IDs provided or some IDs do not exist'\r\n                );\r\n                return;\r\n            }\r\n\r\n            // Create a new Map with the desired order\r\n            const newMap = new Map<string, BaseInstanceLike>();\r\n            validIds.forEach(id => {\r\n                const instance = this.instances.get(id);\r\n                if (instance) {\r\n                    newMap.set(id, instance);\r\n                }\r\n            });\r\n\r\n            // Replace the instances map\r\n            this.instances = newMap;\r\n            console.log('Instances reordered:', validIds);\r\n        }\r\n\r\n        private _triggerAutoSave(): void {\r\n            triggerAutoSave(this.type);\r\n        }\r\n\r\n        private _defaultCreateContainer(instanceId: string): HTMLElement {\r\n            const container = document.createElement('div');\r\n            container.id = `${instanceId}-container`;\r\n            container.className = 'instance-container';\r\n            document.body.appendChild(container);\r\n            return container;\r\n        }\r\n\r\n        private _setupInstanceEvents(instance: BaseInstanceLike): void {\r\n            instance.on('focused', () => {\r\n                this.setActiveInstance(instance.instanceId);\r\n            });\r\n\r\n            instance.on('destroyed', () => {\r\n                this.instances.delete(instance.instanceId);\r\n            });\r\n        }\r\n    }\r\n\r\n    (window as unknown as { InstanceManager: typeof InstanceManager }).InstanceManager =\r\n        InstanceManager;\r\n})();\r\n"]}