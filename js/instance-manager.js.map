{"version":3,"file":"instance-manager.js","sourceRoot":"","sources":["../src/ts/instance-manager.ts"],"names":[],"mappings":"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","sourcesContent":["console.log('InstanceManager loaded');\r\n\r\n(function () {\r\n  'use strict';\r\n\r\n  type BaseInstanceLike = {\r\n    instanceId: string;\r\n    init: (container: HTMLElement) => void;\r\n    destroy: () => void;\r\n    blur: () => void;\r\n    focus: () => void;\r\n    serialize: () => Record<string, unknown>;\r\n    deserialize: (data: Record<string, unknown>) => void;\r\n    on: (event: string, callback: (data?: unknown) => void) => void;\r\n  };\r\n\r\n  type InstanceConstructor = new (config: Record<string, unknown>) => BaseInstanceLike;\r\n\r\n  type ManagerConfig = {\r\n    type: string;\r\n    instanceClass: InstanceConstructor;\r\n    maxInstances?: number;\r\n    createContainer?: (instanceId: string) => HTMLElement | null;\r\n  };\r\n\r\n  type CreateInstanceConfig = {\r\n    id?: string;\r\n    title?: string;\r\n    initialState?: Record<string, unknown>;\r\n    metadata?: Record<string, unknown>;\r\n  };\r\n\r\n  class InstanceManager {\r\n    type: string;\r\n    instanceClass: InstanceConstructor;\r\n    maxInstances: number;\r\n    createContainer: (instanceId: string) => HTMLElement | null;\r\n    instances: Map<string, BaseInstanceLike>;\r\n    activeInstanceId: string | null;\r\n    instanceCounter: number;\r\n\r\n    constructor(config: ManagerConfig) {\r\n      this.type = config.type;\r\n      this.instanceClass = config.instanceClass;\r\n      this.maxInstances = config.maxInstances || 0;\r\n      this.createContainer = config.createContainer || this._defaultCreateContainer.bind(this);\r\n\r\n      this.instances = new Map();\r\n      this.activeInstanceId = null;\r\n      this.instanceCounter = 0;\r\n    }\r\n\r\n    createInstance(config: CreateInstanceConfig = {}): BaseInstanceLike | null {\r\n      if (this.maxInstances > 0 && this.instances.size >= this.maxInstances) {\r\n        console.warn(`Maximum instances (${this.maxInstances}) reached for ${this.type}`);\r\n        return null;\r\n      }\r\n\r\n      this.instanceCounter++;\r\n      const instanceId = config.id || `${this.type}-${this.instanceCounter}`;\r\n\r\n      const container = this.createContainer(instanceId);\r\n      if (!container) {\r\n        console.error('Failed to create container for instance');\r\n        return null;\r\n      }\r\n\r\n      const instanceConfig = {\r\n        id: instanceId,\r\n        type: this.type,\r\n        title: config.title || `${this.type} ${this.instanceCounter}`,\r\n        initialState: config.initialState || {},\r\n        metadata: config.metadata || {},\r\n      };\r\n\r\n      const instance = new this.instanceClass(instanceConfig);\r\n\r\n      try {\r\n        instance.init(container);\r\n        this.instances.set(instanceId, instance);\r\n        this.activeInstanceId = instanceId;\r\n\r\n        this._setupInstanceEvents(instance);\r\n\r\n        console.log(`Created instance: ${instanceId}`);\r\n        return instance;\r\n      } catch (error) {\r\n        console.error('Failed to initialize instance:', error);\r\n        container.remove();\r\n        return null;\r\n      }\r\n    }\r\n\r\n    getInstance(instanceId: string): BaseInstanceLike | null {\r\n      return this.instances.get(instanceId) || null;\r\n    }\r\n\r\n    getActiveInstance(): BaseInstanceLike | null {\r\n      return this.activeInstanceId ? this.instances.get(this.activeInstanceId) || null : null;\r\n    }\r\n\r\n    setActiveInstance(instanceId: string): void {\r\n      if (this.instances.has(instanceId)) {\r\n        const previousId = this.activeInstanceId;\r\n\r\n        // Guard: avoid recursion if already active\r\n        if (previousId === instanceId) {\r\n          return;\r\n        }\r\n\r\n        this.activeInstanceId = instanceId;\r\n\r\n        // Blur previous instance\r\n        if (previousId) {\r\n          const previousInstance = this.instances.get(previousId);\r\n          if (previousInstance) {\r\n            previousInstance.blur();\r\n          }\r\n        }\r\n\r\n        // Focus new instance\r\n        const instance = this.instances.get(instanceId);\r\n        if (instance) {\r\n          instance.focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    getAllInstances(): BaseInstanceLike[] {\r\n      return Array.from(this.instances.values());\r\n    }\r\n\r\n    getAllInstanceIds(): string[] {\r\n      return Array.from(this.instances.keys());\r\n    }\r\n\r\n    destroyInstance(instanceId: string): void {\r\n      const instance = this.instances.get(instanceId);\r\n      if (!instance) {\r\n        console.warn(`Instance ${instanceId} not found`);\r\n        return;\r\n      }\r\n\r\n      instance.destroy();\r\n      this.instances.delete(instanceId);\r\n\r\n      // Update active instance if needed\r\n      if (this.activeInstanceId === instanceId) {\r\n        const remainingIds = this.getAllInstanceIds();\r\n        // noUncheckedIndexedAccess: array access returns T | undefined\r\n        const lastId = remainingIds.length > 0 ? remainingIds[remainingIds.length - 1] : undefined;\r\n        this.activeInstanceId = lastId ?? null;\r\n      }\r\n\r\n      console.log(`Destroyed instance: ${instanceId}`);\r\n    }\r\n\r\n    destroyAllInstances(): void {\r\n      this.instances.forEach((instance) => {\r\n        instance.destroy();\r\n      });\r\n      this.instances.clear();\r\n      this.activeInstanceId = null;\r\n    }\r\n\r\n    hasInstances(): boolean {\r\n      return this.instances.size > 0;\r\n    }\r\n\r\n    getInstanceCount(): number {\r\n      return this.instances.size;\r\n    }\r\n\r\n    serializeAll(): Record<string, unknown>[] {\r\n      return this.getAllInstances().map((instance) => instance.serialize());\r\n    }\r\n\r\n    deserializeAll(data: unknown): void {\r\n      if (!Array.isArray(data)) return;\r\n\r\n      data.forEach((instanceData: Record<string, unknown>) => {\r\n        const instance = this.createInstance({\r\n          id: instanceData.instanceId as string | undefined,\r\n          title: instanceData.title as string | undefined,\r\n          metadata: instanceData.metadata as Record<string, unknown> | undefined,\r\n        });\r\n\r\n        if (instance && instanceData.state) {\r\n          instance.deserialize(instanceData);\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Reorder instances to match the provided array of instance IDs\r\n     * @param newOrder - Array of instance IDs in the desired order\r\n     */\r\n    reorderInstances(newOrder: string[]): void {\r\n      // Validate that all IDs exist\r\n      const validIds = newOrder.filter(id => this.instances.has(id));\r\n      if (validIds.length !== this.instances.size) {\r\n        console.warn('Invalid reorder: not all instance IDs provided or some IDs do not exist');\r\n        return;\r\n      }\r\n\r\n      // Create a new Map with the desired order\r\n      const newMap = new Map<string, BaseInstanceLike>();\r\n      validIds.forEach(id => {\r\n        const instance = this.instances.get(id);\r\n        if (instance) {\r\n          newMap.set(id, instance);\r\n        }\r\n      });\r\n\r\n      // Replace the instances map\r\n      this.instances = newMap;\r\n      console.log('Instances reordered:', validIds);\r\n    }\r\n\r\n    private _defaultCreateContainer(instanceId: string): HTMLElement {\r\n      const container = document.createElement('div');\r\n      container.id = `${instanceId}-container`;\r\n      container.className = 'instance-container';\r\n      document.body.appendChild(container);\r\n      return container;\r\n    }\r\n\r\n    private _setupInstanceEvents(instance: BaseInstanceLike): void {\r\n      instance.on('focused', () => {\r\n        this.setActiveInstance(instance.instanceId);\r\n      });\r\n\r\n      instance.on('destroyed', () => {\r\n        this.instances.delete(instance.instanceId);\r\n      });\r\n    }\r\n  }\r\n\r\n  (window as unknown as { InstanceManager: typeof InstanceManager }).InstanceManager = InstanceManager;\r\n})();\r\n"]}