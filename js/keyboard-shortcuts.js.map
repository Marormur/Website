{"version":3,"file":"keyboard-shortcuts.js","sourceRoot":"","sources":["../src/ts/keyboard-shortcuts.ts"],"names":[],"mappings":"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","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    type Instance = { instanceId: string };\r\n    type Manager = {\r\n        getAllInstances(): Instance[];\r\n        getActiveInstance(): Instance | null;\r\n        setActiveInstance(id: string): void;\r\n        createInstance(config?: { title?: string }): Instance | null;\r\n        destroyInstance(id: string): void;\r\n    };\r\n\r\n    interface Options {\r\n        scope?: HTMLElement | Document;\r\n        newTitleFactory?: () => string | undefined;\r\n    }\r\n\r\n    type Binding = {\r\n        key: string;\r\n        ctrl?: boolean;\r\n        shift?: boolean;\r\n        handler: () => void;\r\n        description?: string;\r\n        context?: string; // 'global' or a window type like 'finder'\r\n    };\r\n\r\n    const state = {\r\n        bindings: [] as Binding[],\r\n        contextResolver: (() => 'global') as () => string,\r\n        globalListenerAttached: false,\r\n    };\r\n\r\n    // Note: We intentionally do not branch on platform. We accept either Cmd (Meta) or Ctrl as modifier everywhere.\r\n\r\n    function isEditable(target: EventTarget | null): boolean {\r\n        if (!(target instanceof Element)) return false;\r\n        const tag = target.tagName?.toLowerCase();\r\n        if (tag === 'input' || tag === 'textarea' || tag === 'select') return true;\r\n        return (target as HTMLElement).isContentEditable;\r\n    }\r\n\r\n    function nextIndex(current: number, total: number): number {\r\n        return (current + 1) % total;\r\n    }\r\n\r\n    function prevIndex(current: number, total: number): number {\r\n        return (current - 1 + total) % total;\r\n    }\r\n\r\n    function isBinding(x: unknown): x is Binding {\r\n        if (typeof x !== 'object' || x === null) return false;\r\n        const obj = x as { key?: unknown; handler?: unknown };\r\n        return typeof obj.key === 'string' && typeof obj.handler === 'function';\r\n    }\r\n\r\n    // Legacy-friendly register that accepts a binding object (used by MultiInstanceIntegration)\r\n    function register(binding: Binding): () => void;\r\n    // Manager-scoped shortcuts helper (convenience API)\r\n    function register(manager: Manager, options?: Options): () => void;\r\n    function register(arg1: Binding | Manager, arg2: Options = {} as Options): () => void {\r\n        // Binding-style registry\r\n        if (isBinding(arg1)) {\r\n            const b = arg1 as Binding;\r\n            state.bindings.push(b);\r\n            ensureGlobalListener();\r\n            return () => {\r\n                const idx = state.bindings.indexOf(b);\r\n                if (idx >= 0) state.bindings.splice(idx, 1);\r\n            };\r\n        }\r\n\r\n        // Manager-style\r\n        const manager = arg1 as Manager;\r\n        const scope: Document | HTMLElement = arg2.scope || document;\r\n        const handler = (e: KeyboardEvent) => {\r\n            // Cross-platform: accept either Cmd (Meta) or Ctrl as the modifier\r\n            const mod = e.metaKey || e.ctrlKey;\r\n            if (!mod) return;\r\n            if (isEditable(e.target)) return;\r\n            const key = e.key.toLowerCase();\r\n\r\n            if (key === 'n') {\r\n                e.preventDefault();\r\n                const title = arg2.newTitleFactory?.();\r\n                manager.createInstance({ title });\r\n                return;\r\n            }\r\n\r\n            const active = manager.getActiveInstance();\r\n            const instances = manager.getAllInstances();\r\n            const total = instances.length;\r\n            if (total === 0) return;\r\n\r\n            if (key === 'w' && active) {\r\n                e.preventDefault();\r\n                manager.destroyInstance(active.instanceId);\r\n                return;\r\n            }\r\n\r\n            if (key === 'tab') {\r\n                e.preventDefault();\r\n                const currentIndex = active\r\n                    ? instances.findIndex(i => i.instanceId === active.instanceId)\r\n                    : -1;\r\n                const idx = e.shiftKey\r\n                    ? prevIndex(currentIndex, total)\r\n                    : nextIndex(currentIndex, total);\r\n                const target = instances[idx];\r\n                if (target) manager.setActiveInstance(target.instanceId);\r\n                return;\r\n            }\r\n\r\n            if (/^[1-9]$/.test(key)) {\r\n                e.preventDefault();\r\n                const n = parseInt(key, 10);\r\n                const idx = Math.min(n - 1, total - 1);\r\n                const target = instances[idx];\r\n                if (target) manager.setActiveInstance(target.instanceId);\r\n                return;\r\n            }\r\n        };\r\n        scope.addEventListener('keydown', handler as unknown as EventListener);\r\n        return () => scope.removeEventListener('keydown', handler as unknown as EventListener);\r\n    }\r\n\r\n    function ensureGlobalListener() {\r\n        if (state.globalListenerAttached) return;\r\n        const listener = (e: KeyboardEvent) => {\r\n            // Cross-platform: accept either Cmd (Meta) or Ctrl as the modifier\r\n            const mod = e.metaKey || e.ctrlKey;\r\n            if (!mod) return;\r\n            if (isEditable(e.target)) return;\r\n            const key = e.key.toLowerCase();\r\n            const context = state.contextResolver?.() || 'global';\r\n            // Find first matching binding for current context or global\r\n            const binding = state.bindings.find(b => {\r\n                if (b.key.toLowerCase() !== key) return false;\r\n                if (!!b.ctrl !== true) return false; // API expects ctrl/meta always true\r\n                if (!!b.shift !== !!e.shiftKey && b.shift !== undefined) return false;\r\n                if (b.context && b.context !== context) return false;\r\n                return true;\r\n            });\r\n            if (binding) {\r\n                e.preventDefault();\r\n                try {\r\n                    binding.handler();\r\n                } catch {}\r\n            }\r\n        };\r\n        document.addEventListener('keydown', listener as unknown as EventListener);\r\n        state.globalListenerAttached = true;\r\n    }\r\n\r\n    function setContextResolver(resolver: () => string) {\r\n        state.contextResolver = resolver;\r\n        ensureGlobalListener();\r\n    }\r\n\r\n    const KeyboardShortcuts = { register, setContextResolver };\r\n    (window as unknown as { [k: string]: unknown }).KeyboardShortcuts = KeyboardShortcuts;\r\n})();\r\n\r\n"]}