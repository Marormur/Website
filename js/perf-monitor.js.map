{"version":3,"file":"perf-monitor.js","sourceRoot":"","sources":["../src/ts/perf-monitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * perf-monitor.ts\r\n * Performance monitoring and measurement utility for development\r\n */\r\n\r\nconsole.log('PerfMonitor loaded');\r\n\r\n(() => {\r\n    'use strict';\r\n\r\n    const STORAGE_KEY = 'app.perfMonitor.enabled';\r\n\r\n    // ===== Types =====\r\n\r\n    interface ReportOptions {\r\n        clear?: boolean;\r\n        topN?: number;\r\n    }\r\n\r\n    interface PerfMonitorInstance {\r\n        enabled: boolean;\r\n        marks: Set<string>;\r\n        enable(): void;\r\n        disable(): void;\r\n        toggle(): void;\r\n        mark(name: string): void;\r\n        measure(name: string, startMark?: string, endMark?: string): PerformanceMeasure | null;\r\n        report(options?: ReportOptions): PerformanceMeasure[];\r\n    }\r\n\r\n    // ===== Helper Functions =====\r\n\r\n    function isEnabledByDefault(): boolean {\r\n        try {\r\n            // Enable in development environments by default\r\n            const isDev =\r\n                location.hostname === 'localhost' ||\r\n                location.hostname === '127.0.0.1' ||\r\n                location.port !== '';\r\n            const flag = localStorage.getItem(STORAGE_KEY);\r\n            if (flag === 'true') return true;\r\n            if (flag === 'false') return false;\r\n            return isDev;\r\n        } catch (_e) {\r\n            void _e;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // ===== PerfMonitor Instance =====\r\n\r\n    const PerfMonitor: PerfMonitorInstance = {\r\n        enabled: isEnabledByDefault(),\r\n        marks: new Set<string>(),\r\n\r\n        enable() {\r\n            this.enabled = true;\r\n            try {\r\n                localStorage.setItem(STORAGE_KEY, 'true');\r\n            } catch (_e) {\r\n                void _e;\r\n            }\r\n            const logger = (window as typeof window & { Logger?: Console }).Logger || console;\r\n            logger.info('PerfMonitor', 'Enabled');\r\n        },\r\n\r\n        disable() {\r\n            this.enabled = false;\r\n            try {\r\n                localStorage.setItem(STORAGE_KEY, 'false');\r\n            } catch (_e) {\r\n                void _e;\r\n            }\r\n            const logger = (window as typeof window & { Logger?: Console }).Logger || console;\r\n            logger.info('PerfMonitor', 'Disabled');\r\n        },\r\n\r\n        toggle() {\r\n            this.enabled ? this.disable() : this.enable();\r\n        },\r\n\r\n        mark(name: string) {\r\n            if (!this.enabled || !name) return;\r\n            try {\r\n                performance.mark(name);\r\n                this.marks.add(name);\r\n            } catch (_e) {\r\n                void _e;\r\n            }\r\n        },\r\n\r\n        measure(name: string, startMark?: string, endMark?: string): PerformanceMeasure | null {\r\n            if (!this.enabled || !name) return null;\r\n            try {\r\n                if (startMark && endMark) {\r\n                    performance.measure(name, startMark, endMark);\r\n                } else if (startMark) {\r\n                    performance.measure(name, startMark);\r\n                } else {\r\n                    performance.measure(name);\r\n                }\r\n                const entries = performance.getEntriesByName(name, 'measure');\r\n                const lastEntry = entries[entries.length - 1];\r\n                return lastEntry ? (lastEntry as PerformanceMeasure) : null;\r\n            } catch (_e) {\r\n                void _e;\r\n                return null;\r\n            }\r\n        },\r\n\r\n        report(options?: ReportOptions): PerformanceMeasure[] {\r\n            if (!this.enabled) return [];\r\n            const { clear = false, topN = 10 } = options || {};\r\n            const measures = performance\r\n                .getEntriesByType('measure')\r\n                .slice()\r\n                .sort((a, b) => b.duration - a.duration)\r\n                .slice(0, topN) as PerformanceMeasure[];\r\n\r\n            if (measures.length) {\r\n                const logger = (window as typeof window & { Logger?: Console }).Logger || console;\r\n                logger.group('PerfMonitor report');\r\n                for (const m of measures) {\r\n                    logger.info('PerfMonitor', `${m.name}: ${m.duration.toFixed(2)}ms`);\r\n                }\r\n                logger.groupEnd();\r\n            }\r\n            if (clear) {\r\n                performance.clearMeasures();\r\n                try {\r\n                    for (const m of this.marks) performance.clearMarks(m);\r\n                } catch (_e) {\r\n                    void _e;\r\n                }\r\n                this.marks.clear();\r\n            }\r\n            return measures;\r\n        },\r\n    };\r\n\r\n    // ===== Auto Capture Lifecycle Timings =====\r\n\r\n    // Auto capture key lifecycle timings\r\n    if (PerfMonitor.enabled) {\r\n        try {\r\n            PerfMonitor.mark('app:js-start');\r\n            if (document.readyState === 'complete' || document.readyState === 'interactive') {\r\n                // DOM already parsed\r\n                PerfMonitor.mark('app:dom-ready');\r\n            } else {\r\n                document.addEventListener(\r\n                    'DOMContentLoaded',\r\n                    () => PerfMonitor.mark('app:dom-ready'),\r\n                    { once: true }\r\n                );\r\n            }\r\n            window.addEventListener(\r\n                'load',\r\n                () => {\r\n                    PerfMonitor.mark('app:window-load');\r\n                    PerfMonitor.measure('app:domready->load', 'app:dom-ready', 'app:window-load');\r\n                    PerfMonitor.measure('app:start->load', 'app:js-start', 'app:window-load');\r\n                    PerfMonitor.report({ topN: 5 });\r\n                },\r\n                { once: true }\r\n            );\r\n        } catch (_e) {\r\n            void _e;\r\n        }\r\n    }\r\n\r\n    // ===== Global Export =====\r\n\r\n    if (typeof window !== 'undefined') {\r\n        (window as typeof window & { PerfMonitor: PerfMonitorInstance }).PerfMonitor =\r\n            PerfMonitor;\r\n    }\r\n})();\r\n\r\nexport {};\r\n"]}