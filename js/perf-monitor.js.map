{"version":3,"file":"perf-monitor.js","sourceRoot":"","sources":["../src/ts/perf-monitor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * perf-monitor.ts\n * Performance monitoring and measurement utility for development\n */\n\nconsole.log('PerfMonitor loaded');\n\n(() => {\n    'use strict';\n\n    const STORAGE_KEY = 'app.perfMonitor.enabled';\n\n    // ===== Types =====\n\n    interface ReportOptions {\n        clear?: boolean;\n        topN?: number;\n    }\n\n    interface PerfMonitorInstance {\n        enabled: boolean;\n        marks: Set<string>;\n        enable(): void;\n        disable(): void;\n        toggle(): void;\n        mark(name: string): void;\n        measure(name: string, startMark?: string, endMark?: string): PerformanceMeasure | null;\n        report(options?: ReportOptions): PerformanceMeasure[];\n    }\n\n    // ===== Helper Functions =====\n\n    function isEnabledByDefault(): boolean {\n        try {\n            // Enable in development environments by default\n            const isDev =\n                location.hostname === 'localhost' ||\n                location.hostname === '127.0.0.1' ||\n                location.port !== '';\n            const flag = localStorage.getItem(STORAGE_KEY);\n            if (flag === 'true') return true;\n            if (flag === 'false') return false;\n            return isDev;\n        } catch (_e) {\n            void _e;\n            return false;\n        }\n    }\n\n    // ===== PerfMonitor Instance =====\n\n    const PerfMonitor: PerfMonitorInstance = {\n        enabled: isEnabledByDefault(),\n        marks: new Set<string>(),\n\n        enable() {\n            this.enabled = true;\n            try {\n                localStorage.setItem(STORAGE_KEY, 'true');\n            } catch (_e) {\n                void _e;\n            }\n            const logger = (window as typeof window & { Logger?: Console }).Logger || console;\n            logger.info('PerfMonitor', 'Enabled');\n        },\n\n        disable() {\n            this.enabled = false;\n            try {\n                localStorage.setItem(STORAGE_KEY, 'false');\n            } catch (_e) {\n                void _e;\n            }\n            const logger = (window as typeof window & { Logger?: Console }).Logger || console;\n            logger.info('PerfMonitor', 'Disabled');\n        },\n\n        toggle() {\n            this.enabled ? this.disable() : this.enable();\n        },\n\n        mark(name: string) {\n            if (!this.enabled || !name) return;\n            try {\n                performance.mark(name);\n                this.marks.add(name);\n            } catch (_e) {\n                void _e;\n            }\n        },\n\n        measure(name: string, startMark?: string, endMark?: string): PerformanceMeasure | null {\n            if (!this.enabled || !name) return null;\n            try {\n                if (startMark && endMark) {\n                    performance.measure(name, startMark, endMark);\n                } else if (startMark) {\n                    performance.measure(name, startMark);\n                } else {\n                    performance.measure(name);\n                }\n                const entries = performance.getEntriesByName(name, 'measure');\n                const lastEntry = entries[entries.length - 1];\n                return lastEntry ? (lastEntry as PerformanceMeasure) : null;\n            } catch (_e) {\n                void _e;\n                return null;\n            }\n        },\n\n        report(options?: ReportOptions): PerformanceMeasure[] {\n            if (!this.enabled) return [];\n            const { clear = false, topN = 10 } = options || {};\n            const measures = performance\n                .getEntriesByType('measure')\n                .slice()\n                .sort((a, b) => b.duration - a.duration)\n                .slice(0, topN) as PerformanceMeasure[];\n\n            if (measures.length) {\n                const logger = (window as typeof window & { Logger?: Console }).Logger || console;\n                logger.group('PerfMonitor report');\n                for (const m of measures) {\n                    logger.info('PerfMonitor', `${m.name}: ${m.duration.toFixed(2)}ms`);\n                }\n                logger.groupEnd();\n            }\n            if (clear) {\n                performance.clearMeasures();\n                try {\n                    for (const m of this.marks) performance.clearMarks(m);\n                } catch (_e) {\n                    void _e;\n                }\n                this.marks.clear();\n            }\n            return measures;\n        },\n    };\n\n    // ===== Auto Capture Lifecycle Timings =====\n\n    // Auto capture key lifecycle timings\n    if (PerfMonitor.enabled) {\n        try {\n            PerfMonitor.mark('app:js-start');\n            if (document.readyState === 'complete' || document.readyState === 'interactive') {\n                // DOM already parsed\n                PerfMonitor.mark('app:dom-ready');\n            } else {\n                document.addEventListener(\n                    'DOMContentLoaded',\n                    () => PerfMonitor.mark('app:dom-ready'),\n                    { once: true }\n                );\n            }\n            window.addEventListener(\n                'load',\n                () => {\n                    PerfMonitor.mark('app:window-load');\n                    PerfMonitor.measure('app:domready->load', 'app:dom-ready', 'app:window-load');\n                    PerfMonitor.measure('app:start->load', 'app:js-start', 'app:window-load');\n                    PerfMonitor.report({ topN: 5 });\n                },\n                { once: true }\n            );\n        } catch (_e) {\n            void _e;\n        }\n    }\n\n    // ===== Global Export =====\n\n    if (typeof window !== 'undefined') {\n        (window as typeof window & { PerfMonitor: PerfMonitorInstance }).PerfMonitor =\n            PerfMonitor;\n    }\n})();\n\nexport {};\n"]}