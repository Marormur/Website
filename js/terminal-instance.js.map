{"version":3,"file":"terminal-instance.js","sourceRoot":"","sources":["../src/ts/terminal-instance.ts"],"names":[],"mappings":"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","sourcesContent":["console.log('TerminalInstance (TS) loaded');\r\n\r\n/**\r\n * TerminalInstance - Multi-Instance capable terminal implementation\r\n * Ported to TypeScript with preserved global API and behavior.\r\n */\r\n(() => {\r\n    'use strict';\r\n\r\n    type DirEntry = {\r\n        type: 'directory';\r\n        contents: Record<string, FSNode>;\r\n    };\r\n    type FileEntry = {\r\n        type: 'file';\r\n        content: string;\r\n    };\r\n    type FSNode = DirEntry | FileEntry;\r\n\r\n    type BaseLike = {\r\n        container: HTMLElement | null;\r\n        updateState: (u: Record<string, unknown>) => void;\r\n    } & Record<string, unknown>;\r\n    type BaseCtor = new (cfg: Record<string, unknown>) => BaseLike & Record<string, unknown>;\r\n    const Base = (window as unknown as { BaseWindowInstance: BaseCtor }).BaseWindowInstance;\r\n\r\n    class TerminalInstance extends Base {\r\n        outputElement: HTMLElement | null;\r\n        inputElement: HTMLInputElement | null;\r\n        commandHistory: string[];\r\n        historyIndex: number;\r\n        currentPath: string;\r\n        fileSystem: Record<string, FSNode>;\r\n\r\n        constructor(config: Record<string, unknown>) {\r\n            super({\r\n                ...config,\r\n                type: 'terminal',\r\n            });\r\n\r\n            this.outputElement = null;\r\n            this.inputElement = null;\r\n            this.commandHistory = [];\r\n            this.historyIndex = -1;\r\n            this.currentPath = '~';\r\n\r\n            this.fileSystem = {\r\n                '~': {\r\n                    type: 'directory',\r\n                    contents: {\r\n                        Desktop: { type: 'directory', contents: {} },\r\n                        Documents: {\r\n                            type: 'directory',\r\n                            contents: {\r\n                                'readme.txt': {\r\n                                    type: 'file',\r\n                                    content: 'Willkommen im Terminal!',\r\n                                },\r\n                            },\r\n                        },\r\n                        Downloads: { type: 'directory', contents: {} },\r\n                        'welcome.txt': {\r\n                            type: 'file',\r\n                            content:\r\n                                'Willkommen auf Marvins Portfolio-Website!\\n\\nGib \"help\" ein, um eine Liste verfügbarer Befehle zu sehen.',\r\n                        },\r\n                    },\r\n                },\r\n            };\r\n        }\r\n\r\n        // No override of _initializeState to avoid type modifier conflicts\r\n\r\n        protected render(): void {\r\n            if (!this.container) return;\r\n\r\n            const html = `\r\n                <div class=\"terminal-wrapper h-full flex flex-col bg-gray-900 text-green-400 font-mono text-sm\">\r\n                    <div class=\"terminal-output flex-1 overflow-y-auto p-4 space-y-1\" data-terminal-output>\r\n                    </div>\r\n                    <div class=\"terminal-input-line flex items-center px-4 py-2 border-t border-gray-700\">\r\n                        <span class=\"terminal-prompt text-blue-400\">guest@marvin:${this.currentPath}$</span>\r\n                        <input\r\n                            type=\"text\"\r\n                            class=\"flex-1 ml-2 bg-transparent outline-none text-green-400 terminal-input\"\r\n                            autocomplete=\"off\"\r\n                            spellcheck=\"false\"\r\n                            aria-label=\"Terminal input\"\r\n                            data-terminal-input\r\n                        />\r\n                    </div>\r\n                </div>\r\n            `;\r\n\r\n            this.container.innerHTML = html;\r\n            this.outputElement = this.container.querySelector('[data-terminal-output]');\r\n            this.inputElement = this.container.querySelector('[data-terminal-input]');\r\n\r\n            try {\r\n                this.showWelcomeMessage();\r\n            } catch {\r\n                /* noop */\r\n            }\r\n            if (this.inputElement && typeof this.inputElement.focus === 'function') {\r\n                this.inputElement.focus();\r\n            }\r\n        }\r\n\r\n        protected attachEventListeners(): void {\r\n            if (!this.inputElement) return;\r\n\r\n            this.inputElement.addEventListener('keydown', (e: KeyboardEvent) => {\r\n                if (e.key === 'Enter') {\r\n                    e.preventDefault();\r\n                    const command = this.inputElement!.value.trim();\r\n                    if (command) {\r\n                        this.executeCommand(command);\r\n                        this.commandHistory.push(command);\r\n                        this.historyIndex = this.commandHistory.length;\r\n                        this.updateState({ commandHistory: this.commandHistory });\r\n                    }\r\n                    this.inputElement!.value = '';\r\n                    this.inputElement!.focus();\r\n                } else if (e.key === 'Tab') {\r\n                    e.preventDefault();\r\n                    this.handleTabCompletion();\r\n                } else if (e.key === 'ArrowUp') {\r\n                    e.preventDefault();\r\n                    if (this.historyIndex > 0) {\r\n                        this.historyIndex--;\r\n                        // noUncheckedIndexedAccess: array access may return undefined\r\n                        const historyEntry = this.commandHistory[this.historyIndex];\r\n                        if (historyEntry !== undefined) {\r\n                            this.inputElement!.value = historyEntry;\r\n                        }\r\n                    }\r\n                } else if (e.key === 'ArrowDown') {\r\n                    e.preventDefault();\r\n                    if (this.historyIndex < this.commandHistory.length - 1) {\r\n                        this.historyIndex++;\r\n                        // noUncheckedIndexedAccess: array access may return undefined\r\n                        const historyEntry = this.commandHistory[this.historyIndex];\r\n                        if (historyEntry !== undefined) {\r\n                            this.inputElement!.value = historyEntry;\r\n                        }\r\n                    } else {\r\n                        this.historyIndex = this.commandHistory.length;\r\n                        this.inputElement!.value = '';\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        showWelcomeMessage(): void {\r\n            this.addOutput(\r\n                'Willkommen im Terminal! Gib \"help\" ein für verfügbare Befehle.',\r\n                'info'\r\n            );\r\n        }\r\n\r\n        handleTabCompletion(): void {\r\n            if (!this.inputElement) return;\r\n\r\n            const input = this.inputElement.value;\r\n            const [partialCmd, ...args] = input.split(' ');\r\n\r\n            // noUncheckedIndexedAccess: array destructuring may return undefined\r\n            if (partialCmd === undefined) return;\r\n\r\n            const availableCommands = [\r\n                'help',\r\n                'clear',\r\n                'ls',\r\n                'pwd',\r\n                'cd',\r\n                'cat',\r\n                'echo',\r\n                'date',\r\n                'whoami',\r\n            ];\r\n\r\n            if (args.length === 0) {\r\n                const matches = availableCommands.filter(cmd => cmd.startsWith(partialCmd));\r\n\r\n                if (matches.length === 1) {\r\n                    const match = matches[0];\r\n                    if (match !== undefined) {\r\n                        this.inputElement.value = match + ' ';\r\n                    }\r\n                } else if (matches.length > 1) {\r\n                    this.addOutput(`guest@marvin:${this.currentPath}$ ${input}`, 'command');\r\n                    this.addOutput(matches.join('  '), 'info');\r\n                    const commonPrefix = this.findCommonPrefix(matches);\r\n                    if (commonPrefix.length > partialCmd.length) {\r\n                        this.inputElement.value = commonPrefix;\r\n                    }\r\n                }\r\n            } else {\r\n                if (partialCmd === 'cd' || partialCmd === 'cat') {\r\n                    this.completePathArgument(partialCmd, args[0] || '');\r\n                }\r\n            }\r\n        }\r\n\r\n        findCommonPrefix(strings: string[]): string {\r\n            if (!strings.length) return '';\r\n            // noUncheckedIndexedAccess: array access may return undefined\r\n            const firstString = strings[0];\r\n            if (strings.length === 1) return firstString ?? '';\r\n            if (firstString === undefined) return '';\r\n\r\n            let prefix: string = firstString;\r\n            for (let i = 1; i < strings.length; i++) {\r\n                const currentString = strings[i];\r\n                if (currentString === undefined) continue;\r\n\r\n                while (currentString.indexOf(prefix) !== 0) {\r\n                    prefix = prefix.substring(0, prefix.length - 1);\r\n                    if (!prefix) return '';\r\n                }\r\n            }\r\n            return prefix;\r\n        }\r\n\r\n        completePathArgument(cmd: 'cd' | 'cat', partial: string): void {\r\n            const currentDir = this.resolvePath(this.currentPath);\r\n            if (!currentDir || currentDir.type !== 'directory') return;\r\n\r\n            const items = Object.keys(currentDir.contents);\r\n            let matches: string[];\r\n            if (cmd === 'cd') {\r\n                matches = items.filter(\r\n                    item =>\r\n                        (currentDir.contents[item] as FSNode).type === 'directory' &&\r\n                        item.startsWith(partial)\r\n                );\r\n            } else {\r\n                matches = items.filter(\r\n                    item =>\r\n                        (currentDir.contents[item] as FSNode).type === 'file' &&\r\n                        item.startsWith(partial)\r\n                );\r\n            }\r\n\r\n            if (matches.length === 1) {\r\n                this.inputElement!.value = `${cmd} ${matches[0]}`;\r\n            } else if (matches.length > 1) {\r\n                this.addOutput(\r\n                    `guest@marvin:${this.currentPath}$ ${this.inputElement!.value}`,\r\n                    'command'\r\n                );\r\n                const formatted = matches.map(item => {\r\n                    // noUncheckedIndexedAccess: dictionary access may return undefined\r\n                    const itemObj = currentDir.contents[item] as FSNode | undefined;\r\n                    if (!itemObj) return item;\r\n                    const prefix = itemObj.type === 'directory' ? '📁 ' : '📄 ';\r\n                    return prefix + item;\r\n                });\r\n                this.addOutput(formatted.join('  '), 'info');\r\n                const commonPrefix = this.findCommonPrefix(matches);\r\n                if (commonPrefix.length > partial.length) {\r\n                    this.inputElement!.value = `${cmd} ${commonPrefix}`;\r\n                }\r\n            }\r\n        }\r\n\r\n        executeCommand(command: string): void {\r\n            this.addOutput(`guest@marvin:${this.currentPath}$ ${command}`, 'command');\r\n            const [cmd, ...args] = command.split(' ');\r\n\r\n            // noUncheckedIndexedAccess: array destructuring may return undefined\r\n            if (cmd === undefined) return;\r\n\r\n            const commands: Record<string, () => void> = {\r\n                help: () => this.showHelp(),\r\n                clear: () => this.clearOutput(),\r\n                ls: () => this.listDirectory(args[0]),\r\n                pwd: () => this.printWorkingDirectory(),\r\n                cd: () => this.changeDirectory(args[0]),\r\n                cat: () => this.catFile(args[0]),\r\n                echo: () => this.echo(args.join(' ')),\r\n                date: () => this.showDate(),\r\n                whoami: () => this.addOutput('guest', 'output'),\r\n            };\r\n\r\n            const commandFn = commands[cmd];\r\n            if (commandFn !== undefined) {\r\n                commandFn();\r\n            } else {\r\n                this.addOutput(\r\n                    `Befehl nicht gefunden: ${cmd}. Gib \"help\" ein für verfügbare Befehle.`,\r\n                    'error'\r\n                );\r\n            }\r\n        }\r\n\r\n        addOutput(text: string, type: 'command' | 'output' | 'error' | 'info' = 'output'): void {\r\n            if (!this.outputElement) return;\r\n            const line = document.createElement('div');\r\n            line.className = `terminal-line terminal-${type}`;\r\n            const colorMap: Record<string, string> = {\r\n                command: 'text-blue-400',\r\n                output: 'text-green-400',\r\n                error: 'text-red-400',\r\n                info: 'text-yellow-400',\r\n            };\r\n            line.className += ` ${colorMap[type] || 'text-green-400'}`;\r\n            line.textContent = text;\r\n            this.outputElement.appendChild(line);\r\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\r\n        }\r\n\r\n        clearOutput(): void {\r\n            if (this.outputElement) this.outputElement.innerHTML = '';\r\n        }\r\n\r\n        showHelp(): void {\r\n            const helpText = [\r\n                'Verfügbare Befehle:',\r\n                '  help         - Zeige diese Hilfe',\r\n                '  clear        - Lösche Ausgabe',\r\n                '  ls [path]    - Liste Dateien (optional mit Pfad)',\r\n                '  pwd          - Zeige aktuelles Verzeichnis',\r\n                '  cd <dir>     - Wechsle Verzeichnis (., .., ~, relative/absolute Pfade)',\r\n                '  cat <file>   - Zeige Dateiinhalt (auch mit Pfad: cat ./file oder cat dir/file)',\r\n                '  echo <text>  - Gebe Text aus',\r\n                '  date         - Zeige Datum/Zeit',\r\n                '  whoami       - Zeige Benutzername',\r\n                '',\r\n                'Pfad-Beispiele:',\r\n                '  .            - Aktuelles Verzeichnis',\r\n                '  ..           - Übergeordnetes Verzeichnis',\r\n                '  ~            - Home-Verzeichnis',\r\n                '  ./file       - Datei im aktuellen Verzeichnis',\r\n                '  ../file      - Datei im übergeordneten Verzeichnis',\r\n                '  dir/subdir   - Unterverzeichnis (relativ)',\r\n                '',\r\n                'Tipps:',\r\n                '  ↑/↓          - Durchsuche Befehlshistorie',\r\n                '  Tab          - Vervollständige Befehle und Pfade',\r\n            ];\r\n            helpText.forEach(l => this.addOutput(l, 'info'));\r\n        }\r\n\r\n        listDirectory(path?: string): void {\r\n            const targetPath = path ? this.normalizePath(path) : this.currentPath;\r\n            const targetDir = this.resolvePath(targetPath);\r\n            if (!targetDir) {\r\n                this.addOutput(`Verzeichnis nicht gefunden: ${path || targetPath}`, 'error');\r\n                return;\r\n            }\r\n            if (targetDir.type !== 'directory') {\r\n                this.addOutput(`${path || targetPath} ist kein Verzeichnis`, 'error');\r\n                return;\r\n            }\r\n            const items = Object.keys(targetDir.contents);\r\n            if (items.length === 0) this.addOutput('(leer)', 'output');\r\n            else {\r\n                items.forEach(item => {\r\n                    // noUncheckedIndexedAccess: dictionary access may return undefined\r\n                    const itemObj = targetDir.contents[item];\r\n                    if (!itemObj) return;\r\n                    const prefix = itemObj.type === 'directory' ? '📁 ' : '📄 ';\r\n                    this.addOutput(prefix + item, 'output');\r\n                });\r\n            }\r\n        }\r\n\r\n        printWorkingDirectory(): void {\r\n            this.addOutput(this.currentPath, 'output');\r\n        }\r\n\r\n        changeDirectory(path?: string): void {\r\n            if (!path) {\r\n                this.currentPath = '~';\r\n                this.updatePrompt();\r\n                return;\r\n            }\r\n            const newPath = this.normalizePath(path);\r\n            const resolved = this.resolvePath(newPath);\r\n            if (!resolved) {\r\n                this.addOutput(`Verzeichnis nicht gefunden: ${path}`, 'error');\r\n                return;\r\n            }\r\n            if (resolved.type !== 'directory') {\r\n                this.addOutput(`${path} ist kein Verzeichnis`, 'error');\r\n                return;\r\n            }\r\n            this.currentPath = newPath;\r\n            this.updatePrompt();\r\n            this.updateState({ currentPath: this.currentPath });\r\n        }\r\n\r\n        catFile(filename?: string): void {\r\n            if (!filename) {\r\n                this.addOutput('Dateiname fehlt', 'error');\r\n                return;\r\n            }\r\n            if (filename.includes('/')) {\r\n                const normalizedPath = this.normalizePath(filename);\r\n                const pathParts = normalizedPath.split('/').filter(p => p !== '');\r\n                const fileName = pathParts.pop()!;\r\n                const dirPath = pathParts.length > 0 ? pathParts.join('/') : '~';\r\n                const dir = this.resolvePath(dirPath);\r\n                if (!dir) {\r\n                    this.addOutput(`Verzeichnis nicht gefunden: ${dirPath}`, 'error');\r\n                    return;\r\n                }\r\n                const file = (dir as DirEntry).contents?.[fileName] as FSNode | undefined;\r\n                if (!file) this.addOutput(`Datei nicht gefunden: ${filename}`, 'error');\r\n                else if (file.type !== 'file')\r\n                    this.addOutput(`${filename} ist keine Datei`, 'error');\r\n                else this.addOutput(file.content, 'output');\r\n            } else {\r\n                const currentDir = this.resolvePath(this.currentPath) as DirEntry | null;\r\n                const file = currentDir?.contents?.[filename] as FSNode | undefined;\r\n                if (!file) this.addOutput(`Datei nicht gefunden: ${filename}`, 'error');\r\n                else if (file.type !== 'file')\r\n                    this.addOutput(`${filename} ist keine Datei`, 'error');\r\n                else this.addOutput(file.content, 'output');\r\n            }\r\n        }\r\n\r\n        echo(text: string): void {\r\n            this.addOutput(text, 'output');\r\n        }\r\n\r\n        showDate(): void {\r\n            this.addOutput(new Date().toString(), 'output');\r\n        }\r\n\r\n        updatePrompt(): void {\r\n            const prompt = this.container?.querySelector('.terminal-prompt') as HTMLElement | null;\r\n            if (prompt) {\r\n                prompt.textContent = `guest@marvin:${this.currentPath}$`;\r\n            }\r\n        }\r\n\r\n        resolvePath(path: string | undefined | null): FSNode | null {\r\n            if (!path) return null;\r\n            const normalizedPath = this.normalizePath(path);\r\n\r\n            // noUncheckedIndexedAccess: dictionary access may return undefined\r\n            const homeNode = this.fileSystem['~'];\r\n            if (normalizedPath === '~') return homeNode ?? null;\r\n            if (homeNode === undefined) return null;\r\n\r\n            let current: FSNode = homeNode;\r\n            const parts = normalizedPath\r\n                .replace(/^~\\/?/, '')\r\n                .split('/')\r\n                .filter(p => p);\r\n            for (const part of parts) {\r\n                if ((current as DirEntry).type !== 'directory') return null;\r\n                if (!(current as DirEntry).contents || !(current as DirEntry).contents[part])\r\n                    return null;\r\n                // noUncheckedIndexedAccess: dictionary access may return undefined\r\n                const nextNode = (current as DirEntry).contents[part];\r\n                if (nextNode === undefined) return null;\r\n                current = nextNode;\r\n            }\r\n            return current;\r\n        }\r\n\r\n        normalizePath(path: string): string {\r\n            if (!path || path === '~') return '~';\r\n            if (path === '.') return this.currentPath;\r\n            if (path === './') return this.currentPath;\r\n            let workingPath: string;\r\n            if (path.startsWith('~')) workingPath = path;\r\n            else if (path.startsWith('/')) workingPath = '~' + path;\r\n            else\r\n                workingPath =\r\n                    this.currentPath === '~' ? `~/${path}` : `${this.currentPath}/${path}`;\r\n            const parts = workingPath.split('/').filter(p => p !== '' && p !== '.');\r\n            const resolved: string[] = [];\r\n            for (const part of parts) {\r\n                if (part === '..') {\r\n                    if (resolved.length > 0 && resolved[resolved.length - 1] !== '~') {\r\n                        resolved.pop();\r\n                    }\r\n                } else {\r\n                    resolved.push(part);\r\n                }\r\n            }\r\n            if (resolved.length === 0 || (resolved.length === 1 && resolved[0] === '~')) return '~';\r\n            if (resolved[0] !== '~') resolved.unshift('~');\r\n            return resolved.join('/');\r\n        }\r\n\r\n        parentPath(path: string): string {\r\n            const parts = path.split('/').filter(Boolean);\r\n            parts.pop();\r\n            return parts.length > 0 ? '/' + parts.join('/') : '~';\r\n        }\r\n\r\n        serialize(): Record<string, unknown> {\r\n            const baseSerialize = (\r\n                Base.prototype as unknown as {\r\n                    serialize: () => Record<string, unknown>;\r\n                }\r\n            ).serialize;\r\n            const baseObj = baseSerialize.call(this) as Record<string, unknown>;\r\n            return {\r\n                ...baseObj,\r\n                currentPath: this.currentPath,\r\n                commandHistory: this.commandHistory,\r\n                fileSystem: this.fileSystem,\r\n            } as Record<string, unknown>;\r\n        }\r\n\r\n        deserialize(data: Record<string, unknown>): void {\r\n            const baseDeserialize = (\r\n                Base.prototype as unknown as {\r\n                    deserialize: (d: Record<string, unknown>) => void;\r\n                }\r\n            ).deserialize;\r\n            baseDeserialize.call(this, data);\r\n            const d = data as Record<string, unknown> & {\r\n                currentPath?: string;\r\n                commandHistory?: string[];\r\n                fileSystem?: Record<string, FSNode>;\r\n            };\r\n            if (d.currentPath) {\r\n                this.currentPath = d.currentPath;\r\n                this.updatePrompt();\r\n            }\r\n            if (d.commandHistory) {\r\n                this.commandHistory = d.commandHistory;\r\n                this.historyIndex = this.commandHistory.length;\r\n            }\r\n            if (d.fileSystem) {\r\n                this.fileSystem = d.fileSystem;\r\n            }\r\n        }\r\n\r\n        focus(): void {\r\n            const baseFocus = (Base.prototype as unknown as { focus: () => void }).focus;\r\n            baseFocus.call(this);\r\n            if (this.inputElement) this.inputElement.focus();\r\n        }\r\n    }\r\n\r\n    (window as unknown as { TerminalInstance: typeof TerminalInstance }).TerminalInstance =\r\n        TerminalInstance;\r\n\r\n    // Create Terminal Instance Manager\r\n    const G = window as unknown as Record<string, unknown>;\r\n    type InstanceManagerCtor = new (cfg: Record<string, unknown>) => unknown;\r\n    const InstanceManager = G['InstanceManager'] as unknown as InstanceManagerCtor | undefined;\r\n    if (InstanceManager) {\r\n        (G['TerminalInstanceManager'] as unknown) = new (InstanceManager as InstanceManagerCtor)({\r\n            type: 'terminal',\r\n            instanceClass: TerminalInstance,\r\n            maxInstances: 0,\r\n            createContainer: function (instanceId: string): HTMLElement | null {\r\n                const terminalModalContainer = document.getElementById('terminal-container');\r\n                if (!terminalModalContainer) {\r\n                    console.error('Terminal container not found');\r\n                    return null;\r\n                }\r\n                const container = document.createElement('div');\r\n                container.id = `${instanceId}-container`;\r\n                container.className = 'terminal-instance-container h-full';\r\n                // Use DOMUtils if available to hide initially, else fallback\r\n                const domUtils = (\r\n                    window as unknown as { DOMUtils?: { hide?: (el: Element) => void } }\r\n                ).DOMUtils;\r\n                if (domUtils && typeof domUtils.hide === 'function') {\r\n                    domUtils.hide(container);\r\n                } else {\r\n                    container.classList.add('hidden');\r\n                }\r\n                terminalModalContainer.appendChild(container);\r\n                return container;\r\n            },\r\n        });\r\n    }\r\n})();\r\n\r\n"]}