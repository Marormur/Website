{"version":3,"file":"expose-globals.js","sourceRoot":"","sources":["../../src/ts/compat/expose-globals.ts"],"names":[],"mappings":";AAAA;;;;GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,CAAC;AAErD,2DAA2D;AAC3D,uDAAyC;AAEzC,mFAAmF;AACnF,kBAAgB;AAChB,6BAA2B;AAC3B,yBAAuB;AACvB,2BAAyB;AACzB,yBAAuB;AACvB,8BAA4B;AAC5B,gCAA8B;AAC9B,mBAAiB;AACjB,mBAAiB;AACjB,qBAAmB;AACnB,4BAA0B;AAC1B,2BAAyB;AACzB,sBAAoB;AACpB,oBAAkB;AAClB,mCAAiC,CAAC,kCAAkC;AACpE,+BAA6B;AAC7B,4BAA0B;AAC1B,0BAAwB;AACxB,gCAA8B;AAC9B,mCAAiC;AACjC,0BAAwB;AACxB,iCAA+B;AAC/B,qBAAmB;AACnB,iCAA+B;AAC/B,yBAAuB;AAEvB,yEAAyE;AACzE,uCAAqC,CAAC,0CAA0C;AAChF,wCAAsC;AACtC,kCAAgC;AAChC,mDAAiD;AACjD,gCAA8B;AAC9B,+BAA6B;AAE7B,uFAAuF;AACvF,kFAAkF;AAClF,uFAAuF;AACvF,uBAAqB;AAIrB,MAAM,CAAC,GAAG,MAAqC,CAAC;AAEhD,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,EAAE,CAAC;IACvB,CAAC,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;AAC3B,CAAC;AAED,oEAAoE;AACpE,mEAAmE;AACnE,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK,UAAU,EAAE,CAAC;IACpC,OAAO,CAAC,GAAG,CAAC,0CAA0C,EAAE,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC7E,IAAI,QAAQ,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;QACtC,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;IAC3D,CAAC;SAAM,CAAC;QACN,CAAC,CAAC,OAAO,EAAE,CAAC;IACd,CAAC;AACH,CAAC;KAAM,CAAC;IACN,OAAO,CAAC,KAAK,CAAC,mEAAmE,CAAC,CAAC;AACrF,CAAC;AAED,gCAAgC;AAChC,CAAC,CAAC,gBAAgB,GAAG,IAAI,CAAC","sourcesContent":["/*\n * src/ts/compat/expose-globals.ts\n * Central adapter to expose modern TS modules on window for legacy consumers.\n * This file is used as the single esbuild entry to produce an IIFE bundle.\n */\n\nconsole.log('[BUNDLE] expose-globals.ts loading...');\n\n// Import the modern module(s) we want to expose explicitly\nimport * as DOMUtils from '../dom-utils';\n\n// Import legacy/global modules for their side effects so they register on window.*\nimport '../api';\nimport '../window-manager';\nimport '../action-bus';\nimport '../dialog-utils';\nimport '../snap-utils';\nimport '../program-actions';\nimport '../program-menu-sync';\nimport '../menu';\nimport '../dock';\nimport '../dialog';\nimport '../menubar-utils';\nimport '../context-menu';\nimport '../storage';\nimport '../theme';\nimport '../base-window-instance'; // Must come before instance types\nimport '../instance-manager';\nimport '../window-chrome';\nimport '../window-tabs';\nimport '../terminal-instance';\nimport '../text-editor-instance';\nimport '../text-editor';\nimport '../image-viewer-utils';\nimport '../logger';\nimport '../keyboard-shortcuts';\nimport '../github-api';\n\n// Legacy JS modules (copied to src/ts/legacy/ for esbuild compatibility)\nimport '../legacy/window-configs.js'; // Must load before windows are registered\nimport '../legacy/finder-instance.js';\nimport '../legacy/launchpad.js';\nimport '../legacy/multi-instance-integration.js';\nimport '../legacy/desktop.js';\nimport '../legacy/system.js';\n\n// Finally, include the TypeScript app initialization to bootstrap and signal readiness\n// This sets window.__APP_READY = true when the app finishes loading. It must come\n// AFTER all side-effect imports above so that globals like WindowManager/Dialog exist.\nimport '../app-init';\n\n// Guarded attach for modern modules not yet on window\ntype WindowWithBundle = Window & { __BUNDLE_READY__?: boolean; initApp?: () => void } & Record<string, unknown>;\nconst w = window as unknown as WindowWithBundle;\n\nif (!('DOMUtils' in w)) {\n  w['DOMUtils'] = DOMUtils;\n}\n\n// Trigger app initialization manually since the IIFE in app-init.ts\n// runs in module scope and may not execute due to esbuild bundling\nif (typeof w.initApp === 'function') {\n  console.log('[BUNDLE] Triggering initApp; readyState:', document.readyState);\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', w.initApp);\n  } else {\n    w.initApp();\n  }\n} else {\n  console.error('[BUNDLE] window.initApp is not defined; app initialization failed');\n}\n\n// Optional ready flag for tests\nw.__BUNDLE_READY__ = true;\n"]}