{"version":3,"file":"window-manager.js","sourceRoot":"","sources":["../src/ts/window-manager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * WindowManager - Central registry for windows/modals with z-index and program metadata (TypeScript).\n * Mirrors js/window-manager.js behavior while adding types and preserving global API.\n */\n\n(() => {\n    'use strict';\n\n    type WindowType = 'persistent' | 'transient';\n\n    type DialogLike = {\n        open?: () => void;\n        close?: () => void;\n        bringToFront?: () => void;\n    } | null;\n\n    type WindowConfigOptions = {\n        id: string;\n        type?: WindowType;\n        programKey?: string;\n        icon?: string;\n        closeButtonId?: string | null;\n        metadata?: Record<string, unknown>;\n    };\n\n    type ProgramInfo = {\n        modalId: string | null;\n        programLabel: string;\n        infoLabel: string;\n        fallbackInfoModalId: string;\n        icon: string;\n        about: Record<string, string>;\n    };\n\n    class WindowConfig {\n        id: string;\n        type: WindowType;\n        programKey: string;\n        icon: string;\n        closeButtonId: string | null;\n        dialogInstance: DialogLike;\n        metadata: Record<string, unknown>;\n\n        constructor(options: WindowConfigOptions) {\n            this.id = options.id;\n            this.type = options.type || 'persistent';\n            this.programKey = options.programKey || 'programs.default';\n            this.icon = options.icon || './img/sucher.png';\n            this.closeButtonId = options.closeButtonId ?? null;\n            this.dialogInstance = null;\n            this.metadata = options.metadata || {};\n        }\n\n        isTransient(): boolean {\n            return this.type === 'transient';\n        }\n\n        getProgramInfo(): ProgramInfo {\n            const w = window as unknown as Record<string, unknown>;\n            const i18n =\n                (w['appI18n'] as { translate?: (k: string) => string } | undefined) || undefined;\n            const translate = i18n?.translate || ((key: string) => key);\n\n            const aboutFields = ['name', 'tagline', 'version', 'copyright'];\n            const info: ProgramInfo = {\n                modalId: this.id,\n                programLabel: translate(`${this.programKey}.label`),\n                infoLabel: translate(`${this.programKey}.infoLabel`),\n                fallbackInfoModalId:\n                    (this.metadata.fallbackInfoModalId as string) || 'program-info-modal',\n                icon: this.icon,\n                about: {},\n            };\n            aboutFields.forEach(field => {\n                info.about[field] = translate(`${this.programKey}.about.${field}`);\n            });\n            return info;\n        }\n    }\n\n    const windowRegistry = new Map<string, WindowConfig>();\n    const baseZIndex = 1000;\n    let topZIndex = 1000;\n\n    const WindowManager = {\n        register(config: WindowConfigOptions): WindowConfig {\n            const windowConfig = new WindowConfig(config);\n            windowRegistry.set(config.id, windowConfig);\n            return windowConfig;\n        },\n\n        registerAll(configs: WindowConfigOptions[]): void {\n            configs.forEach(c => this.register(c));\n        },\n\n        getConfig(windowId: string): WindowConfig | null {\n            return windowRegistry.get(windowId) || null;\n        },\n\n        getAllWindowIds(): string[] {\n            return Array.from(windowRegistry.keys());\n        },\n\n        getPersistentWindowIds(): string[] {\n            return this.getAllWindowIds().filter(id => {\n                const config = this.getConfig(id);\n                return !!config && !config.isTransient();\n            });\n        },\n\n        getTransientWindowIds(): string[] {\n            return this.getAllWindowIds().filter(id => {\n                const config = this.getConfig(id);\n                return !!config && config.isTransient();\n            });\n        },\n\n        setDialogInstance(windowId: string, instance: DialogLike): void {\n            const config = this.getConfig(windowId);\n            if (config) {\n                config.dialogInstance = instance;\n            }\n        },\n\n        getDialogInstance(windowId: string): DialogLike {\n            const config = this.getConfig(windowId);\n            return (config && config.dialogInstance) || null;\n        },\n\n        getAllDialogInstances(): Record<string, DialogLike> {\n            const dialogs: Record<string, DialogLike> = {};\n            windowRegistry.forEach((config, id) => {\n                if (config.dialogInstance) {\n                    dialogs[id] = config.dialogInstance;\n                }\n            });\n            return dialogs;\n        },\n\n        getTopWindow(): HTMLElement | null {\n            let topModal: HTMLElement | null = null;\n            let highestZ = 0;\n            this.getAllWindowIds().forEach(id => {\n                const modal = document.getElementById(id);\n                if (modal && !modal.classList.contains('hidden')) {\n                    const zIndex = parseInt(getComputedStyle(modal).zIndex, 10) || 0;\n                    if (zIndex > highestZ) {\n                        highestZ = zIndex;\n                        topModal = modal;\n                    }\n                }\n            });\n            return topModal;\n        },\n\n        bringToFront(windowId: string): void {\n            const instance = this.getDialogInstance(windowId);\n            if (instance && typeof instance.bringToFront === 'function') {\n                instance.bringToFront();\n            } else {\n                console.warn(`Keine Dialog-Instanz für ${windowId} gefunden.`);\n            }\n        },\n\n        open(windowId: string): void {\n            const config = this.getConfig(windowId);\n            // Run the configured initHandler on every open. Some windows rely on\n            // per-open initialization (e.g., Finder multi-instance recreation).\n            if (\n                config &&\n                config.metadata &&\n                typeof (config.metadata as Record<string, unknown>).initHandler === 'function'\n            ) {\n                try {\n                    const md = config.metadata as Record<string, unknown> & {\n                        initHandler?: () => void;\n                    };\n                    if (typeof md.initHandler === 'function') md.initHandler();\n                } catch (e) {\n                    console.warn(`Init handler for ${windowId} threw:`, e);\n                }\n            }\n            const instance = this.getDialogInstance(windowId);\n            if (instance && typeof instance.open === 'function') {\n                instance.open();\n            } else {\n                const modal = document.getElementById(windowId);\n                if (modal) {\n                    modal.classList.remove('hidden');\n                    this.bringToFront(windowId);\n                }\n            }\n        },\n\n        close(windowId: string): void {\n            const instance = this.getDialogInstance(windowId);\n            if (instance && typeof instance.close === 'function') {\n                instance.close();\n            } else {\n                const modal = document.getElementById(windowId);\n                if (modal) modal.classList.add('hidden');\n            }\n        },\n\n        getNextZIndex(): number {\n            topZIndex++;\n            return topZIndex;\n        },\n\n        syncZIndexWithDOM(): number {\n            let maxZ = baseZIndex;\n            this.getAllWindowIds().forEach(id => {\n                const modal = document.getElementById(id);\n                if (!modal) return;\n                const modalZ = parseInt(window.getComputedStyle(modal).zIndex, 10);\n                if (!Number.isNaN(modalZ)) maxZ = Math.max(maxZ, modalZ);\n                const windowEl = this.getDialogWindowElement(modal);\n                if (windowEl) {\n                    const contentZ = parseInt(window.getComputedStyle(windowEl).zIndex, 10);\n                    if (!Number.isNaN(contentZ)) maxZ = Math.max(maxZ, contentZ);\n                }\n            });\n            topZIndex = maxZ;\n            return maxZ;\n        },\n\n        getDialogWindowElement(modal: HTMLElement | null): HTMLElement | null {\n            if (!modal) return null;\n            return (modal.querySelector('.autopointer') as HTMLElement | null) || modal;\n        },\n\n        getProgramInfo(windowId: string): ProgramInfo {\n            const config = this.getConfig(windowId);\n            if (config) return config.getProgramInfo();\n            return this.getDefaultProgramInfo();\n        },\n\n        getDefaultProgramInfo(): ProgramInfo {\n            const w = window as unknown as Record<string, unknown>;\n            const i18n =\n                (w['appI18n'] as { translate?: (k: string) => string } | undefined) || undefined;\n            const translate = i18n?.translate || ((key: string) => key);\n            const programKey = 'programs.default';\n            return {\n                modalId: null,\n                programLabel: translate(`${programKey}.label`),\n                infoLabel: translate(`${programKey}.infoLabel`),\n                fallbackInfoModalId: 'program-info-modal',\n                icon: './img/sucher.png',\n                about: {\n                    name: translate(`${programKey}.about.name`),\n                    tagline: translate(`${programKey}.about.tagline`),\n                    version: translate(`${programKey}.about.version`),\n                    copyright: translate(`${programKey}.about.copyright`),\n                },\n            };\n        },\n\n        get topZIndex(): number {\n            return topZIndex;\n        },\n        set topZIndex(value: number) {\n            topZIndex = value;\n        },\n        get baseZIndex(): number {\n            return baseZIndex;\n        },\n    };\n\n    (window as unknown as { WindowManager: typeof WindowManager }).WindowManager = WindowManager;\n\n    Object.defineProperty(window, 'topZIndex', {\n        get: () => WindowManager.topZIndex,\n        set: (value: number) => {\n            WindowManager.topZIndex = value;\n        },\n    });\n})();\n"]}