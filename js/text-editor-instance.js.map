{"version":3,"file":"text-editor-instance.js","sourceRoot":"","sources":["../src/ts/text-editor-instance.ts"],"names":[],"mappings":"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","sourcesContent":["console.log('TextEditorInstance (TS) loaded');\r\n\r\n/**\r\n * TextEditorInstance - Multi-Instance capable text editor\r\n * TypeScript migration preserving global API and behavior.\r\n */\r\n(() => {\r\n    'use strict';\r\n\r\n    type WrapMode = 'off' | 'soft';\r\n\r\n    type BaseLike = {\r\n        container: HTMLElement | null;\r\n        updateState: (u: Record<string, unknown>) => void;\r\n    } & Record<string, unknown>;\r\n    type BaseCtor = new (cfg: Record<string, unknown>) => BaseLike;\r\n    const Base = (window as unknown as { BaseWindowInstance: BaseCtor }).BaseWindowInstance;\r\n\r\n    class TextEditorInstance extends Base {\r\n        editor: HTMLTextAreaElement | null;\r\n        statusBar: HTMLElement | null;\r\n        saveButton: HTMLElement | null;\r\n        fileInput: HTMLInputElement | null;\r\n        wordCountDisplay: HTMLElement | null;\r\n        lineColDisplay: HTMLElement | null;\r\n        findReplacePanel: HTMLElement | null;\r\n        findInput: HTMLInputElement | null;\r\n        replaceInput: HTMLInputElement | null;\r\n\r\n        wrapMode: WrapMode;\r\n        currentRemoteFile: string | null;\r\n        currentFilename: string;\r\n        isDirty: boolean;\r\n\r\n        constructor(config: Record<string, unknown>) {\r\n            super({\r\n                ...config,\r\n                type: 'text-editor',\r\n            });\r\n\r\n            this.editor = null;\r\n            this.statusBar = null;\r\n            this.saveButton = null;\r\n            this.fileInput = null;\r\n            this.wordCountDisplay = null;\r\n            this.lineColDisplay = null;\r\n            this.findReplacePanel = null;\r\n            this.findInput = null;\r\n            this.replaceInput = null;\r\n\r\n            this.wrapMode = 'off';\r\n            this.currentRemoteFile = null;\r\n            this.currentFilename =\r\n                ((config as Record<string, unknown>).filename as string) || 'Untitled.txt';\r\n            this.isDirty = false;\r\n        }\r\n\r\n        protected render(): void {\r\n            if (!this.container) return;\r\n            const isDark = document.documentElement.classList.contains('dark');\r\n            this.container.innerHTML = `\r\n                <div class=\"text-editor-wrapper flex flex-col h-full\" style=\"background: ${isDark ? '#0f172a' : '#fafafa'}; color: ${isDark ? '#e5e7eb' : '#111827'};\">\r\n                    <!-- Toolbar -->\r\n                    <div class=\"text-editor-toolbar flex-none\" style=\"background: ${isDark ? '#1f2937' : '#f5f5f5'}; padding: 8px 12px; border-bottom: 1px solid ${isDark ? '#374151' : '#d1d5db'}; display: flex; gap: 8px; align-items: center; flex-wrap: wrap;\">\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"clear\" title=\"Neu\">Neu</button>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"open\" title=\"Öffnen\">Öffnen</button>\r\n                        <button type=\"button\" class=\"text-editor-btn text-save-btn\" data-action=\"save\" title=\"Speichern\">Speichern</button>\r\n                        <div class=\"toolbar-separator\"></div>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"bold\" title=\"Fett\" style=\"font-weight: bold;\">B</button>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"italic\" title=\"Kursiv\" style=\"font-style: italic;\">I</button>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"underline\" title=\"Unterstrichen\" style=\"text-decoration: underline;\">U</button>\r\n                        <div class=\"toolbar-separator\"></div>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"find\" title=\"Suchen & Ersetzen\">🔍</button>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"toggleWrap\" title=\"Zeilenumbruch\">⏎</button>\r\n                        <input type=\"file\" class=\"text-file-input\"\r\n                            accept=\".txt,.md,.markdown,.html,.css,.js,.json,.yml,.yaml,.xml\"\r\n                            style=\"display:none\">\r\n                    </div>\r\n\r\n                    <!-- Find/Replace Panel (hidden by default) -->\r\n                    <div class=\"find-replace-panel\" style=\"background: ${isDark ? '#1f2937' : '#f5f5f5'}; padding: 8px 12px; border-bottom: 1px solid ${isDark ? '#374151' : '#d1d5db'}; display: none; gap: 8px; align-items: center;\">\r\n                        <input type=\"text\" class=\"find-input\" placeholder=\"Suchen...\" style=\"padding: 4px 8px; border: 1px solid ${isDark ? '#475569' : '#d1d5db'}; border-radius: 4px; background: ${isDark ? '#111827' : '#ffffff'}; color: inherit;\">\r\n                        <input type=\"text\" class=\"replace-input\" placeholder=\"Ersetzen...\" style=\"padding: 4px 8px; border: 1px solid ${isDark ? '#475569' : '#d1d5db'}; border-radius: 4px; background: ${isDark ? '#111827' : '#ffffff'}; color: inherit;\">\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"findNext\">Weiter</button>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"replaceOne\">Ersetzen</button>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"replaceAll\">Alle ersetzen</button>\r\n                        <button type=\"button\" class=\"text-editor-btn\" data-action=\"closeFindReplace\">✕</button>\r\n                    </div>\r\n\r\n                    <!-- Status Bar for filename -->\r\n                    <div class=\"text-file-status\" style=\"padding: 6px 12px; border-bottom: 1px solid ${isDark ? '#374151' : '#d1d5db'}; background: ${isDark ? '#1f2937' : '#f5f5f5'}; font-size: 13px; opacity: 0.85; display: none;\"></div>\r\n\r\n                    <!-- Editor Textarea -->\r\n                    <textarea class=\"text-editor-textarea flex-1 w-full resize-none p-4 border-0 outline-none\"\r\n                        spellcheck=\"false\"\r\n                        wrap=\"off\"\r\n                        style=\"background: ${isDark ? '#111827' : '#ffffff'}; color: inherit; font-family: 'SFMono-Regular', Menlo, Monaco, Consolas, 'Courier New', monospace; font-size: 14px; line-height: 1.6; tab-size: 4;\"\r\n                        placeholder=\"Text eingeben...\"></textarea>\r\n\r\n                    <!-- Status Bar -->\r\n                    <div class=\"text-editor-statusbar flex-none\" style=\"background: ${isDark ? '#1f2937' : '#f5f5f5'}; padding: 6px 12px; border-top: 1px solid ${isDark ? '#374151' : '#d1d5db'}; font-size: 12px; opacity: 0.75; display: flex; justify-content: space-between;\">\r\n                        <span class=\"word-count-display\">Wörter: 0 | Zeichen: 0</span>\r\n                        <span class=\"line-col-display\">Zeile 1, Spalte 1</span>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            this._applyButtonStyles();\r\n        }\r\n\r\n        private _applyButtonStyles(): void {\r\n            if (!this.container) return;\r\n            const isDark = document.documentElement.classList.contains('dark');\r\n            const buttons = this.container.querySelectorAll(\r\n                '.text-editor-btn'\r\n            ) as NodeListOf<HTMLButtonElement>;\r\n            buttons.forEach(btn => {\r\n                (btn as HTMLElement).style.cssText = `\r\n                    padding: 6px 12px;\r\n                    font-size: 13px;\r\n                    border: 1px solid ${isDark ? '#475569' : '#d1d5db'};\r\n                    background: ${isDark ? '#111827' : '#ffffff'};\r\n                    color: inherit;\r\n                    border-radius: 6px;\r\n                    cursor: pointer;\r\n                    transition: background 0.2s;\r\n                `;\r\n            });\r\n            const separators = this.container.querySelectorAll('.toolbar-separator');\r\n            separators.forEach(sep => {\r\n                (sep as HTMLElement).style.cssText = `\r\n                    width: 1px;\r\n                    height: 20px;\r\n                    background: ${isDark ? '#475569' : '#d1d5db'};\r\n                    margin: 0 4px;\r\n                `;\r\n            });\r\n        }\r\n\r\n        protected attachEventListeners(): void {\r\n            if (!this.container) return;\r\n            this.editor = this.container.querySelector(\r\n                '.text-editor-textarea'\r\n            ) as HTMLTextAreaElement | null;\r\n            this.statusBar = this.container.querySelector('.text-file-status');\r\n            this.saveButton = this.container.querySelector('[data-action=\"save\"]');\r\n            this.fileInput = this.container.querySelector(\r\n                '.text-file-input'\r\n            ) as HTMLInputElement | null;\r\n            this.wordCountDisplay = this.container.querySelector('.word-count-display');\r\n            this.lineColDisplay = this.container.querySelector('.line-col-display');\r\n            this.findReplacePanel = this.container.querySelector('.find-replace-panel');\r\n            this.findInput = this.container.querySelector('.find-input') as HTMLInputElement | null;\r\n            this.replaceInput = this.container.querySelector(\r\n                '.replace-input'\r\n            ) as HTMLInputElement | null;\r\n\r\n            if (this.state && (this.state as Record<string, unknown>).content && this.editor) {\r\n                this.editor.value = (this.state as Record<string, unknown>).content as string;\r\n            }\r\n\r\n            this.editor?.addEventListener('input', () => this._handleInput());\r\n            this.editor?.addEventListener('click', () => this._updateCursorPosition());\r\n            this.editor?.addEventListener('keyup', () => this._updateCursorPosition());\r\n            this.editor?.addEventListener('select', () => this._updateCursorPosition());\r\n\r\n            this.container.addEventListener('click', e => {\r\n                const target = e.target as HTMLElement | null;\r\n                const btn = target?.closest('[data-action]') as HTMLElement | null;\r\n                if (!btn) return;\r\n                const action = btn.getAttribute('data-action') as string;\r\n                this._handleAction(action);\r\n            });\r\n\r\n            if (this.fileInput) {\r\n                this.fileInput.addEventListener('change', e =>\r\n                    this._handleFileOpen(e as unknown as Event)\r\n                );\r\n            }\r\n\r\n            this._updateWordCount();\r\n            this._updateCursorPosition();\r\n            this._loadWrapPreference();\r\n        }\r\n\r\n        private _handleAction(action: string): void {\r\n            const actions: Record<string, () => void> = {\r\n                clear: () => this.clearContent(),\r\n                open: () => this.openFile(),\r\n                save: () => this.saveFile(),\r\n                bold: () => this._wrapSelection('**', '**'),\r\n                italic: () => this._wrapSelection('*', '*'),\r\n                underline: () => this._wrapSelection('<u>', '</u>'),\r\n                find: () => this.toggleFindReplace(),\r\n                toggleWrap: () => this.toggleWrapMode(),\r\n                findNext: () => this.findNext(),\r\n                replaceOne: () => this.replaceOne(),\r\n                replaceAll: () => this.replaceAll(),\r\n                closeFindReplace: () => this.closeFindReplace(),\r\n            };\r\n            if (actions[action]) actions[action]();\r\n        }\r\n\r\n        private _handleInput(): void {\r\n            this.isDirty = true;\r\n            if (this.editor) {\r\n                this.updateState({ content: this.editor.value });\r\n                this._updateWordCount();\r\n                this._updateSaveButton();\r\n                const emit = (\r\n                    Base.prototype as unknown as {\r\n                        emit: (this: unknown, ev: string, data?: unknown) => void;\r\n                    }\r\n                ).emit;\r\n                emit.call(this, 'contentChanged', { content: this.editor.value });\r\n            }\r\n        }\r\n\r\n        private _updateWordCount(): void {\r\n            if (!this.editor || !this.wordCountDisplay) return;\r\n            const text = this.editor.value;\r\n            const words = text.trim() ? text.trim().split(/\\s+/).length : 0;\r\n            const chars = text.length;\r\n            this.wordCountDisplay.textContent = `Wörter: ${words} | Zeichen: ${chars}`;\r\n        }\r\n\r\n        private _updateCursorPosition(): void {\r\n            if (!this.editor || !this.lineColDisplay) return;\r\n            const pos = this.editor.selectionStart;\r\n            const textBeforeCursor = this.editor.value.substring(0, pos);\r\n            const line = (textBeforeCursor.match(/\\n/g) || []).length + 1;\r\n            const lastNewline = textBeforeCursor.lastIndexOf('\\n');\r\n            const col = pos - lastNewline;\r\n            this.lineColDisplay.textContent = `Zeile ${line}, Spalte ${col}`;\r\n            this.updateState({ cursorPosition: { line, col } });\r\n        }\r\n\r\n        private _updateSaveButton(): void {\r\n            if (!this.saveButton) return;\r\n            if (this.isDirty) {\r\n                (this.saveButton as HTMLElement).style.fontWeight = 'bold';\r\n                (this.saveButton as HTMLElement).setAttribute('title', 'Änderungen speichern');\r\n            } else {\r\n                (this.saveButton as HTMLElement).style.fontWeight = 'normal';\r\n                (this.saveButton as HTMLElement).setAttribute('title', 'Speichern');\r\n            }\r\n        }\r\n\r\n        clearContent(): void {\r\n            if (this.isDirty && !confirm('Ungespeicherte Änderungen gehen verloren. Fortfahren?')) {\r\n                return;\r\n            }\r\n            if (this.editor) this.editor.value = '';\r\n            this.currentFilename = 'Untitled.txt';\r\n            this.isDirty = false;\r\n            this.updateState({ content: '', filename: this.currentFilename });\r\n            this._updateWordCount();\r\n            this._updateSaveButton();\r\n            this._hideStatusBar();\r\n            const emit = (\r\n                Base.prototype as unknown as {\r\n                    emit: (this: unknown, ev: string, data?: unknown) => void;\r\n                }\r\n            ).emit;\r\n            emit.call(this, 'contentCleared');\r\n        }\r\n\r\n        openFile(): void {\r\n            this.fileInput?.click();\r\n        }\r\n\r\n        private _handleFileOpen(event: Event): void {\r\n            const target = event.target as HTMLInputElement | null;\r\n            const file = target?.files?.[0];\r\n            if (!file) return;\r\n            const reader = new FileReader();\r\n            reader.onload = e => {\r\n                const result = (e.target as FileReader).result as string;\r\n                if (this.editor) this.editor.value = result;\r\n                this.currentFilename = file.name;\r\n                this.isDirty = false;\r\n                this.updateState({ content: result, filename: file.name });\r\n                this._updateWordCount();\r\n                this._updateSaveButton();\r\n                this._showStatusBar(`Geöffnet: ${file.name}`);\r\n                const emit = (\r\n                    Base.prototype as unknown as {\r\n                        emit: (this: unknown, ev: string, data?: unknown) => void;\r\n                    }\r\n                ).emit;\r\n                emit.call(this, 'fileOpened', { filename: file.name });\r\n            };\r\n            reader.readAsText(file);\r\n        }\r\n\r\n        saveFile(): void {\r\n            const content = this.editor?.value || '';\r\n            const blob = new Blob([content], { type: 'text/plain' });\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = this.currentFilename;\r\n            a.click();\r\n            URL.revokeObjectURL(url);\r\n            this.isDirty = false;\r\n            this._updateSaveButton();\r\n            this._showStatusBar(`Gespeichert: ${this.currentFilename}`);\r\n            const emit = (\r\n                Base.prototype as unknown as {\r\n                    emit: (this: unknown, ev: string, data?: unknown) => void;\r\n                }\r\n            ).emit;\r\n            emit.call(this, 'fileSaved', { filename: this.currentFilename });\r\n        }\r\n\r\n        private _wrapSelection(before: string, after: string): void {\r\n            if (!this.editor) return;\r\n            const start = this.editor.selectionStart;\r\n            const end = this.editor.selectionEnd;\r\n            const selectedText = this.editor.value.substring(start, end);\r\n            const replacement = before + selectedText + after;\r\n            this.editor.setRangeText(replacement, start, end, 'select');\r\n            this.editor.focus();\r\n            this._handleInput();\r\n        }\r\n\r\n        toggleWrapMode(): void {\r\n            this.wrapMode = this.wrapMode === 'soft' ? 'off' : 'soft';\r\n            if (this.editor) {\r\n                this.editor.wrap = this.wrapMode;\r\n                this.editor.style.whiteSpace = this.wrapMode === 'soft' ? 'pre-wrap' : 'pre';\r\n            }\r\n            try {\r\n                localStorage.setItem(\r\n                    `textEditorWrapMode_${(this as unknown as { instanceId: string }).instanceId}`,\r\n                    this.wrapMode\r\n                );\r\n            } catch (e) {\r\n                console.warn('Could not save wrap mode', e);\r\n            }\r\n            this.updateState({ wrapMode: this.wrapMode });\r\n            this._showStatusBar(\r\n                this.wrapMode === 'soft' ? 'Zeilenumbruch aktiviert' : 'Zeilenumbruch deaktiviert'\r\n            );\r\n        }\r\n\r\n        private _loadWrapPreference(): void {\r\n            try {\r\n                const id = (this as unknown as { instanceId: string }).instanceId;\r\n                const saved = localStorage.getItem(`textEditorWrapMode_${id}`) as WrapMode | null;\r\n                if (saved && this.editor) {\r\n                    this.wrapMode = saved;\r\n                    this.editor.wrap = this.wrapMode;\r\n                    this.editor.style.whiteSpace = this.wrapMode === 'soft' ? 'pre-wrap' : 'pre';\r\n                }\r\n            } catch (e) {\r\n                console.warn('Could not load wrap mode', e);\r\n            }\r\n        }\r\n\r\n        toggleFindReplace(): void {\r\n            if (!this.findReplacePanel) return;\r\n            const isHidden = this.findReplacePanel.style.display === 'none';\r\n            this.findReplacePanel.style.display = isHidden ? 'flex' : 'none';\r\n            if (isHidden && this.findInput) this.findInput.focus();\r\n            else this.editor?.focus();\r\n        }\r\n\r\n        closeFindReplace(): void {\r\n            if (this.findReplacePanel) {\r\n                this.findReplacePanel.style.display = 'none';\r\n                this.editor?.focus();\r\n            }\r\n        }\r\n\r\n        findNext(): void {\r\n            if (!this.findInput || !this.editor) return;\r\n            const searchText = this.findInput.value;\r\n            if (!searchText) return;\r\n            const content = this.editor.value;\r\n            const currentPos = this.editor.selectionEnd;\r\n            const index = content.indexOf(searchText, currentPos);\r\n            if (index !== -1) {\r\n                this.editor.setSelectionRange(index, index + searchText.length);\r\n                this.editor.focus();\r\n            } else {\r\n                const firstIndex = content.indexOf(searchText);\r\n                if (firstIndex !== -1) {\r\n                    this.editor.setSelectionRange(firstIndex, firstIndex + searchText.length);\r\n                    this.editor.focus();\r\n                } else {\r\n                    this._showStatusBar('Nicht gefunden');\r\n                }\r\n            }\r\n        }\r\n\r\n        replaceOne(): void {\r\n            if (!this.findInput || !this.replaceInput || !this.editor) return;\r\n            const searchText = this.findInput.value;\r\n            const replaceText = this.replaceInput.value;\r\n            if (!searchText) return;\r\n            const start = this.editor.selectionStart;\r\n            const end = this.editor.selectionEnd;\r\n            const selectedText = this.editor.value.substring(start, end);\r\n            if (selectedText === searchText) {\r\n                this.editor.setRangeText(replaceText, start, end, 'end');\r\n                this._handleInput();\r\n            }\r\n            this.findNext();\r\n        }\r\n\r\n        replaceAll(): void {\r\n            if (!this.findInput || !this.replaceInput || !this.editor) return;\r\n            const searchText = this.findInput.value;\r\n            const replaceText = this.replaceInput.value;\r\n            if (!searchText) return;\r\n            const newContent = this.editor.value.split(searchText).join(replaceText);\r\n            const count = (this.editor.value.match(new RegExp(searchText, 'g')) || []).length;\r\n            this.editor.value = newContent;\r\n            this._handleInput();\r\n            this._showStatusBar(`${count} Ersetzungen vorgenommen`);\r\n        }\r\n\r\n        private _showStatusBar(message: string): void {\r\n            if (!this.statusBar) return;\r\n            this.statusBar.textContent = message;\r\n            this.statusBar.style.display = 'block';\r\n            setTimeout(() => this._hideStatusBar(), 3000);\r\n        }\r\n\r\n        private _hideStatusBar(): void {\r\n            if (this.statusBar) this.statusBar.style.display = 'none';\r\n        }\r\n\r\n        focus(): void {\r\n            const baseFocus = (Base.prototype as unknown as { focus: () => void }).focus;\r\n            baseFocus.call(this);\r\n            this.editor?.focus();\r\n        }\r\n\r\n        serialize(): Record<string, unknown> {\r\n            const baseSerialize = (\r\n                Base.prototype as unknown as {\r\n                    serialize: () => Record<string, unknown>;\r\n                }\r\n            ).serialize;\r\n            const baseObj = baseSerialize.call(this) as Record<string, unknown>;\r\n            return {\r\n                ...baseObj,\r\n                content: this.editor?.value || '',\r\n                filename: this.currentFilename,\r\n                wrapMode: this.wrapMode,\r\n                isDirty: this.isDirty,\r\n            };\r\n        }\r\n\r\n        deserialize(data: Record<string, unknown>): void {\r\n            const baseDeserialize = (\r\n                Base.prototype as unknown as {\r\n                    deserialize: (d: Record<string, unknown>) => void;\r\n                }\r\n            ).deserialize;\r\n            baseDeserialize.call(this, data);\r\n\r\n            const d = data as {\r\n                content?: string;\r\n                filename?: string;\r\n                wrapMode?: WrapMode;\r\n                isDirty?: boolean;\r\n            };\r\n            if (d.content && this.editor) {\r\n                this.editor.value = d.content;\r\n                this._updateWordCount();\r\n            }\r\n            if (d.filename) this.currentFilename = d.filename;\r\n            if (d.wrapMode) {\r\n                this.wrapMode = d.wrapMode;\r\n                if (this.editor) {\r\n                    this.editor.wrap = this.wrapMode;\r\n                    this.editor.style.whiteSpace = this.wrapMode === 'soft' ? 'pre-wrap' : 'pre';\r\n                }\r\n            }\r\n            if (typeof d.isDirty !== 'undefined') {\r\n                this.isDirty = d.isDirty;\r\n                this._updateSaveButton();\r\n            }\r\n        }\r\n    }\r\n\r\n    (window as unknown as { TextEditorInstance: typeof TextEditorInstance }).TextEditorInstance =\r\n        TextEditorInstance;\r\n\r\n    const G = window as unknown as Record<string, unknown>;\r\n    type InstanceManagerCtor = new (cfg: Record<string, unknown>) => unknown;\r\n    const InstanceManager = G['InstanceManager'] as unknown as InstanceManagerCtor | undefined;\r\n    if (InstanceManager) {\r\n        (G['TextEditorInstanceManager'] as unknown) = new (InstanceManager as InstanceManagerCtor)({\r\n            type: 'text-editor',\r\n            instanceClass: TextEditorInstance,\r\n            maxInstances: 0,\r\n            createContainer: function (instanceId: string): HTMLElement | null {\r\n                const editorModalContainer = document.getElementById('text-editor-container');\r\n                if (!editorModalContainer) {\r\n                    console.error('Text editor container not found');\r\n                    return null;\r\n                }\r\n                const container = document.createElement('div');\r\n                container.id = `${instanceId}-container`;\r\n                container.className = 'text-editor-instance-container h-full';\r\n                // Use DOMUtils if available to hide initially, else fallback\r\n                const domUtils = (\r\n                    window as unknown as { DOMUtils?: { hide?: (el: Element) => void } }\r\n                ).DOMUtils;\r\n                if (domUtils && typeof domUtils.hide === 'function') {\r\n                    domUtils.hide(container);\r\n                } else {\r\n                    container.classList.add('hidden');\r\n                }\r\n                editorModalContainer.appendChild(container);\r\n                return container;\r\n            },\r\n        });\r\n    }\r\n})();\r\n\r\n"]}