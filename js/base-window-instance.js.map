{"version":3,"file":"base-window-instance.js","sourceRoot":"","sources":["../src/ts/base-window-instance.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * src/ts/base-window-instance.ts\r\n * Typed port of js/base-window-instance.js\r\n */\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport { triggerAutoSave } from './utils/auto-save-helper.js';\r\n\r\nexport type EventCallback = (data?: any) => void;\r\n\r\nexport interface BaseWindowConfig {\r\n    id?: string;\r\n    type?: string;\r\n    title?: string;\r\n    initialState?: Record<string, any>;\r\n    metadata?: Record<string, any>;\r\n}\r\n\r\nexport class BaseWindowInstance {\r\n    instanceId: string;\r\n    type: string;\r\n    title: string;\r\n    container: HTMLElement | null;\r\n    windowElement: HTMLElement | null;\r\n    state: Record<string, any>;\r\n    eventListeners: Map<string, EventCallback[]>;\r\n    isInitialized: boolean;\r\n    isVisible: boolean;\r\n    metadata: Record<string, any>;\r\n\r\n    constructor(config: BaseWindowConfig) {\r\n        this.instanceId = config.id || this._generateId();\r\n        this.type = config.type || 'unknown';\r\n        this.title = config.title || 'Untitled';\r\n        this.container = null;\r\n        this.windowElement = null;\r\n        this.state = this._initializeState(config.initialState || {});\r\n        this.eventListeners = new Map();\r\n        this.isInitialized = false;\r\n        this.isVisible = false;\r\n        this.metadata = config.metadata || {};\r\n    }\r\n\r\n    private _generateId(): string {\r\n        return `${this.type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n\r\n    private _initializeState(initialState: Record<string, any>): Record<string, any> {\r\n        return {\r\n            ...initialState,\r\n            created: Date.now(),\r\n            modified: Date.now(),\r\n        };\r\n    }\r\n\r\n    init(container: HTMLElement) {\r\n        if (this.isInitialized) {\r\n            console.warn(`Instance ${this.instanceId} already initialized`);\r\n            return;\r\n        }\r\n        this.container = container;\r\n        this.render();\r\n        this.attachEventListeners();\r\n        this.isInitialized = true;\r\n        this.emit('initialized');\r\n    }\r\n\r\n    // Subclasses must implement render\r\n    render(): void {\r\n        throw new Error('render() must be implemented by subclass');\r\n    }\r\n\r\n    attachEventListeners(): void {\r\n        // optional override by subclasses\r\n    }\r\n\r\n    show(): void {\r\n        if (this.container) {\r\n            this.container.classList.remove('hidden');\r\n            this.isVisible = true;\r\n            this.emit('shown');\r\n        }\r\n    }\r\n\r\n    hide(): void {\r\n        if (this.container) {\r\n            this.container.classList.add('hidden');\r\n            this.isVisible = false;\r\n            this.emit('hidden');\r\n        }\r\n    }\r\n\r\n    destroy(): void {\r\n        this.emit('beforeDestroy');\r\n        this.removeAllEventListeners();\r\n        if (this.container) {\r\n            try {\r\n                if (typeof (this.container as any).remove === 'function') {\r\n                    (this.container as any).remove();\r\n                } else if (this.container.parentNode) {\r\n                    this.container.parentNode.removeChild(this.container);\r\n                }\r\n            } catch {\r\n                try {\r\n                    this.container.innerHTML = '';\r\n                    this.container.classList.add('hidden');\r\n                } catch {\r\n                    /* ignore */\r\n                }\r\n            }\r\n            this.container = null;\r\n        }\r\n        this.windowElement = null;\r\n        this.isInitialized = false;\r\n        this.emit('destroyed');\r\n    }\r\n\r\n    updateState(updates: Record<string, any>): void {\r\n        const oldState = { ...this.state };\r\n        this.state = {\r\n            ...this.state,\r\n            ...updates,\r\n            modified: Date.now(),\r\n        };\r\n        this.emit('stateChanged', { oldState, newState: this.state });\r\n        \r\n        // Trigger auto-save when state changes\r\n        this._triggerAutoSave();\r\n    }\r\n    \r\n    private _triggerAutoSave(): void {\r\n        const w = window as any;\r\n        if (w.SessionManager && typeof w.SessionManager.saveInstanceType === 'function') {\r\n            try {\r\n                w.SessionManager.saveInstanceType(this.type);\r\n            } catch (error) {\r\n                console.warn('Failed to trigger auto-save:', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    getState(): Record<string, any> {\r\n        return { ...this.state };\r\n    }\r\n\r\n    serialize() {\r\n        return {\r\n            instanceId: this.instanceId,\r\n            type: this.type,\r\n            title: this.title,\r\n            state: this.getState(),\r\n            metadata: this.metadata,\r\n        };\r\n    }\r\n\r\n    deserialize(data: any) {\r\n        if (data.state) this.state = data.state;\r\n        if (data.title) this.title = data.title;\r\n        if (data.metadata) this.metadata = { ...this.metadata, ...data.metadata };\r\n        this.emit('deserialized');\r\n    }\r\n\r\n    emit(eventName: string, data?: any): void {\r\n        const listeners = this.eventListeners.get(eventName) || [];\r\n        listeners.forEach(callback => {\r\n            try {\r\n                callback.call(this, data);\r\n            } catch (error) {\r\n                console.error(`Error in event listener for ${eventName}:`, error);\r\n            }\r\n        });\r\n    }\r\n\r\n    on(eventName: string, callback: EventCallback): void {\r\n        if (!this.eventListeners.has(eventName)) this.eventListeners.set(eventName, []);\r\n        this.eventListeners.get(eventName)!.push(callback);\r\n    }\r\n\r\n    off(eventName: string, callback: EventCallback): void {\r\n        if (!this.eventListeners.has(eventName)) return;\r\n        const listeners = this.eventListeners.get(eventName)!;\r\n        const index = listeners.indexOf(callback);\r\n        if (index > -1) listeners.splice(index, 1);\r\n    }\r\n\r\n    removeAllEventListeners(): void {\r\n        this.eventListeners.clear();\r\n    }\r\n\r\n    focus(): void {\r\n        if (this.container && this.isVisible) this.emit('focused');\r\n    }\r\n\r\n    blur(): void {\r\n        this.emit('blurred');\r\n    }\r\n}\r\n\r\n// Attach to window for legacy compatibility\r\n// Note: Type declaration is in types/index.d.ts\r\nif (typeof window !== 'undefined') {\r\n    (window as any).BaseWindowInstance = BaseWindowInstance;\r\n}\r\n\r\nexport default BaseWindowInstance;\r\nconsole.log('BaseWindowInstance loaded');\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    type InstanceConfig = {\r\n        id?: string;\r\n        type?: string;\r\n        title?: string;\r\n        initialState?: Record<string, unknown>;\r\n        metadata?: Record<string, unknown>;\r\n    };\r\n\r\n    type StateChangeEvent = {\r\n        oldState: Record<string, unknown>;\r\n        newState: Record<string, unknown>;\r\n    };\r\n\r\n    type SerializedInstance = {\r\n        instanceId: string;\r\n        type: string;\r\n        title: string;\r\n        state: Record<string, unknown>;\r\n        metadata: Record<string, unknown>;\r\n    };\r\n\r\n    type EventCallback = (data?: unknown) => void;\r\n\r\n    class BaseWindowInstance {\r\n        instanceId: string;\r\n        type: string;\r\n        title: string;\r\n        container: HTMLElement | null;\r\n        windowElement: HTMLElement | null;\r\n        state: Record<string, unknown>;\r\n        eventListeners: Map<string, EventCallback[]>;\r\n        isInitialized: boolean;\r\n        isVisible: boolean;\r\n        metadata: Record<string, unknown>;\r\n\r\n        constructor(config: InstanceConfig) {\r\n            this.instanceId = config.id || this._generateId();\r\n            this.type = config.type || 'unknown';\r\n            this.title = config.title || 'Untitled';\r\n            this.container = null;\r\n            this.windowElement = null;\r\n            this.state = this._initializeState(config.initialState || {});\r\n            this.eventListeners = new Map();\r\n            this.isInitialized = false;\r\n            this.isVisible = false;\r\n            this.metadata = config.metadata || {};\r\n        }\r\n\r\n        protected _generateId(): string {\r\n            return `${this.type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n        }\r\n\r\n        protected _initializeState(initialState: Record<string, unknown>): Record<string, unknown> {\r\n            return {\r\n                ...initialState,\r\n                created: Date.now(),\r\n                modified: Date.now(),\r\n            };\r\n        }\r\n\r\n        init(container: HTMLElement): void {\r\n            if (this.isInitialized) {\r\n                console.warn(`Instance ${this.instanceId} already initialized`);\r\n                return;\r\n            }\r\n\r\n            this.container = container;\r\n            this.render();\r\n            this.attachEventListeners();\r\n            this.isInitialized = true;\r\n            this.emit('initialized');\r\n        }\r\n\r\n        protected render(): void {\r\n            throw new Error('render() must be implemented by subclass');\r\n        }\r\n\r\n        protected attachEventListeners(): void {\r\n            // To be implemented by subclasses\r\n        }\r\n\r\n        show(): void {\r\n            if (this.container) {\r\n                this.container.classList.remove('hidden');\r\n                this.isVisible = true;\r\n                this.emit('shown');\r\n            }\r\n        }\r\n\r\n        hide(): void {\r\n            if (this.container) {\r\n                this.container.classList.add('hidden');\r\n                this.isVisible = false;\r\n                this.emit('hidden');\r\n            }\r\n        }\r\n\r\n        destroy(): void {\r\n            this.emit('beforeDestroy');\r\n            this.removeAllEventListeners();\r\n\r\n            if (this.container) {\r\n                try {\r\n                    // Remove container element from DOM to avoid orphaned visible nodes\r\n                    if (typeof (this.container as HTMLElement).remove === 'function') {\r\n                        (this.container as HTMLElement).remove();\r\n                    } else if ((this.container as HTMLElement).parentNode) {\r\n                        (this.container as HTMLElement).parentNode!.removeChild(\r\n                            this.container as HTMLElement\r\n                        );\r\n                    }\r\n                } catch {\r\n                    // Fallback: clear contents and hide\r\n                    try {\r\n                        this.container.innerHTML = '';\r\n                        this.container.classList.add('hidden');\r\n                    } catch {\r\n                        /* ignore */\r\n                    }\r\n                }\r\n                this.container = null;\r\n            }\r\n\r\n            this.windowElement = null;\r\n            this.isInitialized = false;\r\n            this.emit('destroyed');\r\n        }\r\n\r\n        updateState(updates: Record<string, unknown>): void {\r\n            const oldState = { ...this.state };\r\n            this.state = {\r\n                ...this.state,\r\n                ...updates,\r\n                modified: Date.now(),\r\n            };\r\n            this.emit('stateChanged', { oldState, newState: this.state } as StateChangeEvent);\r\n            \r\n            // Trigger auto-save when state changes\r\n            this._triggerAutoSave();\r\n        }\r\n        \r\n        private _triggerAutoSave(): void {\r\n            triggerAutoSave(this.type);\r\n        }\r\n\r\n        getState(): Record<string, unknown> {\r\n            return { ...this.state };\r\n        }\r\n\r\n        serialize(): SerializedInstance {\r\n            return {\r\n                instanceId: this.instanceId,\r\n                type: this.type,\r\n                title: this.title,\r\n                state: this.getState(),\r\n                metadata: this.metadata,\r\n            };\r\n        }\r\n\r\n        deserialize(data: Partial<SerializedInstance>): void {\r\n            if (data.state) {\r\n                this.state = data.state;\r\n            }\r\n            if (data.title) {\r\n                this.title = data.title;\r\n            }\r\n            if (data.metadata) {\r\n                this.metadata = { ...this.metadata, ...data.metadata };\r\n            }\r\n            this.emit('deserialized');\r\n        }\r\n\r\n        emit(eventName: string, data?: unknown): void {\r\n            const listeners = this.eventListeners.get(eventName) || [];\r\n            listeners.forEach(callback => {\r\n                try {\r\n                    callback.call(this, data);\r\n                } catch (error) {\r\n                    console.error(`Error in event listener for ${eventName}:`, error);\r\n                }\r\n            });\r\n        }\r\n\r\n        on(eventName: string, callback: EventCallback): void {\r\n            if (!this.eventListeners.has(eventName)) {\r\n                this.eventListeners.set(eventName, []);\r\n            }\r\n            this.eventListeners.get(eventName)!.push(callback);\r\n        }\r\n\r\n        off(eventName: string, callback: EventCallback): void {\r\n            if (!this.eventListeners.has(eventName)) return;\r\n\r\n            const listeners = this.eventListeners.get(eventName)!;\r\n            const index = listeners.indexOf(callback);\r\n            if (index > -1) {\r\n                listeners.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        removeAllEventListeners(): void {\r\n            this.eventListeners.clear();\r\n        }\r\n\r\n        focus(): void {\r\n            if (this.container && this.isVisible) {\r\n                this.emit('focused');\r\n            }\r\n        }\r\n\r\n        blur(): void {\r\n            this.emit('blurred');\r\n        }\r\n    }\r\n\r\n    (window as unknown as { BaseWindowInstance: typeof BaseWindowInstance }).BaseWindowInstance =\r\n        BaseWindowInstance;\r\n})();\r\n"]}