{"version":3,"file":"base-window-instance.js","sourceRoot":"","sources":["../src/ts/base-window-instance.ts"],"names":[],"mappings":"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","sourcesContent":["console.log('BaseWindowInstance loaded');\n\n(function () {\n  'use strict';\n\n  type InstanceConfig = {\n    id?: string;\n    type?: string;\n    title?: string;\n    initialState?: Record<string, unknown>;\n    metadata?: Record<string, unknown>;\n  };\n\n  type StateChangeEvent = {\n    oldState: Record<string, unknown>;\n    newState: Record<string, unknown>;\n  };\n\n  type SerializedInstance = {\n    instanceId: string;\n    type: string;\n    title: string;\n    state: Record<string, unknown>;\n    metadata: Record<string, unknown>;\n  };\n\n  type EventCallback = (data?: unknown) => void;\n\n  class BaseWindowInstance {\n    instanceId: string;\n    type: string;\n    title: string;\n    container: HTMLElement | null;\n    windowElement: HTMLElement | null;\n    state: Record<string, unknown>;\n    eventListeners: Map<string, EventCallback[]>;\n    isInitialized: boolean;\n    isVisible: boolean;\n    metadata: Record<string, unknown>;\n\n    constructor(config: InstanceConfig) {\n      this.instanceId = config.id || this._generateId();\n      this.type = config.type || 'unknown';\n      this.title = config.title || 'Untitled';\n      this.container = null;\n      this.windowElement = null;\n      this.state = this._initializeState(config.initialState || {});\n      this.eventListeners = new Map();\n      this.isInitialized = false;\n      this.isVisible = false;\n      this.metadata = config.metadata || {};\n    }\n\n    protected _generateId(): string {\n      return `${this.type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    protected _initializeState(initialState: Record<string, unknown>): Record<string, unknown> {\n      return {\n        ...initialState,\n        created: Date.now(),\n        modified: Date.now(),\n      };\n    }\n\n    init(container: HTMLElement): void {\n      if (this.isInitialized) {\n        console.warn(`Instance ${this.instanceId} already initialized`);\n        return;\n      }\n\n      this.container = container;\n      this.render();\n      this.attachEventListeners();\n      this.isInitialized = true;\n      this.emit('initialized');\n    }\n\n    protected render(): void {\n      throw new Error('render() must be implemented by subclass');\n    }\n\n    protected attachEventListeners(): void {\n      // To be implemented by subclasses\n    }\n\n    show(): void {\n      if (this.container) {\n        this.container.classList.remove('hidden');\n        this.isVisible = true;\n        this.emit('shown');\n      }\n    }\n\n    hide(): void {\n      if (this.container) {\n        this.container.classList.add('hidden');\n        this.isVisible = false;\n        this.emit('hidden');\n      }\n    }\n\n    destroy(): void {\n      this.emit('beforeDestroy');\n      this.removeAllEventListeners();\n\n      if (this.container) {\n        this.container.innerHTML = '';\n        this.container = null;\n      }\n\n      this.windowElement = null;\n      this.isInitialized = false;\n      this.emit('destroyed');\n    }\n\n    updateState(updates: Record<string, unknown>): void {\n      const oldState = { ...this.state };\n      this.state = {\n        ...this.state,\n        ...updates,\n        modified: Date.now(),\n      };\n      this.emit('stateChanged', { oldState, newState: this.state } as StateChangeEvent);\n    }\n\n    getState(): Record<string, unknown> {\n      return { ...this.state };\n    }\n\n    serialize(): SerializedInstance {\n      return {\n        instanceId: this.instanceId,\n        type: this.type,\n        title: this.title,\n        state: this.getState(),\n        metadata: this.metadata,\n      };\n    }\n\n    deserialize(data: Partial<SerializedInstance>): void {\n      if (data.state) {\n        this.state = data.state;\n      }\n      if (data.title) {\n        this.title = data.title;\n      }\n      if (data.metadata) {\n        this.metadata = { ...this.metadata, ...data.metadata };\n      }\n      this.emit('deserialized');\n    }\n\n    emit(eventName: string, data?: unknown): void {\n      const listeners = this.eventListeners.get(eventName) || [];\n      listeners.forEach((callback) => {\n        try {\n          callback.call(this, data);\n        } catch (error) {\n          console.error(`Error in event listener for ${eventName}:`, error);\n        }\n      });\n    }\n\n    on(eventName: string, callback: EventCallback): void {\n      if (!this.eventListeners.has(eventName)) {\n        this.eventListeners.set(eventName, []);\n      }\n      this.eventListeners.get(eventName)!.push(callback);\n    }\n\n    off(eventName: string, callback: EventCallback): void {\n      if (!this.eventListeners.has(eventName)) return;\n\n      const listeners = this.eventListeners.get(eventName)!;\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n\n    removeAllEventListeners(): void {\n      this.eventListeners.clear();\n    }\n\n    focus(): void {\n      if (this.container && this.isVisible) {\n        this.emit('focused');\n      }\n    }\n\n    blur(): void {\n      this.emit('blurred');\n    }\n  }\n\n  (window as unknown as { BaseWindowInstance: typeof BaseWindowInstance }).BaseWindowInstance =\n    BaseWindowInstance;\n})();\n"]}