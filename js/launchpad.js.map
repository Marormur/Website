{"version":3,"file":"launchpad.js","sourceRoot":"","sources":["../src/ts/launchpad.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * launchpad.ts\n * Launchpad system for displaying all available applications in a grid\n */\n\nconsole.log('Launchpad loaded');\n\n(() => {\n    'use strict';\n\n    // ===== Types =====\n\n    interface AppItem {\n        id: string;\n        name: string;\n        icon: string;\n        programKey: string | null;\n    }\n\n    interface LaunchpadSystem {\n        init(containerElement: HTMLElement | null): void;\n        refresh(): void;\n        clearSearch(): void;\n        readonly container: HTMLElement | null;\n    }\n\n    // Use augmented window from globals.d.ts\n    const global = window;\n\n    // ===== State =====\n    let container: HTMLElement | null = null;\n    let searchInput: HTMLInputElement | null = null;\n    let appsGrid: HTMLElement | null = null;\n    let allApps: AppItem[] = [];\n    let filteredApps: AppItem[] = [];\n\n    // ===== Helper Functions =====\n\n    /**\n     * Local translate helper\n     */\n    function translate(key: string, fallback?: string): string {\n        if (!global.appI18n || typeof global.appI18n.translate !== 'function') {\n            return fallback || key;\n        }\n        const result = global.appI18n.translate(key);\n        if (result === key && fallback) return fallback;\n        return result;\n    }\n\n    // ===== Initialization =====\n\n    /**\n     * Initialize the Launchpad system\n     */\n    function init(containerElement: HTMLElement | null): void {\n        if (!containerElement) {\n            console.warn('LaunchpadSystem: No container element provided');\n            return;\n        }\n\n        // Prevent re-initialization\n        if (container) {\n            console.warn('LaunchpadSystem: Already initialized');\n            return;\n        }\n\n        container = containerElement;\n        render();\n        loadApps();\n    }\n\n    // ===== Rendering =====\n\n    /**\n     * Render the Launchpad UI\n     */\n    function render(): void {\n        if (!container) return;\n\n        container.innerHTML = `\n            <div class=\"launchpad-container\">\n                <div class=\"launchpad-search\">\n                    <input\n                        id=\"launchpad-search-input\"\n                        type=\"text\"\n                        placeholder=\"${translate('modals.launchpad.searchPlaceholder', 'Search apps')}\"\n                        class=\"launchpad-search-input\"\n                    />\n                </div>\n                <div id=\"launchpad-apps-grid\" class=\"launchpad-apps-grid\">\n                    <!-- Apps will be rendered here -->\n                </div>\n            </div>\n        `;\n\n        // Get references\n        searchInput = container.querySelector<HTMLInputElement>('#launchpad-search-input');\n        appsGrid = container.querySelector<HTMLElement>('#launchpad-apps-grid');\n\n        // Attach event listeners\n        if (searchInput) {\n            searchInput.addEventListener('input', handleSearch);\n        }\n    }\n\n    /**\n     * Load all available applications from WindowManager\n     */\n    function loadApps(): void {\n        if (!global.WindowManager) {\n            console.warn('LaunchpadSystem: WindowManager not available');\n            return;\n        }\n\n        // Get all registered windows\n        const windowIds = global.WindowManager.getAllWindowIds();\n\n        allApps = [];\n\n        windowIds.forEach(windowId => {\n            const config = global.WindowManager?.getConfig(windowId);\n            const programInfo = global.WindowManager?.getProgramInfo(windowId);\n\n            // Skip transient windows like program-info-modal\n            if (config?.type === 'transient') {\n                return;\n            }\n\n            // Skip the launchpad itself\n            if (windowId === 'launchpad-modal') {\n                return;\n            }\n\n            if (programInfo) {\n                const info = programInfo as unknown as {\n                    programLabel?: string;\n                    icon?: string;\n                };\n                allApps.push({\n                    id: windowId,\n                    name: info.programLabel || translate('programs.default.label', 'App'),\n                    icon: info.icon || './img/sucher.png',\n                    programKey: config?.programKey || null,\n                });\n            }\n        });\n\n        filteredApps = [...allApps];\n        renderApps();\n    }\n\n    /**\n     * Handle search input\n     */\n    function handleSearch(event: Event): void {\n        const target = event.target as HTMLInputElement;\n        const query = target.value.toLowerCase().trim();\n\n        if (!query) {\n            filteredApps = [...allApps];\n        } else {\n            filteredApps = allApps.filter(app => app.name.toLowerCase().includes(query));\n        }\n\n        renderApps();\n    }\n\n    /**\n     * Render the apps grid\n     */\n    function renderApps(): void {\n        if (!appsGrid) return;\n\n        appsGrid.innerHTML = '';\n\n        if (filteredApps.length === 0) {\n            appsGrid.innerHTML = `\n                <div class=\"launchpad-empty\">\n                    <p>${translate('finder.empty', 'No apps found')}</p>\n                </div>\n            `;\n            return;\n        }\n\n        filteredApps.forEach(app => {\n            const appButton = document.createElement('button');\n            appButton.className = 'launchpad-app-button';\n            appButton.setAttribute('data-window-id', app.id);\n            // Use ActionBus to open the app and close Launchpad\n            appButton.setAttribute('data-action', 'launchpadOpenWindow');\n            appButton.title = app.name;\n\n            const iconContainer = document.createElement('div');\n            iconContainer.className = 'launchpad-app-icon';\n\n            // Render icon: image path or emoji\n            const isImagePath =\n                typeof app.icon === 'string' && /\\.(png|jpg|jpeg|gif|svg|webp)$/i.test(app.icon);\n            if (\n                isImagePath ||\n                (typeof app.icon === 'string' &&\n                    (app.icon.startsWith('./') || app.icon.startsWith('http')))\n            ) {\n                const icon = document.createElement('img');\n                icon.src = app.icon;\n                icon.alt = app.name;\n                icon.draggable = false;\n                iconContainer.appendChild(icon);\n            } else if (typeof app.icon === 'string' && app.icon.trim().length) {\n                const emoji = document.createElement('div');\n                emoji.className = 'launchpad-app-emoji';\n                emoji.textContent = app.icon;\n                iconContainer.appendChild(emoji);\n            } else {\n                const fallback = document.createElement('img');\n                fallback.src = './img/sucher.png';\n                fallback.alt = app.name;\n                fallback.draggable = false;\n                iconContainer.appendChild(fallback);\n            }\n\n            const label = document.createElement('span');\n            label.className = 'launchpad-app-label';\n            label.textContent = app.name;\n\n            appButton.appendChild(iconContainer);\n            appButton.appendChild(label);\n\n            // No explicit click handler; ActionBus will handle via data-action\n\n            if (appsGrid) {\n                appsGrid.appendChild(appButton);\n            }\n        });\n    }\n\n    // ===== Actions =====\n\n    /**\n     * Open an application and close Launchpad\n     */\n    function openApp(windowId: string): void {\n        if (!windowId) return;\n\n        // Close Launchpad\n        const launchpadModal = document.getElementById('launchpad-modal');\n        const launchpadDialog = global.dialogs?.['launchpad-modal'];\n        if (launchpadModal && launchpadDialog && 'close' in launchpadDialog) {\n            (launchpadDialog as { close(): void }).close();\n        } else if (launchpadModal) {\n            launchpadModal.classList.add('hidden');\n        }\n\n        // Open the selected app\n        if (global.WindowManager?.open) {\n            global.WindowManager.open(windowId);\n            return;\n        }\n        const dialog = global.dialogs?.[windowId];\n        if (dialog && 'open' in dialog && typeof dialog.open === 'function') {\n            dialog.open();\n        } else {\n            const modalElement = document.getElementById(windowId);\n            if (modalElement) {\n                modalElement.classList.remove('hidden');\n                global.bringDialogToFront?.(windowId);\n                global.updateProgramLabelByTopModal?.();\n            }\n        }\n    }\n\n    /**\n     * Refresh apps list (call when new apps are added)\n     */\n    function refresh(): void {\n        loadApps();\n    }\n\n    /**\n     * Clear search and reset to all apps\n     */\n    function clearSearch(): void {\n        if (searchInput) {\n            searchInput.value = '';\n        }\n        filteredApps = [...allApps];\n        renderApps();\n    }\n\n    // ===== Event Listeners =====\n\n    // Listen for language changes and refresh apps\n    global.addEventListener('languagePreferenceChange', () => {\n        if (container) {\n            loadApps();\n        }\n    });\n\n    // ===== ActionBus Integration =====\n\n    // Register ActionBus action to open window and close launchpad\n    if (global.ActionBus?.register) {\n        global.ActionBus.register('launchpadOpenWindow', params => {\n            const id =\n                (params?.windowId as string) ||\n                (params?.windowid as string) ||\n                (params?.window as string) ||\n                (params?.id as string);\n            if (id) openApp(id);\n        });\n    }\n\n    // ===== Global Export =====\n\n    const LaunchpadSystemInstance: LaunchpadSystem = {\n        init,\n        refresh,\n        clearSearch,\n        get container() {\n            return container;\n        },\n    };\n\n    global.LaunchpadSystem = LaunchpadSystemInstance;\n})();\n\nexport {};\n"]}