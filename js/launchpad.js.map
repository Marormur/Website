{"version":3,"file":"launchpad.js","sourceRoot":"","sources":["../src/ts/launchpad.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * LaunchpadSystem (TypeScript)\r\n * Displays all registered persistent apps as a grid and opens selected apps.\r\n */\r\n\r\nconsole.log('Launchpad (TS) loaded');\r\n\r\nimport { translate } from './i18n.js';\r\n\r\n(() => {\r\n    'use strict';\r\n\r\n    type AppEntry = { id: string; name: string; icon: string; programKey?: string | null };\r\n\r\n    let container: HTMLElement | null = null;\r\n    let searchInput: HTMLInputElement | null = null;\r\n    let appsGrid: HTMLElement | null = null;\r\n    let allApps: AppEntry[] = [];\r\n    let filteredApps: AppEntry[] = [];\r\n\r\n    // translate() wird zentral aus i18n.ts importiert\r\n\r\n    function init(containerElement: HTMLElement): void {\r\n        if (!containerElement) {\r\n            console.warn('LaunchpadSystem: No container element provided');\r\n            return;\r\n        }\r\n        if (container) {\r\n            console.warn('LaunchpadSystem: Already initialized');\r\n            return;\r\n        }\r\n        container = containerElement;\r\n        render();\r\n        loadApps();\r\n    }\r\n\r\n    function render(): void {\r\n        if (!container) return;\r\n        container.innerHTML = `\r\n            <div class=\"launchpad-container\">\r\n                <div class=\"launchpad-search\">\r\n                    <input\r\n                        id=\"launchpad-search-input\"\r\n                        type=\"text\"\r\n                        placeholder=\"${translate('modals.launchpad.searchPlaceholder', 'Search apps')}\"\r\n                        class=\"launchpad-search-input\"\r\n                    />\r\n                </div>\r\n                <div id=\"launchpad-apps-grid\" class=\"launchpad-apps-grid\"></div>\r\n            </div>\r\n        `;\r\n\r\n        searchInput = container.querySelector<HTMLInputElement>('#launchpad-search-input');\r\n        appsGrid = container.querySelector<HTMLElement>('#launchpad-apps-grid');\r\n        if (searchInput) searchInput.addEventListener('input', handleSearch);\r\n    }\r\n\r\n    function loadApps(): void {\r\n        const WM = (window as any).WindowManager;\r\n        if (!WM) {\r\n            console.warn('LaunchpadSystem: WindowManager not available');\r\n            return;\r\n        }\r\n        const windowIds: string[] = WM.getAllWindowIds();\r\n        allApps = [];\r\n        windowIds.forEach(id => {\r\n            const cfg = WM.getConfig(id);\r\n            const info = WM.getProgramInfo(id);\r\n            if (cfg && cfg.type === 'transient') return; // skip transient\r\n            if (id === 'launchpad-modal') return; // skip self\r\n            if (info) {\r\n                allApps.push({\r\n                    id,\r\n                    name: info.programLabel || translate('programs.default.label', 'App'),\r\n                    icon: info.icon || './img/sucher.png',\r\n                    programKey: cfg ? cfg.programKey : null,\r\n                });\r\n            }\r\n        });\r\n        filteredApps = [...allApps];\r\n        renderApps();\r\n    }\r\n\r\n    function handleSearch(e: Event): void {\r\n        const q = (e.target as HTMLInputElement).value.toLowerCase().trim();\r\n        filteredApps = q ? allApps.filter(a => a.name.toLowerCase().includes(q)) : [...allApps];\r\n        renderApps();\r\n    }\r\n\r\n    function renderApps(): void {\r\n        if (!appsGrid) return;\r\n        appsGrid.innerHTML = '';\r\n        if (filteredApps.length === 0) {\r\n            appsGrid.innerHTML = `\r\n                <div class=\"launchpad-empty\">\r\n                    <p>${translate('finder.empty', 'No apps found')}</p>\r\n                </div>\r\n            `;\r\n            return;\r\n        }\r\n        const grid = appsGrid;\r\n        if (!grid) return;\r\n        filteredApps.forEach(app => {\r\n            const btn = document.createElement('button');\r\n            btn.className = 'launchpad-app-button';\r\n            btn.setAttribute('data-window-id', app.id);\r\n            btn.setAttribute('data-action', 'launchpadOpenWindow');\r\n            btn.title = app.name;\r\n\r\n            const iconWrap = document.createElement('div');\r\n            iconWrap.className = 'launchpad-app-icon';\r\n            const icon = app.icon;\r\n            const isImg = typeof icon === 'string' && /\\.(png|jpg|jpeg|gif|svg|webp)$/i.test(icon);\r\n            if (\r\n                isImg ||\r\n                (typeof icon === 'string' && (icon.startsWith('./') || icon.startsWith('http')))\r\n            ) {\r\n                const img = document.createElement('img');\r\n                img.src = icon;\r\n                img.alt = app.name;\r\n                img.draggable = false;\r\n                iconWrap.appendChild(img);\r\n            } else if (typeof icon === 'string' && icon.trim().length) {\r\n                const emoji = document.createElement('div');\r\n                emoji.className = 'launchpad-app-emoji';\r\n                emoji.textContent = icon;\r\n                iconWrap.appendChild(emoji);\r\n            } else {\r\n                const fallback = document.createElement('img');\r\n                fallback.src = './img/sucher.png';\r\n                fallback.alt = app.name;\r\n                fallback.draggable = false;\r\n                iconWrap.appendChild(fallback);\r\n            }\r\n\r\n            const label = document.createElement('span');\r\n            label.className = 'launchpad-app-label';\r\n            label.textContent = app.name;\r\n\r\n            btn.appendChild(iconWrap);\r\n            btn.appendChild(label);\r\n            grid.appendChild(btn);\r\n        });\r\n    }\r\n\r\n    function openApp(windowId: string): void {\r\n        if (!windowId) return;\r\n        const w: any = window as any;\r\n        const launchpadModal = document.getElementById('launchpad-modal');\r\n        if (launchpadModal && w.dialogs && w.dialogs['launchpad-modal']) {\r\n            w.dialogs['launchpad-modal'].close?.();\r\n        } else if (launchpadModal) {\r\n            launchpadModal.classList.add('hidden');\r\n        }\r\n\r\n        const WM = w.WindowManager;\r\n        if (WM?.open) {\r\n            WM.open(windowId);\r\n            return;\r\n        }\r\n        const dialog = w.dialogs && w.dialogs[windowId];\r\n        if (dialog?.open) dialog.open();\r\n        else {\r\n            const modalElement = document.getElementById(windowId);\r\n            if (modalElement) {\r\n                modalElement.classList.remove('hidden');\r\n                w.bringDialogToFront?.(windowId);\r\n                w.updateProgramLabelByTopModal?.();\r\n            }\r\n        }\r\n    }\r\n\r\n    function refresh(): void {\r\n        loadApps();\r\n    }\r\n\r\n    function clearSearch(): void {\r\n        if (searchInput) searchInput.value = '';\r\n        filteredApps = [...allApps];\r\n        renderApps();\r\n    }\r\n\r\n    window.addEventListener('languagePreferenceChange', () => {\r\n        if (container) loadApps();\r\n    });\r\n\r\n    // Register ActionBus action to open window and close launchpad\r\n    const AB = (window as any).ActionBus;\r\n    if (typeof AB?.register === 'function') {\r\n        (AB as any).register('launchpadOpenWindow', (params: any) => {\r\n            const id = params?.windowId || params?.windowid || params?.window || params?.id;\r\n            if (id) openApp(id);\r\n        });\r\n    }\r\n\r\n    (window as any).LaunchpadSystem = {\r\n        init,\r\n        refresh,\r\n        clearSearch,\r\n        get container() {\r\n            return container;\r\n        },\r\n    };\r\n})();\r\n"]}