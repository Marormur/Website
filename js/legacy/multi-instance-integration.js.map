{"version":3,"file":"multi-instance-integration.js","sourceRoot":"","sources":["../../src/ts/legacy/multi-instance-integration.js"],"names":[],"mappings":"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","sourcesContent":["console.log('MultiInstanceIntegration loaded');\n\n/**\n * Multi-Instance Modal Integration\n *\n * Integrates the tab system with existing modals (Terminal, TextEditor)\n * Wires up keyboard shortcuts and session management\n */\n(function () {\n    'use strict';\n\n    /**\n     * Integration manager for multi-instance modals\n     */\n    class MultiInstanceIntegration {\n        constructor() {\n            this.integrations = new Map();\n            this.isInitialized = false;\n        }\n\n        /**\n         * Initialize multi-instance integration\n         */\n        init() {\n            if (this.isInitialized) {\n                console.warn('MultiInstanceIntegration already initialized');\n                return;\n            }\n\n            // Wait for DOM and all dependencies to be ready\n            if (document.readyState === 'loading') {\n                document.addEventListener('DOMContentLoaded', () => {\n                    this.setup();\n                });\n            } else {\n                this.setup();\n            }\n        }\n\n        /**\n         * Setup integrations\n         */\n        setup() {\n            console.log('MultiInstanceIntegration: Setting up...');\n\n            // Check if required dependencies are available\n            if (!window.InstanceManager || !window.WindowTabManager || !window.KeyboardShortcuts) {\n                console.error('MultiInstanceIntegration: Required dependencies not loaded');\n                return;\n            }\n\n            // Setup Terminal integration if available\n            if (window.TerminalInstanceManager) {\n                this.setupTerminalIntegration();\n            }\n\n            // Setup Text Editor integration if available\n            if (window.TextEditorInstanceManager) {\n                this.setupTextEditorIntegration();\n            }\n\n            // Setup Finder integration if available\n            if (window.FinderInstanceManager) {\n                this.setupFinderIntegration();\n            }\n\n            // Register managers with session manager\n            if (window.SessionManager) {\n                if (window.TerminalInstanceManager) {\n                    window.SessionManager.registerManager(\n                        'terminal',\n                        window.TerminalInstanceManager\n                    );\n                }\n                if (window.TextEditorInstanceManager) {\n                    window.SessionManager.registerManager(\n                        'text-editor',\n                        window.TextEditorInstanceManager\n                    );\n                }\n                if (window.FinderInstanceManager) {\n                    window.SessionManager.registerManager('finder', window.FinderInstanceManager);\n                }\n\n                // Restore saved sessions before starting auto-save\n                window.SessionManager.restoreAllSessions();\n\n                // After restoring sessions (or on fresh start), ensure all integrations\n                // have their tabs properly set up and active instances visible\n                this.integrations.forEach((integration, type) => {\n                    const { manager, tabManager } = integration;\n                    const instances = manager.getAllInstances();\n\n                    // Refresh tabs to reflect current instances\n                    // (works for both restored instances and fresh starts)\n                    if (tabManager && tabManager.controller) {\n                        tabManager.controller.refresh();\n                    }\n\n                    // Show the active instance if any exist\n                    if (instances.length > 0) {\n                        const activeInstance = manager.getActiveInstance();\n                        if (activeInstance) {\n                            this.showInstance(type, activeInstance.instanceId);\n                        }\n                    }\n                });\n\n                // Start auto-save\n                window.SessionManager.startAutoSave();\n            }\n\n            // Provide a precise context resolver to KeyboardShortcuts\n            if (\n                window.KeyboardShortcuts &&\n                typeof window.KeyboardShortcuts.setContextResolver === 'function'\n            ) {\n                window.KeyboardShortcuts.setContextResolver(() => {\n                    try {\n                        const wm = window.WindowManager;\n                        const top =\n                            wm && typeof wm.getTopWindow === 'function' ? wm.getTopWindow() : null;\n                        const topId = top?.id || '';\n                        // Find matching integration by modalId\n                        let match = 'global';\n                        this.integrations.forEach((val, key) => {\n                            if (val && val.modalId === topId) {\n                                match = key;\n                            }\n                        });\n                        return match;\n                    } catch {\n                        return 'global';\n                    }\n                });\n            }\n\n            this.isInitialized = true;\n            console.log('MultiInstanceIntegration: Setup complete');\n        }\n\n        /**\n         * Setup Terminal modal integration\n         */\n        setupTerminalIntegration() {\n            console.log('Setting up Terminal integration...');\n\n            // Create tab manager for terminal\n            const terminalTabManager = new window.WindowTabManager({\n                containerId: 'terminal-tabs-container',\n                instanceManager: window.TerminalInstanceManager,\n                onTabSwitch: instanceId => {\n                    // Set as active in manager first\n                    window.TerminalInstanceManager.setActiveInstance(instanceId);\n                    // Then show/hide instances\n                    this.showInstance('terminal', instanceId);\n                },\n                onTabClose: _instanceId => {\n                    // Instance will be destroyed by tab manager\n                },\n                onNewTab: () => {\n                    // Create a new terminal instance\n                    const count = window.TerminalInstanceManager.getInstanceCount();\n                    window.TerminalInstanceManager.createInstance({\n                        title: `Terminal ${count + 1}`,\n                    });\n                },\n            });\n\n            // Store integration info\n            this.integrations.set('terminal', {\n                manager: window.TerminalInstanceManager,\n                tabManager: terminalTabManager,\n                modalId: 'terminal-modal',\n                containerId: 'terminal-container',\n            });\n\n            // Register keyboard shortcuts for Terminal (after integration is stored)\n            this.registerShortcutsForType('terminal', window.TerminalInstanceManager);\n\n            // Listen for new instances and add tabs\n            this.setupInstanceListeners('terminal');\n        }\n\n        /**\n         * Setup Text Editor modal integration\n         */\n        setupTextEditorIntegration() {\n            console.log('Setting up TextEditor integration...');\n\n            // Create tab manager for text editor\n            const editorTabManager = new window.WindowTabManager({\n                containerId: 'text-editor-tabs-container',\n                instanceManager: window.TextEditorInstanceManager,\n                onTabSwitch: instanceId => {\n                    // Set as active in manager first\n                    window.TextEditorInstanceManager.setActiveInstance(instanceId);\n                    // Then show/hide instances\n                    this.showInstance('text-editor', instanceId);\n                },\n                onTabClose: _instanceId => {\n                    // Instance will be destroyed by tab manager\n                },\n                onNewTab: () => {\n                    // Create a new text editor instance\n                    const count = window.TextEditorInstanceManager.getInstanceCount();\n                    window.TextEditorInstanceManager.createInstance({\n                        title: `Editor ${count + 1}`,\n                    });\n                },\n            });\n\n            // Store integration info\n            this.integrations.set('text-editor', {\n                manager: window.TextEditorInstanceManager,\n                tabManager: editorTabManager,\n                modalId: 'text-modal',\n                containerId: 'text-editor-container',\n            });\n\n            // Register keyboard shortcuts for Text Editor (after integration is stored)\n            this.registerShortcutsForType('text-editor', window.TextEditorInstanceManager);\n\n            // Listen for new instances and add tabs\n            this.setupInstanceListeners('text-editor');\n        }\n\n        /**\n         * Setup Finder modal integration\n         */\n        setupFinderIntegration() {\n            console.log('Setting up Finder integration...');\n\n            // Create tab manager for finder\n            const finderTabManager = new window.WindowTabManager({\n                containerId: 'finder-tabs-container',\n                instanceManager: window.FinderInstanceManager,\n                onTabSwitch: instanceId => {\n                    // Set as active in manager first\n                    window.FinderInstanceManager.setActiveInstance(instanceId);\n                    // Then show/hide instances\n                    this.showInstance('finder', instanceId);\n                },\n                onTabClose: _instanceId => {\n                    // Instance will be destroyed by tab manager\n                },\n                onNewTab: () => {\n                    // Create a new finder instance\n                    const count = window.FinderInstanceManager.getInstanceCount();\n                    window.FinderInstanceManager.createInstance({\n                        title: `Finder ${count + 1}`,\n                    });\n                },\n                // Close the Finder modal if the last tab was closed\n                onAllTabsClosed: () => {\n                    if (window.API?.window?.close) {\n                        window.API.window.close('finder-modal');\n                    } else {\n                        const modal = document.getElementById('finder-modal');\n                        if (modal) modal.classList.add('hidden');\n                    }\n                },\n            });\n\n            // Store integration info\n            this.integrations.set('finder', {\n                manager: window.FinderInstanceManager,\n                tabManager: finderTabManager,\n                modalId: 'finder-modal',\n                containerId: 'finder-container',\n            });\n\n            // Register keyboard shortcuts for Finder (after integration is stored)\n            this.registerShortcutsForType('finder', window.FinderInstanceManager);\n\n            // Listen for new instances and add tabs\n            this.setupInstanceListeners('finder');\n        }\n\n        /**\n         * Setup listeners for instance creation/destruction\n         * @param {string} type - Instance type\n         */\n        setupInstanceListeners(type) {\n            const integration = this.integrations.get(type);\n            if (!integration) return;\n\n            const { manager, tabManager, containerId: _containerId } = integration;\n\n            // Listen for instance creation (via manager)\n            const originalCreate = manager.createInstance.bind(manager);\n            manager.createInstance = config => {\n                const instance = originalCreate(config);\n                if (instance) {\n                    // Add tab for this instance\n                    tabManager.addTab(instance);\n\n                    // Show/hide instances based on active state\n                    this.updateInstanceVisibility(type);\n                }\n                return instance;\n            };\n\n            // Listen for instance destruction (via manager)\n            const originalDestroy = manager.destroyInstance.bind(manager);\n            manager.destroyInstance = instanceId => {\n                originalDestroy(instanceId);\n                // After destruction, force tab UI refresh to ensure sync\n                if (\n                    tabManager &&\n                    tabManager.controller &&\n                    typeof tabManager.controller.refresh === 'function'\n                ) {\n                    tabManager.controller.refresh();\n                }\n            };\n        }\n\n        /**\n         * Show a specific instance and hide others\n         * @param {string} type - Instance type\n         * @param {string} instanceId - Instance ID to show\n         */\n        showInstance(type, instanceId) {\n            const integration = this.integrations.get(type);\n            if (!integration) return;\n\n            const instances = integration.manager.getAllInstances();\n            instances.forEach(instance => {\n                if (instance.instanceId === instanceId) {\n                    instance.show();\n                } else {\n                    instance.hide();\n                }\n            });\n        }\n\n        /**\n         * Update visibility of all instances for a type\n         * @param {string} type - Instance type\n         */\n        updateInstanceVisibility(type) {\n            const integration = this.integrations.get(type);\n            if (!integration) return;\n\n            const activeInstance = integration.manager.getActiveInstance();\n            if (activeInstance) {\n                this.showInstance(type, activeInstance.instanceId);\n            }\n        }\n\n        /**\n         * Register keyboard shortcuts for a window type\n         * @param {string} type - Window type\n         * @param {InstanceManager} manager - Instance manager\n         */\n        registerShortcutsForType(type, manager) {\n            // Get the modal element to scope shortcuts to\n            const integration = this.integrations.get(type);\n            const modalId = integration?.modalId;\n            if (!modalId) {\n                console.error(`Cannot register shortcuts for ${type}: no modalId found`);\n                return;\n            }\n\n            const modalElement = document.getElementById(modalId);\n            if (!modalElement) {\n                console.error(\n                    `Cannot register shortcuts for ${type}: modal element ${modalId} not found`\n                );\n                return;\n            }\n\n            console.log(`Registering shortcuts for ${type} on modal ${modalId}`, modalElement);\n\n            // Use manager-style registration scoped to document\n            // Modal-scoped registration doesn't work because keyboard events require element focus\n            // Instead, we rely on the manager's instance state to determine if shortcuts should fire\n            const unregister = window.KeyboardShortcuts.register(manager, {\n                scope: document,\n                newTitleFactory: () => `${type} ${manager.getInstanceCount() + 1}`,\n            });\n\n            console.log(`Successfully registered shortcuts for ${type}`);\n\n            // Store unregister function for cleanup if needed\n            if (integration) {\n                integration.unregisterShortcuts = unregister;\n            }\n        }\n\n        /**\n         * Get integration for a type\n         * @param {string} type\n         * @returns {Object|null}\n         */\n        getIntegration(type) {\n            return this.integrations.get(type) || null;\n        }\n    }\n\n    // Create singleton instance\n    const integration = new MultiInstanceIntegration();\n\n    // Export to global scope\n    window.MultiInstanceIntegration = integration;\n\n    // Auto-initialize\n    integration.init();\n})();\n\n"]}