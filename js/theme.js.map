{"version":3,"file":"theme.js","sourceRoot":"","sources":["../src/ts/theme.ts"],"names":[],"mappings":"AAAA;;;GAGG;AAEH,CAAC,GAAG,EAAE;IACJ,YAAY,CAAC;IAIb,4CAA4C;IAC5C,MAAM,GAAG,GAAG,MAA4C,CAAC;IACzD,MAAM,aAAa,GAAI,GAAG,CAAC,aAAyC,IAAI,EAAE,CAAC;IAE3E,MAAM,SAAS,GACZ,aAAa,CAAC,oBAA+B,IAAI,iBAAiB,CAAC;IAEtE,MAAM,qBAAqB,GAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAEvE,MAAM,eAAe,GAAG,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;IAE1E,IAAI,eAAe,GAAc,CAAC,GAAG,EAAE;QACrC,MAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,SAAS,CAAqB,CAAC;QACxE,OAAO,CAAC,WAAW,IAAI,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC;YAChE,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,QAAQ,CAAc,CAAC;IAC7B,CAAC,CAAC,EAAE,CAAC;IAEL,SAAS,yBAAyB;QAChC,MAAM,OAAO,GACX,eAAe,KAAK,MAAM;YAC1B,CAAC,eAAe,KAAK,QAAQ,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;QAC5D,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC7D,CAAC;IAED,SAAS,kBAAkB,CAAC,IAAe;QACzC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC;YAAE,OAAO;QAClD,eAAe,GAAG,IAAI,CAAC;QACvB,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACtC,yBAAyB,EAAE,CAAC;QAE5B,uBAAuB;QACvB,MAAM,CAAC,aAAa,CAClB,IAAI,WAAW,CAAC,uBAAuB,EAAE;YACvC,MAAM,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE;SAC7B,CAAC,CACH,CAAC;IACJ,CAAC;IAED,SAAS,kBAAkB;QACzB,OAAO,eAAe,CAAC;IACzB,CAAC;IAED,aAAa;IACb,yBAAyB,EAAE,CAAC;IAE5B,MAAM,uBAAuB,GAAG,GAAG,EAAE;QACnC,yBAAyB,EAAE,CAAC;IAC9B,CAAC,CAAC;IAMF,MAAM,GAAG,GAAG,eAA4B,CAAC;IACzC,IAAI,OAAO,GAAG,CAAC,gBAAgB,KAAK,UAAU,EAAE,CAAC;QAC/C,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,uBAAwC,CAAC,CAAC;IAC3E,CAAC;SAAM,IAAI,OAAO,GAAG,CAAC,WAAW,KAAK,UAAU,EAAE,CAAC;QACjD,GAAG,CAAC,WAAW,CAAC,uBAAkF,CAAC,CAAC;IACtG,CAAC;IAED,gBAAgB;IAChB,MAAM,CAAC,GAAG,MAA4C,CAAC;IACvD,CAAC,CAAC,aAAa,CAAC,GAAG;QACjB,kBAAkB;QAClB,kBAAkB;QAClB,yBAAyB;KAC1B,CAAC;IAEF,kBAAkB;IAClB,CAAC,CAAC,oBAAoB,CAAC,GAAG,kBAAkB,CAAC;IAC7C,CAAC,CAAC,oBAAoB,CAAC,GAAG,kBAAkB,CAAC;AAC/C,CAAC,CAAC,EAAE,CAAC","sourcesContent":["/**\n * src/ts/theme.ts\n * Theme management (dark/light/system) with safe typing and legacy compatibility.\n */\n\n(() => {\n  'use strict';\n\n  type ThemePref = 'system' | 'light' | 'dark';\n\n  // Constants from global config if available\n  const win = window as unknown as Record<string, unknown>;\n  const APP_CONSTANTS = (win.APP_CONSTANTS as Record<string, unknown>) || {};\n\n  const THEME_KEY =\n    (APP_CONSTANTS.THEME_PREFERENCE_KEY as string) || 'themePreference';\n\n  const validThemePreferences: ThemePref[] = ['system', 'light', 'dark'];\n\n  const systemDarkQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n  let themePreference: ThemePref = (() => {\n    const fromStorage = localStorage.getItem(THEME_KEY) as ThemePref | null;\n    return (fromStorage && validThemePreferences.includes(fromStorage)\n      ? fromStorage\n      : 'system') as ThemePref;\n  })();\n\n  function updateThemeFromPreference(): void {\n    const useDark =\n      themePreference === 'dark' ||\n      (themePreference === 'system' && systemDarkQuery.matches);\n    document.documentElement.classList.toggle('dark', useDark);\n  }\n\n  function setThemePreference(pref: ThemePref): void {\n    if (!validThemePreferences.includes(pref)) return;\n    themePreference = pref;\n    localStorage.setItem(THEME_KEY, pref);\n    updateThemeFromPreference();\n\n    // Notify other modules\n    window.dispatchEvent(\n      new CustomEvent('themePreferenceChange', {\n        detail: { preference: pref },\n      })\n    );\n  }\n\n  function getThemePreference(): ThemePref {\n    return themePreference;\n  }\n\n  // Initialize\n  updateThemeFromPreference();\n\n  const handleSystemThemeChange = () => {\n    updateThemeFromPreference();\n  };\n\n  type MQLLegacy = MediaQueryList & {\n    addListener?: (listener: (this: MediaQueryList, ev: MediaQueryListEvent) => void) => void;\n    removeListener?: (listener: (this: MediaQueryList, ev: MediaQueryListEvent) => void) => void;\n  };\n  const mql = systemDarkQuery as MQLLegacy;\n  if (typeof mql.addEventListener === 'function') {\n    mql.addEventListener('change', handleSystemThemeChange as EventListener);\n  } else if (typeof mql.addListener === 'function') {\n    mql.addListener(handleSystemThemeChange as (this: MediaQueryList, ev: MediaQueryListEvent) => void);\n  }\n\n  // Global export\n  const w = window as unknown as Record<string, unknown>;\n  w['ThemeSystem'] = {\n    setThemePreference,\n    getThemePreference,\n    updateThemeFromPreference,\n  };\n\n  // Legacy wrappers\n  w['setThemePreference'] = setThemePreference;\n  w['getThemePreference'] = getThemePreference;\n})();\n"]}