{"version":3,"file":"theme.js","sourceRoot":"","sources":["../src/ts/theme.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAEH,yDAA0D;AAE1D,CAAC,GAAG,EAAE;IACF,YAAY,CAAC;IAIb,4CAA4C;IAC5C,MAAM,GAAG,GAAG,MAA4C,CAAC;IACzD,MAAM,aAAa,GAAI,GAAG,CAAC,aAAyC,IAAI,EAAE,CAAC;IAE3E,MAAM,SAAS,GAAI,aAAa,CAAC,oBAA+B,IAAI,iBAAiB,CAAC;IAEtF,MAAM,qBAAqB,GAAgB,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;IAEvE,MAAM,eAAe,GAAG,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;IAE1E,IAAI,eAAe,GAAc,CAAC,GAAG,EAAE;QACnC,MAAM,WAAW,GAAG,IAAA,4BAAS,EAAC,SAAS,CAAqB,CAAC;QAC7D,OAAO,CACH,WAAW,IAAI,qBAAqB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CACzE,CAAC;IACnB,CAAC,CAAC,EAAE,CAAC;IAEL,SAAS,yBAAyB;QAC9B,MAAM,OAAO,GACT,eAAe,KAAK,MAAM,IAAI,CAAC,eAAe,KAAK,QAAQ,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;QAC5F,QAAQ,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC/D,CAAC;IAED,SAAS,kBAAkB,CAAC,IAAe;QACvC,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC;YAAE,OAAO;QAClD,eAAe,GAAG,IAAI,CAAC;QACvB,IAAA,4BAAS,EAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC3B,yBAAyB,EAAE,CAAC;QAE5B,uBAAuB;QACvB,MAAM,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,uBAAuB,EAAE;YACrC,MAAM,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE;SAC/B,CAAC,CACL,CAAC;IACN,CAAC;IAED,SAAS,kBAAkB;QACvB,OAAO,eAAe,CAAC;IAC3B,CAAC;IAED,aAAa;IACb,yBAAyB,EAAE,CAAC;IAE5B,MAAM,uBAAuB,GAAG,GAAG,EAAE;QACjC,yBAAyB,EAAE,CAAC;IAChC,CAAC,CAAC;IAQF,MAAM,GAAG,GAAG,eAA4B,CAAC;IACzC,IAAI,OAAO,GAAG,CAAC,gBAAgB,KAAK,UAAU,EAAE,CAAC;QAC7C,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,uBAAwC,CAAC,CAAC;IAC7E,CAAC;SAAM,IAAI,OAAO,GAAG,CAAC,WAAW,KAAK,UAAU,EAAE,CAAC;QAC/C,GAAG,CAAC,WAAW,CACX,uBAAkF,CACrF,CAAC;IACN,CAAC;IAED,gBAAgB;IAChB,MAAM,CAAC,GAAG,MAA4C,CAAC;IACvD,CAAC,CAAC,aAAa,CAAC,GAAG;QACf,kBAAkB;QAClB,kBAAkB;QAClB,yBAAyB;KAC5B,CAAC;IAEF,kBAAkB;IAClB,CAAC,CAAC,oBAAoB,CAAC,GAAG,kBAAkB,CAAC;IAC7C,CAAC,CAAC,oBAAoB,CAAC,GAAG,kBAAkB,CAAC;AACjD,CAAC,CAAC,EAAE,CAAC","sourcesContent":["/**\n * src/ts/theme.ts\n * Theme management (dark/light/system) with safe typing and legacy compatibility.\n */\n\nimport { getString, setString } from './storage-utils.js';\n\n(() => {\n    'use strict';\n\n    type ThemePref = 'system' | 'light' | 'dark';\n\n    // Constants from global config if available\n    const win = window as unknown as Record<string, unknown>;\n    const APP_CONSTANTS = (win.APP_CONSTANTS as Record<string, unknown>) || {};\n\n    const THEME_KEY = (APP_CONSTANTS.THEME_PREFERENCE_KEY as string) || 'themePreference';\n\n    const validThemePreferences: ThemePref[] = ['system', 'light', 'dark'];\n\n    const systemDarkQuery = window.matchMedia('(prefers-color-scheme: dark)');\n\n    let themePreference: ThemePref = (() => {\n        const fromStorage = getString(THEME_KEY) as ThemePref | null;\n        return (\n            fromStorage && validThemePreferences.includes(fromStorage) ? fromStorage : 'system'\n        ) as ThemePref;\n    })();\n\n    function updateThemeFromPreference(): void {\n        const useDark =\n            themePreference === 'dark' || (themePreference === 'system' && systemDarkQuery.matches);\n        document.documentElement.classList.toggle('dark', useDark);\n    }\n\n    function setThemePreference(pref: ThemePref): void {\n        if (!validThemePreferences.includes(pref)) return;\n        themePreference = pref;\n        setString(THEME_KEY, pref);\n        updateThemeFromPreference();\n\n        // Notify other modules\n        window.dispatchEvent(\n            new CustomEvent('themePreferenceChange', {\n                detail: { preference: pref },\n            })\n        );\n    }\n\n    function getThemePreference(): ThemePref {\n        return themePreference;\n    }\n\n    // Initialize\n    updateThemeFromPreference();\n\n    const handleSystemThemeChange = () => {\n        updateThemeFromPreference();\n    };\n\n    type MQLLegacy = MediaQueryList & {\n        addListener?: (listener: (this: MediaQueryList, ev: MediaQueryListEvent) => void) => void;\n        removeListener?: (\n            listener: (this: MediaQueryList, ev: MediaQueryListEvent) => void\n        ) => void;\n    };\n    const mql = systemDarkQuery as MQLLegacy;\n    if (typeof mql.addEventListener === 'function') {\n        mql.addEventListener('change', handleSystemThemeChange as EventListener);\n    } else if (typeof mql.addListener === 'function') {\n        mql.addListener(\n            handleSystemThemeChange as (this: MediaQueryList, ev: MediaQueryListEvent) => void\n        );\n    }\n\n    // Global export\n    const w = window as unknown as Record<string, unknown>;\n    w['ThemeSystem'] = {\n        setThemePreference,\n        getThemePreference,\n        updateThemeFromPreference,\n    };\n\n    // Legacy wrappers\n    w['setThemePreference'] = setThemePreference;\n    w['getThemePreference'] = getThemePreference;\n})();\n"]}