{"version":3,"file":"menubar-utils.js","sourceRoot":"","sources":["../src/ts/menubar-utils.ts"],"names":[],"mappings":";AAAA,CAAC;IACG,YAAY,CAAC;IAIb,oDAAoD;IACpD,IACK,MAAuD,CAAC,mBAAmB;QAC3E,MAAqD,CAAC,iBAAiB,EAC1E,CAAC;QACC,OAAO;IACX,CAAC;IAED,SAAS,iBAAiB;QACtB,QAAQ,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC7D,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;gBACzC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACrC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,QAAQ;aACH,gBAAgB,CAAC,sCAAsC,CAAC;aACxD,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACf,MAAsB,CAAC,YAAY,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QACP,QAAQ;aACH,gBAAgB,CAAC,4BAA4B,CAAC;aAC9C,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACf,MAAsB,CAAC,YAAY,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACX,CAAC;IAED,SAAS,iBAAiB;QACtB,OAAO,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,6BAA6B,CAAC,CAAC,CAAC;IAC1E,CAAC;IAED,SAAS,kBAAkB,CAAC,OAAoB,EAAE,UAA0B,EAAE;QAC1E,IAAI,CAAC,OAAO;YAAE,OAAO;QACrB,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM;YAAE,OAAO;QAEpB,MAAM,SAAS,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC7C,IAAI,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI;YAAE,OAAO;QAElB,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACnD,MAAM,UAAU,GAAG,SAAS,IAAI,CAAC,OAAO,CAAC;QACzC,iBAAiB,EAAE,CAAC;QAEpB,IAAI,UAAU,EAAE,CAAC;YACb,gFAAgF;YAChF,8EAA8E;YAC9E,IAAI,CAAC,OAAO,EAAE,CAAC;gBACX,MAAM,UAAU,GAAI,MAAoG,CAAC,UAAU,CAAC;gBACpI,IAAI,UAAU,IAAI,OAAO,UAAU,CAAC,qBAAqB,KAAK,UAAU,EAAE,CAAC;oBACvE,wDAAwD;oBACxD,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;yBACxE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;wBACX,MAAM,EAAE,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;wBACzD,MAAM,EAAE,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;wBACzD,OAAO,EAAE,GAAG,EAAE,CAAC;oBACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACV,MAAM,aAAa,GAAG,QAAQ,EAAE,EAAE,IAAI,IAAI,CAAC;oBAC3C,UAAU,CAAC,qBAAqB,CAAC,aAAa,CAAC,CAAC;gBACpD,CAAC;gBAED,mEAAmE;gBACnE,IAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;gBACvC,IAAI,CAAC,IAAI;oBAAE,OAAO;YACtB,CAAC;YAED,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAChC,OAAO,CAAC,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAClD,CAAC;IACL,CAAC;IAED,SAAS,mBAAmB,CAAC,EAAsB,EAAE,UAA0B,EAAE;QAC7E,IAAI,CAAC,EAAE;YAAE,OAAO;QAChB,MAAM,qBAAqB,GACvB,OAAO,CAAC,iBAAiB,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC;QAC/E,IAAI,iBAAiB,GAAG,KAAK,CAAC;QAE9B,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YACnC,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,iBAAiB,GAAG,IAAI,CAAC;YACzB,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACtB,MAA0D,CAAC,uBAAuB,GAAG,GAAG,CAAC;YAC1F,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC7D,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACjE,MAAM,UAAU,GAAG,GAAG,GAAG,CAAE,MAAoD,CAAC,iBAAiB,IAAI,CAAC,CAAC,CAAC;YACxG,IAAI,MAAM,IAAI,UAAU,GAAG,GAAG,EAAE,CAAC;gBAC7B,iBAAiB,EAAE,CAAC;gBACpB,EAAE,CAAC,YAAY,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;YAC9C,CAAC;iBAAM,CAAC;gBACJ,kBAAkB,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAChD,CAAC;YACD,UAAU,CAAC,GAAG,EAAE;gBACZ,iBAAiB,GAAG,KAAK,CAAC;YAC9B,CAAC,EAAE,GAAG,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE;YACnC,IAAI,iBAAiB;gBAAE,OAAO;YAC7B,MAA0D,CAAC,uBAAuB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACjG,IAAI,qBAAqB,IAAI,CAAC,iBAAiB,EAAE;gBAAE,OAAO;YAC1D,kBAAkB,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;YAC9B,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACtB,MAA0D,CAAC,uBAAuB,GAAG,GAAG,CAAC;YACzF,MAAoD,CAAC,iBAAiB,GAAG,GAAG,CAAC;YAC9E,kBAAkB,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,SAAS,+BAA+B,CAAC,KAAY;QACjD,MAAM,IAAI,GAAI,MAA0D,CAAC,uBAAuB,CAAC;QACjG,IAAI,IAAI,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,GAAG,GAAG,EAAE,CAAC;YAClC,OAAO;QACX,CAAC;QACD,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,YAAY,OAAO,CAAC,CAAC,CAAE,KAAK,CAAC,MAAkB,CAAC,CAAC,CAAC,IAAI,CAAC;QAClF,IAAI,CAAC,MAAM;YAAE,OAAO;QACpB,IAAI,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC;YAAE,OAAO;QACnF,iBAAiB,EAAE,CAAC;IACxB,CAAC;IAED,SAAS,iBAAiB;QAC1B,IAAK,MAAkD,CAAC,cAAc;YAAE,OAAO;QAC9E,MAAkD,CAAC,cAAc,GAAG,IAAI,CAAC;QAEtE,MAAM,gBAAgB,GAAG,QAAQ,CAAC,cAAc,CAAC,oBAAoB,CAAC,CAAC;QACvE,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QAC9D,mBAAmB,CAAC,gBAAgB,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;QACnE,mBAAmB,CAAC,YAAY,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;QAE/D,sCAAsC;QACtC,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YACzC,MAAM,UAAU,GAAI,MAA0F,CAAC,UAAU,CAAC;YAC1H,IAAI,UAAU,IAAI,OAAO,UAAU,CAAC,0BAA0B,KAAK,UAAU,EAAE,CAAC;gBAC5E,UAAU,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;YACjD,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,+BAA+B,CAAC,CAAC;QACpE,QAAQ,CAAC,gBAAgB,CAAC,aAAa,EAAE,+BAA+B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7F,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,EAAE;YAC3C,IAAK,KAAuB,CAAC,GAAG,KAAK,QAAQ;gBAAE,iBAAiB,EAAE,CAAC;QACvE,CAAC,CAAC,CAAC;IACP,CAAC;IAED,aAAa;IACZ,MAGC,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACxC,MAAyE,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IAErH,8CAA8C;IAC9C,IAAI,QAAQ,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;QACpC,QAAQ,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,iBAAiB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACrF,CAAC;SAAM,CAAC;QACJ,iBAAiB,EAAE,CAAC;IACxB,CAAC;AACL,CAAC,CAAC,EAAE,CAAC","sourcesContent":["(function () {\n    'use strict';\n\n    type TriggerOptions = { hoverRequiresOpen?: boolean; forceOpen?: boolean };\n\n    // Avoid redefining if legacy already provided these\n    if (\n        (window as unknown as { bindDropdownTrigger?: unknown }).bindDropdownTrigger &&\n        (window as unknown as { hideMenuDropdowns?: unknown }).hideMenuDropdowns\n    ) {\n        return;\n    }\n\n    function hideMenuDropdowns(): void {\n        document.querySelectorAll('.menu-dropdown').forEach((dropdown) => {\n            if (!dropdown.classList.contains('hidden')) {\n                dropdown.classList.add('hidden');\n            }\n        });\n        document\n            .querySelectorAll('[data-menubar-trigger-button=\"true\"]')\n            .forEach((button) => {\n                (button as HTMLElement).setAttribute('aria-expanded', 'false');\n            });\n        document\n            .querySelectorAll('[data-system-menu-trigger]')\n            .forEach((button) => {\n                (button as HTMLElement).setAttribute('aria-expanded', 'false');\n            });\n    }\n\n    function isAnyDropdownOpen(): boolean {\n        return Boolean(document.querySelector('.menu-dropdown:not(.hidden)'));\n    }\n\n    function toggleMenuDropdown(trigger: HTMLElement, options: TriggerOptions = {}): void {\n        if (!trigger) return;\n        const menuId = trigger.getAttribute('aria-controls');\n        if (!menuId) return;\n        \n        const forceOpen = Boolean(options.forceOpen);\n        let menu = document.getElementById(menuId);\n        if (!menu) return;\n        \n        const wasOpen = !menu.classList.contains('hidden');\n        const shouldOpen = forceOpen || !wasOpen;\n        hideMenuDropdowns();\n        \n        if (shouldOpen) {\n            // Only re-render menu if it was NOT already open (i.e., we're opening it fresh)\n            // This prevents re-rendering during hover events when menu is already visible\n            if (!wasOpen) {\n                const MenuSystem = (window as unknown as { MenuSystem?: { renderApplicationMenu?: (modalId?: string | null) => void } }).MenuSystem;\n                if (MenuSystem && typeof MenuSystem.renderApplicationMenu === 'function') {\n                    // Get the current active modal to pass to menu renderer\n                    const topModal = Array.from(document.querySelectorAll('.modal:not(.hidden)'))\n                        .sort((a, b) => {\n                            const zA = parseInt(getComputedStyle(a).zIndex, 10) || 0;\n                            const zB = parseInt(getComputedStyle(b).zIndex, 10) || 0;\n                            return zB - zA;\n                        })[0];\n                    const activeModalId = topModal?.id || null;\n                    MenuSystem.renderApplicationMenu(activeModalId);\n                }\n                \n                // Re-get menu element after rendering (it may have been recreated)\n                menu = document.getElementById(menuId);\n                if (!menu) return;\n            }\n            \n            menu.classList.remove('hidden');\n            trigger.setAttribute('aria-expanded', 'true');\n        }\n    }\n\n    function bindDropdownTrigger(el: HTMLElement | null, options: TriggerOptions = {}): void {\n        if (!el) return;\n        const hoverRequiresExisting =\n            options.hoverRequiresOpen !== undefined ? options.hoverRequiresOpen : true;\n        let clickJustOccurred = false;\n\n        el.addEventListener('click', (event) => {\n            event.stopPropagation();\n            clickJustOccurred = true;\n            const now = Date.now();\n            (window as unknown as { __lastMenuInteractionAt?: number }).__lastMenuInteractionAt = now;\n            const menuId = el.getAttribute('aria-controls');\n            const menu = menuId ? document.getElementById(menuId) : null;\n            const isOpen = menu ? !menu.classList.contains('hidden') : false;\n            const sinceFocus = now - ((window as unknown as { __lastMenuFocusAt?: number }).__lastMenuFocusAt || 0);\n            if (isOpen && sinceFocus > 200) {\n                hideMenuDropdowns();\n                el.setAttribute('aria-expanded', 'false');\n            } else {\n                toggleMenuDropdown(el, { forceOpen: true });\n            }\n            setTimeout(() => {\n                clickJustOccurred = false;\n            }, 200);\n        });\n\n        el.addEventListener('mouseenter', () => {\n            if (clickJustOccurred) return;\n            (window as unknown as { __lastMenuInteractionAt?: number }).__lastMenuInteractionAt = Date.now();\n            if (hoverRequiresExisting && !isAnyDropdownOpen()) return;\n            toggleMenuDropdown(el, { forceOpen: true });\n        });\n\n        el.addEventListener('focus', () => {\n            const now = Date.now();\n            (window as unknown as { __lastMenuInteractionAt?: number }).__lastMenuInteractionAt = now;\n            (window as unknown as { __lastMenuFocusAt?: number }).__lastMenuFocusAt = now;\n            toggleMenuDropdown(el, { forceOpen: true });\n        });\n    }\n\n    function handleDocumentClickToCloseMenus(event: Event): void {\n        const last = (window as unknown as { __lastMenuInteractionAt?: number }).__lastMenuInteractionAt;\n        if (last && Date.now() - last < 200) {\n            return;\n        }\n        const target = event.target instanceof Element ? (event.target as Element) : null;\n        if (!target) return;\n        if (target.closest('.menubar-trigger') || target.closest('.menu-dropdown')) return;\n        hideMenuDropdowns();\n    }\n\n    function initMenubarWiring() {\n    if ((window as unknown as { __menubarWired?: boolean }).__menubarWired) return;\n    (window as unknown as { __menubarWired?: boolean }).__menubarWired = true;\n\n        const appleMenuTrigger = document.getElementById('apple-menu-trigger');\n        const programLabel = document.getElementById('program-label');\n        bindDropdownTrigger(appleMenuTrigger, { hoverRequiresOpen: true });\n        bindDropdownTrigger(programLabel, { hoverRequiresOpen: true });\n\n        // Menu action activation from menu.js\n        document.addEventListener('click', (event) => {\n            const MenuSystem = (window as unknown as { MenuSystem?: { handleMenuActionActivation?: (e: Event) => void } }).MenuSystem;\n            if (MenuSystem && typeof MenuSystem.handleMenuActionActivation === 'function') {\n                MenuSystem.handleMenuActionActivation(event);\n            }\n        });\n\n        document.addEventListener('click', handleDocumentClickToCloseMenus);\n        document.addEventListener('pointerdown', handleDocumentClickToCloseMenus, { capture: true });\n        document.addEventListener('keydown', (event) => {\n            if ((event as KeyboardEvent).key === 'Escape') hideMenuDropdowns();\n        });\n    }\n\n    // Expose API\n    (window as unknown as {\n        hideMenuDropdowns: typeof hideMenuDropdowns;\n        bindDropdownTrigger: typeof bindDropdownTrigger;\n    }).hideMenuDropdowns = hideMenuDropdowns;\n    (window as unknown as { bindDropdownTrigger: typeof bindDropdownTrigger }).bindDropdownTrigger = bindDropdownTrigger;\n\n    // Initialize on DOMContentLoaded (idempotent)\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initMenubarWiring, { once: true });\n    } else {\n        initMenubarWiring();\n    }\n})();\n"]}