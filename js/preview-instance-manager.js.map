{"version":3,"file":"preview-instance-manager.js","sourceRoot":"","sources":["../src/ts/preview-instance-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import PreviewWindowInstance, { PreviewWindowState } from './preview-window-instance';\r\n\r\nexport class PreviewInstanceManager {\r\n    static type = 'preview';\r\n    static instances: Map<string, PreviewWindowInstance> = new Map();\r\n    static instanceCounter = 0;\r\n    static singletonId = 'preview-single';\r\n\r\n    static createInstance(config: Partial<PreviewWindowState> = {}): PreviewWindowInstance {\r\n        this.instanceCounter++;\r\n        const instanceId = `${this.type}-${this.instanceCounter}`;\r\n        const instance = new PreviewWindowInstance({\r\n            id: instanceId,\r\n            type: this.type,\r\n            title: config.path ? `Preview: ${config.path}` : 'Preview',\r\n            initialState: config,\r\n        });\r\n        this.instances.set(instanceId, instance);\r\n        return instance;\r\n    }\r\n\r\n    /** Ensure a single initialized instance attached to #preview-container */\r\n    static getOrCreateSingleton(): PreviewWindowInstance | null {\r\n        const existing = this.instances.get(this.singletonId);\r\n        if (existing && (existing as any).isInitialized) return existing;\r\n        const containerRoot = document.getElementById('preview-container');\r\n        if (!containerRoot) {\r\n            console.error('Preview container #preview-container not found');\r\n            return null;\r\n        }\r\n        // Create/ensure inner container for the instance\r\n        let instContainer = containerRoot.querySelector('#preview-instance-container') as HTMLElement | null;\r\n        if (!instContainer) {\r\n            instContainer = document.createElement('div');\r\n            instContainer.id = 'preview-instance-container';\r\n            instContainer.className = 'h-full flex flex-col min-h-0';\r\n            containerRoot.appendChild(instContainer);\r\n        }\r\n        const instance = new PreviewWindowInstance({\r\n            id: this.singletonId,\r\n            type: this.type,\r\n            title: 'Preview',\r\n            initialState: { images: [], currentIndex: 0, zoom: 1 },\r\n        });\r\n        try {\r\n            instance.init(instContainer);\r\n        } catch (e) {\r\n            console.error('Failed to initialize Preview instance:', e);\r\n            return null;\r\n        }\r\n        this.instances.set(this.singletonId, instance);\r\n        return instance;\r\n    }\r\n\r\n    /** Open a list of images in the Preview (ensures modal and instance) */\r\n    static openImages(images: string[], startIndex = 0, path?: string): void {\r\n        if (!Array.isArray(images) || images.length === 0) return;\r\n        // Open preview modal first\r\n        try {\r\n            const W = window as unknown as Window & { API?: any; WindowManager?: any };\r\n            if (W.API?.window?.open) W.API.window.open('preview-modal');\r\n            else W.WindowManager?.open?.('preview-modal');\r\n        } catch {}\r\n\r\n        const instance = this.getOrCreateSingleton();\r\n        if (!instance) return;\r\n        const idx = Math.max(0, Math.min(startIndex, images.length - 1));\r\n        instance.updateState({ images, currentIndex: idx, path: path || undefined });\r\n        instance.render();\r\n        // Ensure visible\r\n        (instance as any).show?.();\r\n    }\r\n\r\n    static getInstance(instanceId: string): PreviewWindowInstance | undefined {\r\n        return this.instances.get(instanceId);\r\n    }\r\n\r\n    static destroyInstance(instanceId: string): void {\r\n        const instance = this.instances.get(instanceId);\r\n        if (instance) {\r\n            instance.destroy();\r\n            this.instances.delete(instanceId);\r\n        }\r\n    }\r\n\r\n    static destroyAll(): void {\r\n        this.instances.forEach(instance => instance.destroy());\r\n        this.instances.clear();\r\n    }\r\n}\r\n\r\ntype WindowWithPreviewMgr = { PreviewInstanceManager?: typeof PreviewInstanceManager };\r\n(window as unknown as WindowWithPreviewMgr).PreviewInstanceManager = PreviewInstanceManager;\r\nexport default PreviewInstanceManager;\r\n"]}