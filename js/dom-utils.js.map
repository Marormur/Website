{"version":3,"file":"dom-utils.js","sourceRoot":"","sources":["../src/ts/dom-utils.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAMH,oBAGC;AAMD,oBAGC;AAOD,wBAOC;AAOD,8BAGC;AAOD,sCAGC;AAMD,0BAEC;AAMD,0BAEC;AAOD,0BAEC;AAQD,sBAKC;AAQD,4BAKC;AArGD;;;GAGG;AACH,SAAgB,IAAI,CAAC,OAA2B;IAC5C,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AAED;;;GAGG;AACH,SAAgB,IAAI,CAAC,OAA2B;IAC5C,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC;AAED;;;;GAIG;AACH,SAAgB,MAAM,CAAC,OAA2B,EAAE,OAAiB;IACjE,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QACxB,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;SAAM,CAAC;QACJ,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,SAAgB,SAAS,CAAC,OAA2B;IACjD,IAAI,CAAC,OAAO;QAAE,OAAO,KAAK,CAAC;IAC3B,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACjD,CAAC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAAC,OAA2B,EAAE,OAAgB;IACvE,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC;AACjD,CAAC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAC,QAAgC;IACpD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAC,QAAgC;IACpD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AAED;;;;GAIG;AACH,SAAgB,OAAO,CAAC,EAAU;IAC9B,OAAO,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;AACvC,CAAC;AAED;;;;;GAKG;AACH,SAAgB,KAAK,CACjB,QAAgB,EAChB,SAAqB,QAAQ;IAE7B,OAAO,MAAM,CAAC,aAAa,CAAI,QAAQ,CAAC,CAAC;AAC7C,CAAC;AAED;;;;;GAKG;AACH,SAAgB,QAAQ,CACpB,QAAgB,EAChB,SAAqB,QAAQ;IAE7B,OAAO,MAAM,CAAC,gBAAgB,CAAI,QAAQ,CAAC,CAAC;AAChD,CAAC;AAED,sDAAsD;AACtD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;IAC/B,MAA+D,CAAC,QAAQ,GAAG;QACxE,IAAI;QACJ,IAAI;QACJ,MAAM;QACN,SAAS;QACT,aAAa;QACb,OAAO;QACP,OAAO;QACP,OAAO;QACP,KAAK;QACL,QAAQ;KACX,CAAC;AACN,CAAC;AAED,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC","sourcesContent":["/**\n * DOM Utility Functions\n * Centralized helpers for common DOM manipulations\n *\n * @module dom-utils\n */\n\n/**\n * Show an element by removing the 'hidden' class\n * @param element - The element to show (null-safe)\n */\nexport function show(element: HTMLElement | null): void {\n    if (!element) return;\n    element.classList.remove('hidden');\n}\n\n/**\n * Hide an element by adding the 'hidden' class\n * @param element - The element to hide (null-safe)\n */\nexport function hide(element: HTMLElement | null): void {\n    if (!element) return;\n    element.classList.add('hidden');\n}\n\n/**\n * Toggle element visibility\n * @param element - The element to toggle (null-safe)\n * @param visible - Optional boolean to force visible (true) or hidden (false)\n */\nexport function toggle(element: HTMLElement | null, visible?: boolean): void {\n    if (!element) return;\n    if (visible === undefined) {\n        element.classList.toggle('hidden');\n    } else {\n        element.classList.toggle('hidden', !visible);\n    }\n}\n\n/**\n * Check if an element is currently visible\n * @param element - The element to check (null-safe)\n * @returns true if element exists and does not have 'hidden' class\n */\nexport function isVisible(element: HTMLElement | null): boolean {\n    if (!element) return false;\n    return !element.classList.contains('hidden');\n}\n\n/**\n * Set element visibility explicitly\n * @param element - The element to update (null-safe)\n * @param visible - true to show, false to hide\n */\nexport function setVisibility(element: HTMLElement | null, visible: boolean): void {\n    if (!element) return;\n    element.classList.toggle('hidden', !visible);\n}\n\n/**\n * Show multiple elements at once\n * @param elements - Array of elements to show\n */\nexport function showAll(elements: (HTMLElement | null)[]): void {\n    elements.forEach(show);\n}\n\n/**\n * Hide multiple elements at once\n * @param elements - Array of elements to hide\n */\nexport function hideAll(elements: (HTMLElement | null)[]): void {\n    elements.forEach(hide);\n}\n\n/**\n * Get element by ID with type safety\n * @param id - Element ID\n * @returns The element or null if not found\n */\nexport function getById(id: string): HTMLElement | null {\n    return document.getElementById(id);\n}\n\n/**\n * Query selector with type assertion\n * @param selector - CSS selector\n * @param parent - Optional parent element (defaults to document)\n * @returns The first matching element or null\n */\nexport function query<T extends HTMLElement = HTMLElement>(\n    selector: string,\n    parent: ParentNode = document\n): T | null {\n    return parent.querySelector<T>(selector);\n}\n\n/**\n * Query selector all with type assertion\n * @param selector - CSS selector\n * @param parent - Optional parent element (defaults to document)\n * @returns NodeList of matching elements\n */\nexport function queryAll<T extends HTMLElement = HTMLElement>(\n    selector: string,\n    parent: ParentNode = document\n): NodeListOf<T> {\n    return parent.querySelectorAll<T>(selector);\n}\n\n// Attach to window for compatibility with legacy code\nif (typeof window !== 'undefined') {\n    (window as Window & { DOMUtils?: typeof import('./dom-utils') }).DOMUtils = {\n        show,\n        hide,\n        toggle,\n        isVisible,\n        setVisibility,\n        showAll,\n        hideAll,\n        getById,\n        query,\n        queryAll,\n    };\n}\n\nconsole.log('âœ… DOMUtils loaded');\n\n"]}