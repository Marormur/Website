{"version":3,"file":"dom-utils.js","sourceRoot":"","sources":["../src/ts/dom-utils.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;AAMH,oBAGC;AAMD,oBAGC;AAOD,wBAOC;AAOD,8BAGC;AAOD,sCAGC;AAMD,0BAEC;AAMD,0BAEC;AAOD,0BAEC;AAQD,sBAKC;AAQD,4BAKC;AArGD;;;GAGG;AACH,SAAgB,IAAI,CAAC,OAA2B;IAC5C,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AAED;;;GAGG;AACH,SAAgB,IAAI,CAAC,OAA2B;IAC5C,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACpC,CAAC;AAED;;;;GAIG;AACH,SAAgB,MAAM,CAAC,OAA2B,EAAE,OAAiB;IACjE,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;QACxB,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;SAAM,CAAC;QACJ,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;AACL,CAAC;AAED;;;;GAIG;AACH,SAAgB,SAAS,CAAC,OAA2B;IACjD,IAAI,CAAC,OAAO;QAAE,OAAO,KAAK,CAAC;IAC3B,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AACjD,CAAC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAAC,OAA2B,EAAE,OAAgB;IACvE,IAAI,CAAC,OAAO;QAAE,OAAO;IACrB,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC;AACjD,CAAC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAC,QAAgC;IACpD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AAED;;;GAGG;AACH,SAAgB,OAAO,CAAC,QAAgC;IACpD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3B,CAAC;AAED;;;;GAIG;AACH,SAAgB,OAAO,CAAC,EAAU;IAC9B,OAAO,QAAQ,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;AACvC,CAAC;AAED;;;;;GAKG;AACH,SAAgB,KAAK,CACjB,QAAgB,EAChB,SAAqB,QAAQ;IAE7B,OAAO,MAAM,CAAC,aAAa,CAAI,QAAQ,CAAC,CAAC;AAC7C,CAAC;AAED;;;;;GAKG;AACH,SAAgB,QAAQ,CACpB,QAAgB,EAChB,SAAqB,QAAQ;IAE7B,OAAO,MAAM,CAAC,gBAAgB,CAAI,QAAQ,CAAC,CAAC;AAChD,CAAC;AAED,sDAAsD;AACtD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;IAC/B,MAA+D,CAAC,QAAQ,GAAG;QACxE,IAAI;QACJ,IAAI;QACJ,MAAM;QACN,SAAS;QACT,aAAa;QACb,OAAO;QACP,OAAO;QACP,OAAO;QACP,KAAK;QACL,QAAQ;KACX,CAAC;AACN,CAAC;AAED,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC","sourcesContent":["/**\r\n * DOM Utility Functions\r\n * Centralized helpers for common DOM manipulations\r\n *\r\n * @module dom-utils\r\n */\r\n\r\n/**\r\n * Show an element by removing the 'hidden' class\r\n * @param element - The element to show (null-safe)\r\n */\r\nexport function show(element: HTMLElement | null): void {\r\n    if (!element) return;\r\n    element.classList.remove('hidden');\r\n}\r\n\r\n/**\r\n * Hide an element by adding the 'hidden' class\r\n * @param element - The element to hide (null-safe)\r\n */\r\nexport function hide(element: HTMLElement | null): void {\r\n    if (!element) return;\r\n    element.classList.add('hidden');\r\n}\r\n\r\n/**\r\n * Toggle element visibility\r\n * @param element - The element to toggle (null-safe)\r\n * @param visible - Optional boolean to force visible (true) or hidden (false)\r\n */\r\nexport function toggle(element: HTMLElement | null, visible?: boolean): void {\r\n    if (!element) return;\r\n    if (visible === undefined) {\r\n        element.classList.toggle('hidden');\r\n    } else {\r\n        element.classList.toggle('hidden', !visible);\r\n    }\r\n}\r\n\r\n/**\r\n * Check if an element is currently visible\r\n * @param element - The element to check (null-safe)\r\n * @returns true if element exists and does not have 'hidden' class\r\n */\r\nexport function isVisible(element: HTMLElement | null): boolean {\r\n    if (!element) return false;\r\n    return !element.classList.contains('hidden');\r\n}\r\n\r\n/**\r\n * Set element visibility explicitly\r\n * @param element - The element to update (null-safe)\r\n * @param visible - true to show, false to hide\r\n */\r\nexport function setVisibility(element: HTMLElement | null, visible: boolean): void {\r\n    if (!element) return;\r\n    element.classList.toggle('hidden', !visible);\r\n}\r\n\r\n/**\r\n * Show multiple elements at once\r\n * @param elements - Array of elements to show\r\n */\r\nexport function showAll(elements: (HTMLElement | null)[]): void {\r\n    elements.forEach(show);\r\n}\r\n\r\n/**\r\n * Hide multiple elements at once\r\n * @param elements - Array of elements to hide\r\n */\r\nexport function hideAll(elements: (HTMLElement | null)[]): void {\r\n    elements.forEach(hide);\r\n}\r\n\r\n/**\r\n * Get element by ID with type safety\r\n * @param id - Element ID\r\n * @returns The element or null if not found\r\n */\r\nexport function getById(id: string): HTMLElement | null {\r\n    return document.getElementById(id);\r\n}\r\n\r\n/**\r\n * Query selector with type assertion\r\n * @param selector - CSS selector\r\n * @param parent - Optional parent element (defaults to document)\r\n * @returns The first matching element or null\r\n */\r\nexport function query<T extends HTMLElement = HTMLElement>(\r\n    selector: string,\r\n    parent: ParentNode = document\r\n): T | null {\r\n    return parent.querySelector<T>(selector);\r\n}\r\n\r\n/**\r\n * Query selector all with type assertion\r\n * @param selector - CSS selector\r\n * @param parent - Optional parent element (defaults to document)\r\n * @returns NodeList of matching elements\r\n */\r\nexport function queryAll<T extends HTMLElement = HTMLElement>(\r\n    selector: string,\r\n    parent: ParentNode = document\r\n): NodeListOf<T> {\r\n    return parent.querySelectorAll<T>(selector);\r\n}\r\n\r\n// Attach to window for compatibility with legacy code\r\nif (typeof window !== 'undefined') {\r\n    (window as Window & { DOMUtils?: typeof import('./dom-utils') }).DOMUtils = {\r\n        show,\r\n        hide,\r\n        toggle,\r\n        isVisible,\r\n        setVisibility,\r\n        showAll,\r\n        hideAll,\r\n        getById,\r\n        query,\r\n        queryAll,\r\n    };\r\n}\r\n\r\nconsole.log('âœ… DOMUtils loaded');\r\n\r\n"]}